#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(deref_nullptr)]

/* automatically generated by rust-bindgen 0.59.2 */

pub type LibRaw_constructor_flags = u32;
pub const LIBRAW_OPTIONS_NONE: LibRaw_constructor_flags = 0;
pub const LIBRAW_OPTIONS_NO_MEMERR_CALLBACK: LibRaw_constructor_flags = 1;
pub const LIBRAW_OPTIONS_NO_DATAERR_CALLBACK: LibRaw_constructor_flags = 1 << 1;

pub type LibRaw_errors = i32;
pub const LIBRAW_SUCCESS: LibRaw_errors = 0;
pub const LIBRAW_UNSPECIFIED_ERROR: LibRaw_errors = -1;
pub const LIBRAW_FILE_UNSUPPORTED: LibRaw_errors = -2;
pub const LIBRAW_REQUEST_FOR_NONEXISTENT_IMAGE: LibRaw_errors = -3;
pub const LIBRAW_OUT_OF_ORDER_CALL: LibRaw_errors = -4;
pub const LIBRAW_NO_THUMBNAIL: LibRaw_errors = -5;
pub const LIBRAW_UNSUPPORTED_THUMBNAIL: LibRaw_errors = -6;
pub const LIBRAW_INPUT_CLOSED: LibRaw_errors = -7;
pub const LIBRAW_INSUFFICIENT_MEMORY: LibRaw_errors = -100007;
pub const LIBRAW_DATA_ERROR: LibRaw_errors = -100008;
pub const LIBRAW_IO_ERROR: LibRaw_errors = -100009;
pub const LIBRAW_CANCELLED_BY_CALLBACK: LibRaw_errors = -100010;
pub const LIBRAW_BAD_CROP: LibRaw_errors = -100011;

pub const LIBRAW_USE_STREAMS_DATASTREAM_MAXSIZE: u32 = 262144000;
pub const LIBRAW_DEFAULT_ADJUST_MAXIMUM_THRESHOLD: f64 = 0.75;
pub const LIBRAW_DEFAULT_AUTO_BRIGHTNESS_THRESHOLD: f64 = 0.01;
pub const LIBRAW_MAX_ALLOC_MB_DEFAULT: u32 = 2048;
pub const LIBRAW_MAX_THUMBNAIL_MB: u32 = 512;
pub const LIBRAW_MAX_METADATA_BLOCKS: u32 = 1024;
pub const LIBRAW_CBLACK_SIZE: u32 = 4104;
pub const LIBRAW_IFD_MAXCOUNT: u32 = 10;
pub const LIBRAW_CRXTRACKS_MAXCOUNT: u32 = 16;
pub const LIBRAW_AHD_TILE: u32 = 512;
pub const LIBRAW_LENS_NOT_SET: i32 = -1;
pub const LIBRAW_XTRANS: u32 = 9;
pub const LIBRAW_PROGRESS_THUMB_MASK: u32 = 268435455;
pub const LIBRAW_MAJOR_VERSION: u32 = 0;
pub const LIBRAW_MINOR_VERSION: u32 = 20;
pub const LIBRAW_PATCH_VERSION: u32 = 2;
pub const LIBRAW_SHLIB_CURRENT: u32 = 20;
pub const LIBRAW_SHLIB_REVISION: u32 = 0;
pub const LIBRAW_SHLIB_AGE: u32 = 0;
pub const LIBRAW_HISTOGRAM_SIZE: u32 = 8192;
pub type size_t = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __time_t = ::std::os::raw::c_long;
pub type time_t = __time_t;
pub type ushort = ::std::os::raw::c_ushort;
pub const LibRaw_progress_LIBRAW_PROGRESS_START: LibRaw_progress = 0;
pub const LibRaw_progress_LIBRAW_PROGRESS_OPEN: LibRaw_progress = 1;
pub const LibRaw_progress_LIBRAW_PROGRESS_IDENTIFY: LibRaw_progress = 2;
pub const LibRaw_progress_LIBRAW_PROGRESS_SIZE_ADJUST: LibRaw_progress = 4;
pub const LibRaw_progress_LIBRAW_PROGRESS_LOAD_RAW: LibRaw_progress = 8;
pub const LibRaw_progress_LIBRAW_PROGRESS_RAW2_IMAGE: LibRaw_progress = 16;
pub const LibRaw_progress_LIBRAW_PROGRESS_REMOVE_ZEROES: LibRaw_progress = 32;
pub const LibRaw_progress_LIBRAW_PROGRESS_BAD_PIXELS: LibRaw_progress = 64;
pub const LibRaw_progress_LIBRAW_PROGRESS_DARK_FRAME: LibRaw_progress = 128;
pub const LibRaw_progress_LIBRAW_PROGRESS_FOVEON_INTERPOLATE: LibRaw_progress = 256;
pub const LibRaw_progress_LIBRAW_PROGRESS_SCALE_COLORS: LibRaw_progress = 512;
pub const LibRaw_progress_LIBRAW_PROGRESS_PRE_INTERPOLATE: LibRaw_progress = 1024;
pub const LibRaw_progress_LIBRAW_PROGRESS_INTERPOLATE: LibRaw_progress = 2048;
pub const LibRaw_progress_LIBRAW_PROGRESS_MIX_GREEN: LibRaw_progress = 4096;
pub const LibRaw_progress_LIBRAW_PROGRESS_MEDIAN_FILTER: LibRaw_progress = 8192;
pub const LibRaw_progress_LIBRAW_PROGRESS_HIGHLIGHTS: LibRaw_progress = 16384;
pub const LibRaw_progress_LIBRAW_PROGRESS_FUJI_ROTATE: LibRaw_progress = 32768;
pub const LibRaw_progress_LIBRAW_PROGRESS_FLIP: LibRaw_progress = 65536;
pub const LibRaw_progress_LIBRAW_PROGRESS_APPLY_PROFILE: LibRaw_progress = 131072;
pub const LibRaw_progress_LIBRAW_PROGRESS_CONVERT_RGB: LibRaw_progress = 262144;
pub const LibRaw_progress_LIBRAW_PROGRESS_STRETCH: LibRaw_progress = 524288;
pub const LibRaw_progress_LIBRAW_PROGRESS_STAGE20: LibRaw_progress = 1048576;
pub const LibRaw_progress_LIBRAW_PROGRESS_STAGE21: LibRaw_progress = 2097152;
pub const LibRaw_progress_LIBRAW_PROGRESS_STAGE22: LibRaw_progress = 4194304;
pub const LibRaw_progress_LIBRAW_PROGRESS_STAGE23: LibRaw_progress = 8388608;
pub const LibRaw_progress_LIBRAW_PROGRESS_STAGE24: LibRaw_progress = 16777216;
pub const LibRaw_progress_LIBRAW_PROGRESS_STAGE25: LibRaw_progress = 33554432;
pub const LibRaw_progress_LIBRAW_PROGRESS_STAGE26: LibRaw_progress = 67108864;
pub const LibRaw_progress_LIBRAW_PROGRESS_STAGE27: LibRaw_progress = 134217728;
pub const LibRaw_progress_LIBRAW_PROGRESS_THUMB_LOAD: LibRaw_progress = 268435456;
pub const LibRaw_progress_LIBRAW_PROGRESS_TRESERVED1: LibRaw_progress = 536870912;
pub const LibRaw_progress_LIBRAW_PROGRESS_TRESERVED2: LibRaw_progress = 1073741824;
pub type LibRaw_progress = ::std::os::raw::c_uint;
pub const LibRaw_thumbnail_formats_LIBRAW_THUMBNAIL_UNKNOWN: LibRaw_thumbnail_formats = 0;
pub const LibRaw_thumbnail_formats_LIBRAW_THUMBNAIL_JPEG: LibRaw_thumbnail_formats = 1;
pub const LibRaw_thumbnail_formats_LIBRAW_THUMBNAIL_BITMAP: LibRaw_thumbnail_formats = 2;
pub const LibRaw_thumbnail_formats_LIBRAW_THUMBNAIL_BITMAP16: LibRaw_thumbnail_formats = 3;
pub const LibRaw_thumbnail_formats_LIBRAW_THUMBNAIL_LAYER: LibRaw_thumbnail_formats = 4;
pub const LibRaw_thumbnail_formats_LIBRAW_THUMBNAIL_ROLLEI: LibRaw_thumbnail_formats = 5;
pub type LibRaw_thumbnail_formats = ::std::os::raw::c_uint;
pub const LibRaw_image_formats_LIBRAW_IMAGE_JPEG: LibRaw_image_formats = 1;
pub const LibRaw_image_formats_LIBRAW_IMAGE_BITMAP: LibRaw_image_formats = 2;
pub type LibRaw_image_formats = ::std::os::raw::c_uint;
pub type INT64 = ::std::os::raw::c_longlong;
pub type uchar = ::std::os::raw::c_uchar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_decoder_info_t {
    pub decoder_name: *const ::std::os::raw::c_char,
    pub decoder_flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_libraw_decoder_info_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_decoder_info_t>(),
        16usize,
        concat!("Size of: ", stringify!(libraw_decoder_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_decoder_info_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_decoder_info_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_decoder_info_t>())).decoder_name as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_decoder_info_t),
            "::",
            stringify!(decoder_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_decoder_info_t>())).decoder_flags as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_decoder_info_t),
            "::",
            stringify!(decoder_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_internal_output_params_t {
    pub mix_green: ::std::os::raw::c_uint,
    pub raw_color: ::std::os::raw::c_uint,
    pub zero_is_bad: ::std::os::raw::c_uint,
    pub shrink: ushort,
    pub fuji_width: ushort,
}
#[test]
fn bindgen_test_layout_libraw_internal_output_params_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_internal_output_params_t>(),
        16usize,
        concat!("Size of: ", stringify!(libraw_internal_output_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_internal_output_params_t>(),
        4usize,
        concat!("Alignment of ", stringify!(libraw_internal_output_params_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_internal_output_params_t>())).mix_green as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_internal_output_params_t),
            "::",
            stringify!(mix_green)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_internal_output_params_t>())).raw_color as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_internal_output_params_t),
            "::",
            stringify!(raw_color)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_internal_output_params_t>())).zero_is_bad as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_internal_output_params_t),
            "::",
            stringify!(zero_is_bad)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_internal_output_params_t>())).shrink as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_internal_output_params_t),
            "::",
            stringify!(shrink)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_internal_output_params_t>())).fuji_width as *const _
                as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_internal_output_params_t),
            "::",
            stringify!(fuji_width)
        )
    );
}
pub type memory_callback = ::std::option::Option<
    unsafe extern "C" fn(
        data: *mut ::std::os::raw::c_void,
        file: *const ::std::os::raw::c_char,
        where_: *const ::std::os::raw::c_char,
    ),
>;
pub type exif_parser_callback = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        tag: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
        ord: ::std::os::raw::c_uint,
        ifp: *mut ::std::os::raw::c_void,
        base: INT64,
    ),
>;
pub type data_callback = ::std::option::Option<
    unsafe extern "C" fn(
        data: *mut ::std::os::raw::c_void,
        file: *const ::std::os::raw::c_char,
        offset: ::std::os::raw::c_int,
    ),
>;
pub type progress_callback = ::std::option::Option<
    unsafe extern "C" fn(
        data: *mut ::std::os::raw::c_void,
        stage: LibRaw_progress,
        iteration: ::std::os::raw::c_int,
        expected: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_processed_image_t {
    pub type_: LibRaw_image_formats,
    pub height: ushort,
    pub width: ushort,
    pub colors: ushort,
    pub bits: ushort,
    pub data_size: ::std::os::raw::c_uint,
    pub data: [::std::os::raw::c_uchar; 1usize],
}
#[test]
fn bindgen_test_layout_libraw_processed_image_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_processed_image_t>(),
        20usize,
        concat!("Size of: ", stringify!(libraw_processed_image_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_processed_image_t>(),
        4usize,
        concat!("Alignment of ", stringify!(libraw_processed_image_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_processed_image_t>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_processed_image_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_processed_image_t>())).height as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_processed_image_t),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_processed_image_t>())).width as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_processed_image_t),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_processed_image_t>())).colors as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_processed_image_t),
            "::",
            stringify!(colors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_processed_image_t>())).bits as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_processed_image_t),
            "::",
            stringify!(bits)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_processed_image_t>())).data_size as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_processed_image_t),
            "::",
            stringify!(data_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_processed_image_t>())).data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_processed_image_t),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_iparams_t {
    pub guard: [::std::os::raw::c_char; 4usize],
    pub make: [::std::os::raw::c_char; 64usize],
    pub model: [::std::os::raw::c_char; 64usize],
    pub software: [::std::os::raw::c_char; 64usize],
    pub normalized_make: [::std::os::raw::c_char; 64usize],
    pub normalized_model: [::std::os::raw::c_char; 64usize],
    pub maker_index: ::std::os::raw::c_uint,
    pub raw_count: ::std::os::raw::c_uint,
    pub dng_version: ::std::os::raw::c_uint,
    pub is_foveon: ::std::os::raw::c_uint,
    pub colors: ::std::os::raw::c_int,
    pub filters: ::std::os::raw::c_uint,
    pub xtrans: [[::std::os::raw::c_char; 6usize]; 6usize],
    pub xtrans_abs: [[::std::os::raw::c_char; 6usize]; 6usize],
    pub cdesc: [::std::os::raw::c_char; 5usize],
    pub xmplen: ::std::os::raw::c_uint,
    pub xmpdata: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_libraw_iparams_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_iparams_t>(),
        440usize,
        concat!("Size of: ", stringify!(libraw_iparams_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_iparams_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_iparams_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_iparams_t>())).guard as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_iparams_t),
            "::",
            stringify!(guard)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_iparams_t>())).make as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_iparams_t),
            "::",
            stringify!(make)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_iparams_t>())).model as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_iparams_t),
            "::",
            stringify!(model)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_iparams_t>())).software as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_iparams_t),
            "::",
            stringify!(software)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_iparams_t>())).normalized_make as *const _ as usize
        },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_iparams_t),
            "::",
            stringify!(normalized_make)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_iparams_t>())).normalized_model as *const _ as usize
        },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_iparams_t),
            "::",
            stringify!(normalized_model)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_iparams_t>())).maker_index as *const _ as usize },
        324usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_iparams_t),
            "::",
            stringify!(maker_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_iparams_t>())).raw_count as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_iparams_t),
            "::",
            stringify!(raw_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_iparams_t>())).dng_version as *const _ as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_iparams_t),
            "::",
            stringify!(dng_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_iparams_t>())).is_foveon as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_iparams_t),
            "::",
            stringify!(is_foveon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_iparams_t>())).colors as *const _ as usize },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_iparams_t),
            "::",
            stringify!(colors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_iparams_t>())).filters as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_iparams_t),
            "::",
            stringify!(filters)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_iparams_t>())).xtrans as *const _ as usize },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_iparams_t),
            "::",
            stringify!(xtrans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_iparams_t>())).xtrans_abs as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_iparams_t),
            "::",
            stringify!(xtrans_abs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_iparams_t>())).cdesc as *const _ as usize },
        420usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_iparams_t),
            "::",
            stringify!(cdesc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_iparams_t>())).xmplen as *const _ as usize },
        428usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_iparams_t),
            "::",
            stringify!(xmplen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_iparams_t>())).xmpdata as *const _ as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_iparams_t),
            "::",
            stringify!(xmpdata)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_raw_inset_crop_t {
    pub cleft: ushort,
    pub ctop: ushort,
    pub cwidth: ushort,
    pub cheight: ushort,
    pub aspect: ushort,
}
#[test]
fn bindgen_test_layout_libraw_raw_inset_crop_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_raw_inset_crop_t>(),
        10usize,
        concat!("Size of: ", stringify!(libraw_raw_inset_crop_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_raw_inset_crop_t>(),
        2usize,
        concat!("Alignment of ", stringify!(libraw_raw_inset_crop_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_raw_inset_crop_t>())).cleft as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_raw_inset_crop_t),
            "::",
            stringify!(cleft)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_raw_inset_crop_t>())).ctop as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_raw_inset_crop_t),
            "::",
            stringify!(ctop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_raw_inset_crop_t>())).cwidth as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_raw_inset_crop_t),
            "::",
            stringify!(cwidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_raw_inset_crop_t>())).cheight as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_raw_inset_crop_t),
            "::",
            stringify!(cheight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_raw_inset_crop_t>())).aspect as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_raw_inset_crop_t),
            "::",
            stringify!(aspect)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_image_sizes_t {
    pub raw_height: ushort,
    pub raw_width: ushort,
    pub height: ushort,
    pub width: ushort,
    pub top_margin: ushort,
    pub left_margin: ushort,
    pub iheight: ushort,
    pub iwidth: ushort,
    pub raw_pitch: ::std::os::raw::c_uint,
    pub pixel_aspect: f64,
    pub flip: ::std::os::raw::c_int,
    pub mask: [[::std::os::raw::c_int; 4usize]; 8usize],
    pub raw_inset_crop: libraw_raw_inset_crop_t,
}
#[test]
fn bindgen_test_layout_libraw_image_sizes_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_image_sizes_t>(),
        176usize,
        concat!("Size of: ", stringify!(libraw_image_sizes_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_image_sizes_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_image_sizes_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_image_sizes_t>())).raw_height as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_image_sizes_t),
            "::",
            stringify!(raw_height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_image_sizes_t>())).raw_width as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_image_sizes_t),
            "::",
            stringify!(raw_width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_image_sizes_t>())).height as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_image_sizes_t),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_image_sizes_t>())).width as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_image_sizes_t),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_image_sizes_t>())).top_margin as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_image_sizes_t),
            "::",
            stringify!(top_margin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_image_sizes_t>())).left_margin as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_image_sizes_t),
            "::",
            stringify!(left_margin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_image_sizes_t>())).iheight as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_image_sizes_t),
            "::",
            stringify!(iheight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_image_sizes_t>())).iwidth as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_image_sizes_t),
            "::",
            stringify!(iwidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_image_sizes_t>())).raw_pitch as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_image_sizes_t),
            "::",
            stringify!(raw_pitch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_image_sizes_t>())).pixel_aspect as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_image_sizes_t),
            "::",
            stringify!(pixel_aspect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_image_sizes_t>())).flip as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_image_sizes_t),
            "::",
            stringify!(flip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_image_sizes_t>())).mask as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_image_sizes_t),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_image_sizes_t>())).raw_inset_crop as *const _ as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_image_sizes_t),
            "::",
            stringify!(raw_inset_crop)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ph1_t {
    pub format: ::std::os::raw::c_int,
    pub key_off: ::std::os::raw::c_int,
    pub tag_21a: ::std::os::raw::c_int,
    pub t_black: ::std::os::raw::c_int,
    pub split_col: ::std::os::raw::c_int,
    pub black_col: ::std::os::raw::c_int,
    pub split_row: ::std::os::raw::c_int,
    pub black_row: ::std::os::raw::c_int,
    pub tag_210: f32,
}
#[test]
fn bindgen_test_layout_ph1_t() {
    assert_eq!(
        ::std::mem::size_of::<ph1_t>(),
        36usize,
        concat!("Size of: ", stringify!(ph1_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ph1_t>(),
        4usize,
        concat!("Alignment of ", stringify!(ph1_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ph1_t>())).format as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ph1_t),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ph1_t>())).key_off as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ph1_t),
            "::",
            stringify!(key_off)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ph1_t>())).tag_21a as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ph1_t),
            "::",
            stringify!(tag_21a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ph1_t>())).t_black as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ph1_t),
            "::",
            stringify!(t_black)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ph1_t>())).split_col as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ph1_t),
            "::",
            stringify!(split_col)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ph1_t>())).black_col as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ph1_t),
            "::",
            stringify!(black_col)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ph1_t>())).split_row as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ph1_t),
            "::",
            stringify!(split_row)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ph1_t>())).black_row as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ph1_t),
            "::",
            stringify!(black_row)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ph1_t>())).tag_210 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ph1_t),
            "::",
            stringify!(tag_210)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_dng_color_t {
    pub parsedfields: ::std::os::raw::c_uint,
    pub illuminant: ushort,
    pub calibration: [[f32; 4usize]; 4usize],
    pub colormatrix: [[f32; 3usize]; 4usize],
    pub forwardmatrix: [[f32; 4usize]; 3usize],
}
#[test]
fn bindgen_test_layout_libraw_dng_color_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_dng_color_t>(),
        168usize,
        concat!("Size of: ", stringify!(libraw_dng_color_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_dng_color_t>(),
        4usize,
        concat!("Alignment of ", stringify!(libraw_dng_color_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_dng_color_t>())).parsedfields as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_color_t),
            "::",
            stringify!(parsedfields)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_dng_color_t>())).illuminant as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_color_t),
            "::",
            stringify!(illuminant)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_dng_color_t>())).calibration as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_color_t),
            "::",
            stringify!(calibration)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_dng_color_t>())).colormatrix as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_color_t),
            "::",
            stringify!(colormatrix)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_dng_color_t>())).forwardmatrix as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_color_t),
            "::",
            stringify!(forwardmatrix)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_dng_levels_t {
    pub parsedfields: ::std::os::raw::c_uint,
    pub dng_cblack: [::std::os::raw::c_uint; 4104usize],
    pub dng_black: ::std::os::raw::c_uint,
    pub dng_fcblack: [f32; 4104usize],
    pub dng_fblack: f32,
    pub dng_whitelevel: [::std::os::raw::c_uint; 4usize],
    pub default_crop: [::std::os::raw::c_uint; 4usize],
    pub preview_colorspace: ::std::os::raw::c_uint,
    pub analogbalance: [f32; 4usize],
    pub asshotneutral: [f32; 4usize],
    pub baseline_exposure: f32,
    pub LinearResponseLimit: f32,
}
#[test]
fn bindgen_test_layout_libraw_dng_levels_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_dng_levels_t>(),
        32920usize,
        concat!("Size of: ", stringify!(libraw_dng_levels_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_dng_levels_t>(),
        4usize,
        concat!("Alignment of ", stringify!(libraw_dng_levels_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_dng_levels_t>())).parsedfields as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_levels_t),
            "::",
            stringify!(parsedfields)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_dng_levels_t>())).dng_cblack as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_levels_t),
            "::",
            stringify!(dng_cblack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_dng_levels_t>())).dng_black as *const _ as usize },
        16420usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_levels_t),
            "::",
            stringify!(dng_black)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_dng_levels_t>())).dng_fcblack as *const _ as usize },
        16424usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_levels_t),
            "::",
            stringify!(dng_fcblack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_dng_levels_t>())).dng_fblack as *const _ as usize },
        32840usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_levels_t),
            "::",
            stringify!(dng_fblack)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_dng_levels_t>())).dng_whitelevel as *const _ as usize
        },
        32844usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_levels_t),
            "::",
            stringify!(dng_whitelevel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_dng_levels_t>())).default_crop as *const _ as usize
        },
        32860usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_levels_t),
            "::",
            stringify!(default_crop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_dng_levels_t>())).preview_colorspace as *const _ as usize
        },
        32876usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_levels_t),
            "::",
            stringify!(preview_colorspace)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_dng_levels_t>())).analogbalance as *const _ as usize
        },
        32880usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_levels_t),
            "::",
            stringify!(analogbalance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_dng_levels_t>())).asshotneutral as *const _ as usize
        },
        32896usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_levels_t),
            "::",
            stringify!(asshotneutral)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_dng_levels_t>())).baseline_exposure as *const _ as usize
        },
        32912usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_levels_t),
            "::",
            stringify!(baseline_exposure)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_dng_levels_t>())).LinearResponseLimit as *const _ as usize
        },
        32916usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_levels_t),
            "::",
            stringify!(LinearResponseLimit)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_P1_color_t {
    pub romm_cam: [f32; 9usize],
}
#[test]
fn bindgen_test_layout_libraw_P1_color_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_P1_color_t>(),
        36usize,
        concat!("Size of: ", stringify!(libraw_P1_color_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_P1_color_t>(),
        4usize,
        concat!("Alignment of ", stringify!(libraw_P1_color_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_P1_color_t>())).romm_cam as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_P1_color_t),
            "::",
            stringify!(romm_cam)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_canon_makernotes_t {
    pub ColorDataVer: ::std::os::raw::c_int,
    pub ColorDataSubVer: ::std::os::raw::c_int,
    pub SpecularWhiteLevel: ::std::os::raw::c_int,
    pub NormalWhiteLevel: ::std::os::raw::c_int,
    pub ChannelBlackLevel: [::std::os::raw::c_int; 4usize],
    pub AverageBlackLevel: ::std::os::raw::c_int,
    pub multishot: [::std::os::raw::c_uint; 4usize],
    pub MeteringMode: ::std::os::raw::c_short,
    pub SpotMeteringMode: ::std::os::raw::c_short,
    pub FlashMeteringMode: uchar,
    pub FlashExposureLock: ::std::os::raw::c_short,
    pub ExposureMode: ::std::os::raw::c_short,
    pub AESetting: ::std::os::raw::c_short,
    pub HighlightTonePriority: uchar,
    pub ImageStabilization: ::std::os::raw::c_short,
    pub FocusMode: ::std::os::raw::c_short,
    pub AFPoint: ::std::os::raw::c_short,
    pub FocusContinuous: ::std::os::raw::c_short,
    pub AFPointsInFocus30D: ::std::os::raw::c_short,
    pub AFPointsInFocus1D: [uchar; 8usize],
    pub AFPointsInFocus5D: ushort,
    pub AFAreaMode: ushort,
    pub NumAFPoints: ushort,
    pub ValidAFPoints: ushort,
    pub AFImageWidth: ushort,
    pub AFImageHeight: ushort,
    pub AFAreaWidths: [::std::os::raw::c_short; 61usize],
    pub AFAreaHeights: [::std::os::raw::c_short; 61usize],
    pub AFAreaXPositions: [::std::os::raw::c_short; 61usize],
    pub AFAreaYPositions: [::std::os::raw::c_short; 61usize],
    pub AFPointsInFocus: [::std::os::raw::c_short; 4usize],
    pub AFPointsSelected: [::std::os::raw::c_short; 4usize],
    pub PrimaryAFPoint: ushort,
    pub FlashMode: ::std::os::raw::c_short,
    pub FlashActivity: ::std::os::raw::c_short,
    pub FlashBits: ::std::os::raw::c_short,
    pub ManualFlashOutput: ::std::os::raw::c_short,
    pub FlashOutput: ::std::os::raw::c_short,
    pub FlashGuideNumber: ::std::os::raw::c_short,
    pub ContinuousDrive: ::std::os::raw::c_short,
    pub SensorWidth: ::std::os::raw::c_short,
    pub SensorHeight: ::std::os::raw::c_short,
    pub SensorLeftBorder: ::std::os::raw::c_short,
    pub SensorTopBorder: ::std::os::raw::c_short,
    pub SensorRightBorder: ::std::os::raw::c_short,
    pub SensorBottomBorder: ::std::os::raw::c_short,
    pub BlackMaskLeftBorder: ::std::os::raw::c_short,
    pub BlackMaskTopBorder: ::std::os::raw::c_short,
    pub BlackMaskRightBorder: ::std::os::raw::c_short,
    pub BlackMaskBottomBorder: ::std::os::raw::c_short,
    pub AFMicroAdjMode: ::std::os::raw::c_int,
    pub AFMicroAdjValue: f32,
    pub MakernotesFlip: ::std::os::raw::c_short,
    pub RecordMode: ::std::os::raw::c_short,
    pub SRAWQuality: ::std::os::raw::c_short,
    pub wbi: ::std::os::raw::c_uint,
    pub firmware: f32,
    pub RF_lensID: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_libraw_canon_makernotes_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_canon_makernotes_t>(),
        664usize,
        concat!("Size of: ", stringify!(libraw_canon_makernotes_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_canon_makernotes_t>(),
        4usize,
        concat!("Alignment of ", stringify!(libraw_canon_makernotes_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).ColorDataVer as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(ColorDataVer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).ColorDataSubVer as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(ColorDataSubVer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).SpecularWhiteLevel as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(SpecularWhiteLevel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).NormalWhiteLevel as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(NormalWhiteLevel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).ChannelBlackLevel as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(ChannelBlackLevel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).AverageBlackLevel as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(AverageBlackLevel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).multishot as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(multishot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).MeteringMode as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(MeteringMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).SpotMeteringMode as *const _
                as usize
        },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(SpotMeteringMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).FlashMeteringMode as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(FlashMeteringMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).FlashExposureLock as *const _
                as usize
        },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(FlashExposureLock)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).ExposureMode as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(ExposureMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).AESetting as *const _ as usize
        },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(AESetting)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).HighlightTonePriority as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(HighlightTonePriority)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).ImageStabilization as *const _
                as usize
        },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(ImageStabilization)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).FocusMode as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(FocusMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).AFPoint as *const _ as usize
        },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(AFPoint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).FocusContinuous as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(FocusContinuous)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).AFPointsInFocus30D as *const _
                as usize
        },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(AFPointsInFocus30D)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).AFPointsInFocus1D as *const _
                as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(AFPointsInFocus1D)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).AFPointsInFocus5D as *const _
                as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(AFPointsInFocus5D)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).AFAreaMode as *const _ as usize
        },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(AFAreaMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).NumAFPoints as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(NumAFPoints)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).ValidAFPoints as *const _ as usize
        },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(ValidAFPoints)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).AFImageWidth as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(AFImageWidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).AFImageHeight as *const _ as usize
        },
        94usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(AFImageHeight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).AFAreaWidths as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(AFAreaWidths)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).AFAreaHeights as *const _ as usize
        },
        218usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(AFAreaHeights)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).AFAreaXPositions as *const _
                as usize
        },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(AFAreaXPositions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).AFAreaYPositions as *const _
                as usize
        },
        462usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(AFAreaYPositions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).AFPointsInFocus as *const _
                as usize
        },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(AFPointsInFocus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).AFPointsSelected as *const _
                as usize
        },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(AFPointsSelected)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).PrimaryAFPoint as *const _
                as usize
        },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(PrimaryAFPoint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).FlashMode as *const _ as usize
        },
        602usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(FlashMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).FlashActivity as *const _ as usize
        },
        604usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(FlashActivity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).FlashBits as *const _ as usize
        },
        606usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(FlashBits)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).ManualFlashOutput as *const _
                as usize
        },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(ManualFlashOutput)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).FlashOutput as *const _ as usize
        },
        610usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(FlashOutput)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).FlashGuideNumber as *const _
                as usize
        },
        612usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(FlashGuideNumber)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).ContinuousDrive as *const _
                as usize
        },
        614usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(ContinuousDrive)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).SensorWidth as *const _ as usize
        },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(SensorWidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).SensorHeight as *const _ as usize
        },
        618usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(SensorHeight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).SensorLeftBorder as *const _
                as usize
        },
        620usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(SensorLeftBorder)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).SensorTopBorder as *const _
                as usize
        },
        622usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(SensorTopBorder)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).SensorRightBorder as *const _
                as usize
        },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(SensorRightBorder)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).SensorBottomBorder as *const _
                as usize
        },
        626usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(SensorBottomBorder)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).BlackMaskLeftBorder as *const _
                as usize
        },
        628usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(BlackMaskLeftBorder)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).BlackMaskTopBorder as *const _
                as usize
        },
        630usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(BlackMaskTopBorder)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).BlackMaskRightBorder as *const _
                as usize
        },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(BlackMaskRightBorder)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).BlackMaskBottomBorder as *const _
                as usize
        },
        634usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(BlackMaskBottomBorder)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).AFMicroAdjMode as *const _
                as usize
        },
        636usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(AFMicroAdjMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).AFMicroAdjValue as *const _
                as usize
        },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(AFMicroAdjValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).MakernotesFlip as *const _
                as usize
        },
        644usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(MakernotesFlip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).RecordMode as *const _ as usize
        },
        646usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(RecordMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).SRAWQuality as *const _ as usize
        },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(SRAWQuality)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).wbi as *const _ as usize },
        652usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(wbi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).firmware as *const _ as usize
        },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(firmware)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).RF_lensID as *const _ as usize
        },
        660usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(RF_lensID)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_hasselblad_makernotes_t {
    pub BaseISO: ::std::os::raw::c_int,
    pub Gain: f64,
    pub Sensor: [::std::os::raw::c_char; 8usize],
    pub SensorUnit: [::std::os::raw::c_char; 64usize],
    pub HostBody: [::std::os::raw::c_char; 64usize],
    pub SensorCode: ::std::os::raw::c_int,
    pub SensorSubCode: ::std::os::raw::c_int,
    pub CoatingCode: ::std::os::raw::c_int,
    pub uncropped: ::std::os::raw::c_int,
    pub CaptureSequenceInitiator: [::std::os::raw::c_char; 32usize],
    pub SensorUnitConnector: [::std::os::raw::c_char; 64usize],
    pub format: ::std::os::raw::c_int,
    pub nIFD_CM: [::std::os::raw::c_int; 2usize],
    pub RecommendedCrop: [::std::os::raw::c_int; 2usize],
    pub mnColorMatrix: [[f64; 3usize]; 4usize],
}
#[test]
fn bindgen_test_layout_libraw_hasselblad_makernotes_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_hasselblad_makernotes_t>(),
        384usize,
        concat!("Size of: ", stringify!(libraw_hasselblad_makernotes_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_hasselblad_makernotes_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_hasselblad_makernotes_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_hasselblad_makernotes_t>())).BaseISO as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_hasselblad_makernotes_t),
            "::",
            stringify!(BaseISO)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_hasselblad_makernotes_t>())).Gain as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_hasselblad_makernotes_t),
            "::",
            stringify!(Gain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_hasselblad_makernotes_t>())).Sensor as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_hasselblad_makernotes_t),
            "::",
            stringify!(Sensor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_hasselblad_makernotes_t>())).SensorUnit as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_hasselblad_makernotes_t),
            "::",
            stringify!(SensorUnit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_hasselblad_makernotes_t>())).HostBody as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_hasselblad_makernotes_t),
            "::",
            stringify!(HostBody)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_hasselblad_makernotes_t>())).SensorCode as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_hasselblad_makernotes_t),
            "::",
            stringify!(SensorCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_hasselblad_makernotes_t>())).SensorSubCode as *const _
                as usize
        },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_hasselblad_makernotes_t),
            "::",
            stringify!(SensorSubCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_hasselblad_makernotes_t>())).CoatingCode as *const _
                as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_hasselblad_makernotes_t),
            "::",
            stringify!(CoatingCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_hasselblad_makernotes_t>())).uncropped as *const _
                as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_hasselblad_makernotes_t),
            "::",
            stringify!(uncropped)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_hasselblad_makernotes_t>())).CaptureSequenceInitiator
                as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_hasselblad_makernotes_t),
            "::",
            stringify!(CaptureSequenceInitiator)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_hasselblad_makernotes_t>())).SensorUnitConnector
                as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_hasselblad_makernotes_t),
            "::",
            stringify!(SensorUnitConnector)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_hasselblad_makernotes_t>())).format as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_hasselblad_makernotes_t),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_hasselblad_makernotes_t>())).nIFD_CM as *const _ as usize
        },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_hasselblad_makernotes_t),
            "::",
            stringify!(nIFD_CM)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_hasselblad_makernotes_t>())).RecommendedCrop as *const _
                as usize
        },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_hasselblad_makernotes_t),
            "::",
            stringify!(RecommendedCrop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_hasselblad_makernotes_t>())).mnColorMatrix as *const _
                as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_hasselblad_makernotes_t),
            "::",
            stringify!(mnColorMatrix)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_fuji_info_t {
    pub ExpoMidPointShift: f32,
    pub DynamicRange: ushort,
    pub FilmMode: ushort,
    pub DynamicRangeSetting: ushort,
    pub DevelopmentDynamicRange: ushort,
    pub AutoDynamicRange: ushort,
    pub DRangePriority: ushort,
    pub DRangePriorityAuto: ushort,
    pub DRangePriorityFixed: ushort,
    pub BrightnessCompensation: f32,
    pub FocusMode: ushort,
    pub AFMode: ushort,
    pub FocusPixel: [ushort; 2usize],
    pub ImageStabilization: [ushort; 3usize],
    pub FlashMode: ushort,
    pub WB_Preset: ushort,
    pub ShutterType: ushort,
    pub ExrMode: ushort,
    pub Macro: ushort,
    pub Rating: ::std::os::raw::c_uint,
    pub CropMode: ushort,
    pub FrameRate: ushort,
    pub FrameWidth: ushort,
    pub FrameHeight: ushort,
    pub SerialSignature: [::std::os::raw::c_char; 13usize],
    pub RAFVersion: [::std::os::raw::c_char; 5usize],
    pub RAFDataVersion: ushort,
    pub isTSNERDTS: ::std::os::raw::c_int,
    pub DriveMode: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_libraw_fuji_info_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_fuji_info_t>(),
        88usize,
        concat!("Size of: ", stringify!(libraw_fuji_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_fuji_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(libraw_fuji_info_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_fuji_info_t>())).ExpoMidPointShift as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(ExpoMidPointShift)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_fuji_info_t>())).DynamicRange as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(DynamicRange)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_fuji_info_t>())).FilmMode as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(FilmMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_fuji_info_t>())).DynamicRangeSetting as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(DynamicRangeSetting)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_fuji_info_t>())).DevelopmentDynamicRange as *const _
                as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(DevelopmentDynamicRange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_fuji_info_t>())).AutoDynamicRange as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(AutoDynamicRange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_fuji_info_t>())).DRangePriority as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(DRangePriority)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_fuji_info_t>())).DRangePriorityAuto as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(DRangePriorityAuto)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_fuji_info_t>())).DRangePriorityFixed as *const _ as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(DRangePriorityFixed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_fuji_info_t>())).BrightnessCompensation as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(BrightnessCompensation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_fuji_info_t>())).FocusMode as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(FocusMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_fuji_info_t>())).AFMode as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(AFMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_fuji_info_t>())).FocusPixel as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(FocusPixel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_fuji_info_t>())).ImageStabilization as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(ImageStabilization)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_fuji_info_t>())).FlashMode as *const _ as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(FlashMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_fuji_info_t>())).WB_Preset as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(WB_Preset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_fuji_info_t>())).ShutterType as *const _ as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(ShutterType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_fuji_info_t>())).ExrMode as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(ExrMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_fuji_info_t>())).Macro as *const _ as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(Macro)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_fuji_info_t>())).Rating as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(Rating)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_fuji_info_t>())).CropMode as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(CropMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_fuji_info_t>())).FrameRate as *const _ as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(FrameRate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_fuji_info_t>())).FrameWidth as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(FrameWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_fuji_info_t>())).FrameHeight as *const _ as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(FrameHeight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_fuji_info_t>())).SerialSignature as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(SerialSignature)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_fuji_info_t>())).RAFVersion as *const _ as usize },
        73usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(RAFVersion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_fuji_info_t>())).RAFDataVersion as *const _ as usize
        },
        78usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(RAFDataVersion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_fuji_info_t>())).isTSNERDTS as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(isTSNERDTS)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_fuji_info_t>())).DriveMode as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(DriveMode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_sensor_highspeed_crop_t {
    pub cleft: ushort,
    pub ctop: ushort,
    pub cwidth: ushort,
    pub cheight: ushort,
}
#[test]
fn bindgen_test_layout_libraw_sensor_highspeed_crop_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_sensor_highspeed_crop_t>(),
        8usize,
        concat!("Size of: ", stringify!(libraw_sensor_highspeed_crop_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_sensor_highspeed_crop_t>(),
        2usize,
        concat!("Alignment of ", stringify!(libraw_sensor_highspeed_crop_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sensor_highspeed_crop_t>())).cleft as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sensor_highspeed_crop_t),
            "::",
            stringify!(cleft)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sensor_highspeed_crop_t>())).ctop as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sensor_highspeed_crop_t),
            "::",
            stringify!(ctop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sensor_highspeed_crop_t>())).cwidth as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sensor_highspeed_crop_t),
            "::",
            stringify!(cwidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sensor_highspeed_crop_t>())).cheight as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sensor_highspeed_crop_t),
            "::",
            stringify!(cheight)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_nikon_makernotes_t {
    pub ExposureBracketValue: f64,
    pub ActiveDLighting: ushort,
    pub ShootingMode: ushort,
    pub ImageStabilization: [uchar; 7usize],
    pub VibrationReduction: uchar,
    pub VRMode: uchar,
    pub FocusMode: [::std::os::raw::c_char; 7usize],
    pub AFPoint: uchar,
    pub AFPointsInFocus: ushort,
    pub ContrastDetectAF: uchar,
    pub AFAreaMode: uchar,
    pub PhaseDetectAF: uchar,
    pub PrimaryAFPoint: uchar,
    pub AFPointsUsed: [uchar; 29usize],
    pub AFImageWidth: ushort,
    pub AFImageHeight: ushort,
    pub AFAreaXPposition: ushort,
    pub AFAreaYPosition: ushort,
    pub AFAreaWidth: ushort,
    pub AFAreaHeight: ushort,
    pub ContrastDetectAFInFocus: uchar,
    pub FlashSetting: [::std::os::raw::c_char; 13usize],
    pub FlashType: [::std::os::raw::c_char; 20usize],
    pub FlashExposureCompensation: [uchar; 4usize],
    pub ExternalFlashExposureComp: [uchar; 4usize],
    pub FlashExposureBracketValue: [uchar; 4usize],
    pub FlashMode: uchar,
    pub FlashExposureCompensation2: ::std::os::raw::c_schar,
    pub FlashExposureCompensation3: ::std::os::raw::c_schar,
    pub FlashExposureCompensation4: ::std::os::raw::c_schar,
    pub FlashSource: uchar,
    pub FlashFirmware: [uchar; 2usize],
    pub ExternalFlashFlags: uchar,
    pub FlashControlCommanderMode: uchar,
    pub FlashOutputAndCompensation: uchar,
    pub FlashFocalLength: uchar,
    pub FlashGNDistance: uchar,
    pub FlashGroupControlMode: [uchar; 4usize],
    pub FlashGroupOutputAndCompensation: [uchar; 4usize],
    pub FlashColorFilter: uchar,
    pub NEFCompression: ushort,
    pub ExposureMode: ::std::os::raw::c_int,
    pub ExposureProgram: ::std::os::raw::c_int,
    pub nMEshots: ::std::os::raw::c_int,
    pub MEgainOn: ::std::os::raw::c_int,
    pub ME_WB: [f64; 4usize],
    pub AFFineTune: uchar,
    pub AFFineTuneIndex: uchar,
    pub AFFineTuneAdj: i8,
    pub LensDataVersion: ::std::os::raw::c_uint,
    pub FlashInfoVersion: ::std::os::raw::c_uint,
    pub ColorBalanceVersion: ::std::os::raw::c_uint,
    pub key: uchar,
    pub NEFBitDepth: [ushort; 4usize],
    pub HighSpeedCropFormat: ushort,
    pub SensorHighSpeedCrop: libraw_sensor_highspeed_crop_t,
    pub SensorWidth: ushort,
    pub SensorHeight: ushort,
}
#[test]
fn bindgen_test_layout_libraw_nikon_makernotes_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_nikon_makernotes_t>(),
        240usize,
        concat!("Size of: ", stringify!(libraw_nikon_makernotes_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_nikon_makernotes_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_nikon_makernotes_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).ExposureBracketValue as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(ExposureBracketValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).ActiveDLighting as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(ActiveDLighting)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).ShootingMode as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(ShootingMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).ImageStabilization as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(ImageStabilization)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).VibrationReduction as *const _
                as usize
        },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(VibrationReduction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).VRMode as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(VRMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).FocusMode as *const _ as usize
        },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FocusMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).AFPoint as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(AFPoint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).AFPointsInFocus as *const _
                as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(AFPointsInFocus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).ContrastDetectAF as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(ContrastDetectAF)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).AFAreaMode as *const _ as usize
        },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(AFAreaMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).PhaseDetectAF as *const _ as usize
        },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(PhaseDetectAF)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).PrimaryAFPoint as *const _
                as usize
        },
        35usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(PrimaryAFPoint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).AFPointsUsed as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(AFPointsUsed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).AFImageWidth as *const _ as usize
        },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(AFImageWidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).AFImageHeight as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(AFImageHeight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).AFAreaXPposition as *const _
                as usize
        },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(AFAreaXPposition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).AFAreaYPosition as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(AFAreaYPosition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).AFAreaWidth as *const _ as usize
        },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(AFAreaWidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).AFAreaHeight as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(AFAreaHeight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).ContrastDetectAFInFocus
                as *const _ as usize
        },
        78usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(ContrastDetectAFInFocus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).FlashSetting as *const _ as usize
        },
        79usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashSetting)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).FlashType as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).FlashExposureCompensation
                as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashExposureCompensation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).ExternalFlashExposureComp
                as *const _ as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(ExternalFlashExposureComp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).FlashExposureBracketValue
                as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashExposureBracketValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).FlashMode as *const _ as usize
        },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).FlashExposureCompensation2
                as *const _ as usize
        },
        125usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashExposureCompensation2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).FlashExposureCompensation3
                as *const _ as usize
        },
        126usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashExposureCompensation3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).FlashExposureCompensation4
                as *const _ as usize
        },
        127usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashExposureCompensation4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).FlashSource as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashSource)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).FlashFirmware as *const _ as usize
        },
        129usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashFirmware)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).ExternalFlashFlags as *const _
                as usize
        },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(ExternalFlashFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).FlashControlCommanderMode
                as *const _ as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashControlCommanderMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).FlashOutputAndCompensation
                as *const _ as usize
        },
        133usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashOutputAndCompensation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).FlashFocalLength as *const _
                as usize
        },
        134usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashFocalLength)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).FlashGNDistance as *const _
                as usize
        },
        135usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashGNDistance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).FlashGroupControlMode as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashGroupControlMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).FlashGroupOutputAndCompensation
                as *const _ as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashGroupOutputAndCompensation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).FlashColorFilter as *const _
                as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashColorFilter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).NEFCompression as *const _
                as usize
        },
        146usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(NEFCompression)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).ExposureMode as *const _ as usize
        },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(ExposureMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).ExposureProgram as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(ExposureProgram)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).nMEshots as *const _ as usize
        },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(nMEshots)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).MEgainOn as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(MEgainOn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).ME_WB as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(ME_WB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).AFFineTune as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(AFFineTune)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).AFFineTuneIndex as *const _
                as usize
        },
        201usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(AFFineTuneIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).AFFineTuneAdj as *const _ as usize
        },
        202usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(AFFineTuneAdj)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).LensDataVersion as *const _
                as usize
        },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(LensDataVersion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).FlashInfoVersion as *const _
                as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashInfoVersion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).ColorBalanceVersion as *const _
                as usize
        },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(ColorBalanceVersion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).key as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).NEFBitDepth as *const _ as usize
        },
        218usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(NEFBitDepth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).HighSpeedCropFormat as *const _
                as usize
        },
        226usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(HighSpeedCropFormat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).SensorHighSpeedCrop as *const _
                as usize
        },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(SensorHighSpeedCrop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).SensorWidth as *const _ as usize
        },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(SensorWidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).SensorHeight as *const _ as usize
        },
        238usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(SensorHeight)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_olympus_makernotes_t {
    pub SensorCalibration: [::std::os::raw::c_int; 2usize],
    pub FocusMode: [ushort; 2usize],
    pub AutoFocus: ushort,
    pub AFPoint: ushort,
    pub AFAreas: [::std::os::raw::c_uint; 64usize],
    pub AFPointSelected: [f64; 5usize],
    pub AFResult: ushort,
    pub DriveMode: [ushort; 5usize],
    pub ColorSpace: ushort,
    pub AFFineTune: uchar,
    pub AFFineTuneAdj: [::std::os::raw::c_short; 3usize],
    pub CameraType2: [::std::os::raw::c_char; 6usize],
}
#[test]
fn bindgen_test_layout_libraw_olympus_makernotes_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_olympus_makernotes_t>(),
        344usize,
        concat!("Size of: ", stringify!(libraw_olympus_makernotes_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_olympus_makernotes_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_olympus_makernotes_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_olympus_makernotes_t>())).SensorCalibration as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(SensorCalibration)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_olympus_makernotes_t>())).FocusMode as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(FocusMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_olympus_makernotes_t>())).AutoFocus as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(AutoFocus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_olympus_makernotes_t>())).AFPoint as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(AFPoint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_olympus_makernotes_t>())).AFAreas as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(AFAreas)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_olympus_makernotes_t>())).AFPointSelected as *const _
                as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(AFPointSelected)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_olympus_makernotes_t>())).AFResult as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(AFResult)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_olympus_makernotes_t>())).DriveMode as *const _ as usize
        },
        314usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(DriveMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_olympus_makernotes_t>())).ColorSpace as *const _ as usize
        },
        324usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(ColorSpace)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_olympus_makernotes_t>())).AFFineTune as *const _ as usize
        },
        326usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(AFFineTune)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_olympus_makernotes_t>())).AFFineTuneAdj as *const _
                as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(AFFineTuneAdj)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_olympus_makernotes_t>())).CameraType2 as *const _ as usize
        },
        334usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(CameraType2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_panasonic_makernotes_t {
    pub Compression: ushort,
    pub BlackLevelDim: ushort,
    pub BlackLevel: [f32; 8usize],
    pub Multishot: ::std::os::raw::c_uint,
    pub gamma: f32,
    pub HighISOMultiplier: [::std::os::raw::c_int; 3usize],
}
#[test]
fn bindgen_test_layout_libraw_panasonic_makernotes_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_panasonic_makernotes_t>(),
        56usize,
        concat!("Size of: ", stringify!(libraw_panasonic_makernotes_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_panasonic_makernotes_t>(),
        4usize,
        concat!("Alignment of ", stringify!(libraw_panasonic_makernotes_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_panasonic_makernotes_t>())).Compression as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_panasonic_makernotes_t),
            "::",
            stringify!(Compression)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_panasonic_makernotes_t>())).BlackLevelDim as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_panasonic_makernotes_t),
            "::",
            stringify!(BlackLevelDim)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_panasonic_makernotes_t>())).BlackLevel as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_panasonic_makernotes_t),
            "::",
            stringify!(BlackLevel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_panasonic_makernotes_t>())).Multishot as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_panasonic_makernotes_t),
            "::",
            stringify!(Multishot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_panasonic_makernotes_t>())).gamma as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_panasonic_makernotes_t),
            "::",
            stringify!(gamma)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_panasonic_makernotes_t>())).HighISOMultiplier as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_panasonic_makernotes_t),
            "::",
            stringify!(HighISOMultiplier)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_pentax_makernotes_t {
    pub FocusMode: ushort,
    pub AFPointSelected: ushort,
    pub AFPointsInFocus: ::std::os::raw::c_uint,
    pub FocusPosition: ushort,
    pub DriveMode: [uchar; 4usize],
    pub AFAdjustment: ::std::os::raw::c_short,
    pub MultiExposure: uchar,
    pub Quality: ushort,
}
#[test]
fn bindgen_test_layout_libraw_pentax_makernotes_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_pentax_makernotes_t>(),
        20usize,
        concat!("Size of: ", stringify!(libraw_pentax_makernotes_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_pentax_makernotes_t>(),
        4usize,
        concat!("Alignment of ", stringify!(libraw_pentax_makernotes_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_pentax_makernotes_t>())).FocusMode as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_pentax_makernotes_t),
            "::",
            stringify!(FocusMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_pentax_makernotes_t>())).AFPointSelected as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_pentax_makernotes_t),
            "::",
            stringify!(AFPointSelected)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_pentax_makernotes_t>())).AFPointsInFocus as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_pentax_makernotes_t),
            "::",
            stringify!(AFPointsInFocus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_pentax_makernotes_t>())).FocusPosition as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_pentax_makernotes_t),
            "::",
            stringify!(FocusPosition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_pentax_makernotes_t>())).DriveMode as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_pentax_makernotes_t),
            "::",
            stringify!(DriveMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_pentax_makernotes_t>())).AFAdjustment as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_pentax_makernotes_t),
            "::",
            stringify!(AFAdjustment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_pentax_makernotes_t>())).MultiExposure as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_pentax_makernotes_t),
            "::",
            stringify!(MultiExposure)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_pentax_makernotes_t>())).Quality as *const _ as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_pentax_makernotes_t),
            "::",
            stringify!(Quality)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_samsung_makernotes_t {
    pub ImageSizeFull: [::std::os::raw::c_uint; 4usize],
    pub ImageSizeCrop: [::std::os::raw::c_uint; 4usize],
    pub ColorSpace: [::std::os::raw::c_int; 2usize],
    pub key: [::std::os::raw::c_uint; 11usize],
    pub DigitalGain: f64,
    pub DeviceType: ::std::os::raw::c_int,
    pub LensFirmware: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout_libraw_samsung_makernotes_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_samsung_makernotes_t>(),
        136usize,
        concat!("Size of: ", stringify!(libraw_samsung_makernotes_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_samsung_makernotes_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_samsung_makernotes_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_samsung_makernotes_t>())).ImageSizeFull as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_samsung_makernotes_t),
            "::",
            stringify!(ImageSizeFull)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_samsung_makernotes_t>())).ImageSizeCrop as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_samsung_makernotes_t),
            "::",
            stringify!(ImageSizeCrop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_samsung_makernotes_t>())).ColorSpace as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_samsung_makernotes_t),
            "::",
            stringify!(ColorSpace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_samsung_makernotes_t>())).key as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_samsung_makernotes_t),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_samsung_makernotes_t>())).DigitalGain as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_samsung_makernotes_t),
            "::",
            stringify!(DigitalGain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_samsung_makernotes_t>())).DeviceType as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_samsung_makernotes_t),
            "::",
            stringify!(DeviceType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_samsung_makernotes_t>())).LensFirmware as *const _
                as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_samsung_makernotes_t),
            "::",
            stringify!(LensFirmware)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_kodak_makernotes_t {
    pub BlackLevelTop: ushort,
    pub BlackLevelBottom: ushort,
    pub offset_left: ::std::os::raw::c_short,
    pub offset_top: ::std::os::raw::c_short,
    pub clipBlack: ushort,
    pub clipWhite: ushort,
    pub romm_camDaylight: [[f32; 3usize]; 3usize],
    pub romm_camTungsten: [[f32; 3usize]; 3usize],
    pub romm_camFluorescent: [[f32; 3usize]; 3usize],
    pub romm_camFlash: [[f32; 3usize]; 3usize],
    pub romm_camCustom: [[f32; 3usize]; 3usize],
    pub romm_camAuto: [[f32; 3usize]; 3usize],
    pub val018percent: ushort,
    pub val100percent: ushort,
    pub val170percent: ushort,
    pub MakerNoteKodak8a: ::std::os::raw::c_short,
    pub ISOCalibrationGain: f32,
    pub AnalogISO: f32,
}
#[test]
fn bindgen_test_layout_libraw_kodak_makernotes_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_kodak_makernotes_t>(),
        244usize,
        concat!("Size of: ", stringify!(libraw_kodak_makernotes_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_kodak_makernotes_t>(),
        4usize,
        concat!("Alignment of ", stringify!(libraw_kodak_makernotes_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_kodak_makernotes_t>())).BlackLevelTop as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(BlackLevelTop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_kodak_makernotes_t>())).BlackLevelBottom as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(BlackLevelBottom)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_kodak_makernotes_t>())).offset_left as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(offset_left)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_kodak_makernotes_t>())).offset_top as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(offset_top)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_kodak_makernotes_t>())).clipBlack as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(clipBlack)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_kodak_makernotes_t>())).clipWhite as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(clipWhite)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_kodak_makernotes_t>())).romm_camDaylight as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(romm_camDaylight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_kodak_makernotes_t>())).romm_camTungsten as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(romm_camTungsten)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_kodak_makernotes_t>())).romm_camFluorescent as *const _
                as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(romm_camFluorescent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_kodak_makernotes_t>())).romm_camFlash as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(romm_camFlash)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_kodak_makernotes_t>())).romm_camCustom as *const _
                as usize
        },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(romm_camCustom)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_kodak_makernotes_t>())).romm_camAuto as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(romm_camAuto)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_kodak_makernotes_t>())).val018percent as *const _ as usize
        },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(val018percent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_kodak_makernotes_t>())).val100percent as *const _ as usize
        },
        230usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(val100percent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_kodak_makernotes_t>())).val170percent as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(val170percent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_kodak_makernotes_t>())).MakerNoteKodak8a as *const _
                as usize
        },
        234usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(MakerNoteKodak8a)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_kodak_makernotes_t>())).ISOCalibrationGain as *const _
                as usize
        },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(ISOCalibrationGain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_kodak_makernotes_t>())).AnalogISO as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(AnalogISO)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_p1_makernotes_t {
    pub Software: [::std::os::raw::c_char; 64usize],
    pub SystemType: [::std::os::raw::c_char; 64usize],
    pub FirmwareString: [::std::os::raw::c_char; 256usize],
    pub SystemModel: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout_libraw_p1_makernotes_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_p1_makernotes_t>(),
        448usize,
        concat!("Size of: ", stringify!(libraw_p1_makernotes_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_p1_makernotes_t>(),
        1usize,
        concat!("Alignment of ", stringify!(libraw_p1_makernotes_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_p1_makernotes_t>())).Software as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_p1_makernotes_t),
            "::",
            stringify!(Software)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_p1_makernotes_t>())).SystemType as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_p1_makernotes_t),
            "::",
            stringify!(SystemType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_p1_makernotes_t>())).FirmwareString as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_p1_makernotes_t),
            "::",
            stringify!(FirmwareString)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_p1_makernotes_t>())).SystemModel as *const _ as usize
        },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_p1_makernotes_t),
            "::",
            stringify!(SystemModel)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_sony_info_t {
    pub CameraType: ushort,
    pub Sony0x9400_version: uchar,
    pub Sony0x9400_ReleaseMode2: uchar,
    pub Sony0x9400_SequenceImageNumber: ::std::os::raw::c_uint,
    pub Sony0x9400_SequenceLength1: uchar,
    pub Sony0x9400_SequenceFileNumber: ::std::os::raw::c_uint,
    pub Sony0x9400_SequenceLength2: uchar,
    pub AFAreaModeSetting: u8,
    pub FlexibleSpotPosition: [ushort; 2usize],
    pub AFPointSelected: u8,
    pub AFPointsUsed: [u8; 10usize],
    pub AFTracking: u8,
    pub AFType: u8,
    pub FocusLocation: [ushort; 4usize],
    pub AFMicroAdjValue: i8,
    pub AFMicroAdjOn: i8,
    pub AFMicroAdjRegisteredLenses: uchar,
    pub VariableLowPassFilter: ushort,
    pub LongExposureNoiseReduction: ::std::os::raw::c_uint,
    pub HighISONoiseReduction: ushort,
    pub HDR: [ushort; 2usize],
    pub group2010: ushort,
    pub real_iso_offset: ushort,
    pub MeteringMode_offset: ushort,
    pub ExposureProgram_offset: ushort,
    pub ReleaseMode2_offset: ushort,
    pub MinoltaCamID: ::std::os::raw::c_uint,
    pub firmware: f32,
    pub ImageCount3_offset: ushort,
    pub ImageCount3: ::std::os::raw::c_uint,
    pub ElectronicFrontCurtainShutter: ::std::os::raw::c_uint,
    pub MeteringMode2: ushort,
    pub SonyDateTime: [::std::os::raw::c_char; 20usize],
    pub ShotNumberSincePowerUp: ::std::os::raw::c_uint,
    pub PixelShiftGroupPrefix: ushort,
    pub PixelShiftGroupID: ::std::os::raw::c_uint,
    pub nShotsInPixelShiftGroup: ::std::os::raw::c_char,
    pub numInPixelShiftGroup: ::std::os::raw::c_char,
    pub prd_ImageHeight: ushort,
    pub prd_ImageWidth: ushort,
    pub prd_RawBitDepth: ushort,
    pub prd_StorageMethod: ushort,
    pub prd_BayerPattern: ushort,
    pub SonyRawFileType: ushort,
    pub RAWFileType: ushort,
    pub Quality: ::std::os::raw::c_uint,
    pub FileFormat: ushort,
}
#[test]
fn bindgen_test_layout_libraw_sony_info_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_sony_info_t>(),
        152usize,
        concat!("Size of: ", stringify!(libraw_sony_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_sony_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(libraw_sony_info_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_sony_info_t>())).CameraType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(CameraType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).Sony0x9400_version as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(Sony0x9400_version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).Sony0x9400_ReleaseMode2 as *const _
                as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(Sony0x9400_ReleaseMode2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).Sony0x9400_SequenceImageNumber
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(Sony0x9400_SequenceImageNumber)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).Sony0x9400_SequenceLength1 as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(Sony0x9400_SequenceLength1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).Sony0x9400_SequenceFileNumber as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(Sony0x9400_SequenceFileNumber)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).Sony0x9400_SequenceLength2 as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(Sony0x9400_SequenceLength2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).AFAreaModeSetting as *const _ as usize
        },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(AFAreaModeSetting)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).FlexibleSpotPosition as *const _ as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(FlexibleSpotPosition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).AFPointSelected as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(AFPointSelected)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_sony_info_t>())).AFPointsUsed as *const _ as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(AFPointsUsed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_sony_info_t>())).AFTracking as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(AFTracking)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_sony_info_t>())).AFType as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(AFType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).FocusLocation as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(FocusLocation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).AFMicroAdjValue as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(AFMicroAdjValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_sony_info_t>())).AFMicroAdjOn as *const _ as usize },
        45usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(AFMicroAdjOn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).AFMicroAdjRegisteredLenses as *const _
                as usize
        },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(AFMicroAdjRegisteredLenses)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).VariableLowPassFilter as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(VariableLowPassFilter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).LongExposureNoiseReduction as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(LongExposureNoiseReduction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).HighISONoiseReduction as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(HighISONoiseReduction)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_sony_info_t>())).HDR as *const _ as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(HDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_sony_info_t>())).group2010 as *const _ as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(group2010)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).real_iso_offset as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(real_iso_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).MeteringMode_offset as *const _ as usize
        },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(MeteringMode_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).ExposureProgram_offset as *const _
                as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(ExposureProgram_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).ReleaseMode2_offset as *const _ as usize
        },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(ReleaseMode2_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_sony_info_t>())).MinoltaCamID as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(MinoltaCamID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_sony_info_t>())).firmware as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(firmware)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).ImageCount3_offset as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(ImageCount3_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_sony_info_t>())).ImageCount3 as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(ImageCount3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).ElectronicFrontCurtainShutter as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(ElectronicFrontCurtainShutter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).MeteringMode2 as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(MeteringMode2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_sony_info_t>())).SonyDateTime as *const _ as usize },
        94usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(SonyDateTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).ShotNumberSincePowerUp as *const _
                as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(ShotNumberSincePowerUp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).PixelShiftGroupPrefix as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(PixelShiftGroupPrefix)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).PixelShiftGroupID as *const _ as usize
        },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(PixelShiftGroupID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).nShotsInPixelShiftGroup as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(nShotsInPixelShiftGroup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).numInPixelShiftGroup as *const _ as usize
        },
        129usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(numInPixelShiftGroup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).prd_ImageHeight as *const _ as usize
        },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(prd_ImageHeight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).prd_ImageWidth as *const _ as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(prd_ImageWidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).prd_RawBitDepth as *const _ as usize
        },
        134usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(prd_RawBitDepth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).prd_StorageMethod as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(prd_StorageMethod)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).prd_BayerPattern as *const _ as usize
        },
        138usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(prd_BayerPattern)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).SonyRawFileType as *const _ as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(SonyRawFileType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_sony_info_t>())).RAWFileType as *const _ as usize },
        142usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(RAWFileType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_sony_info_t>())).Quality as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(Quality)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_sony_info_t>())).FileFormat as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(FileFormat)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_colordata_t {
    pub curve: [ushort; 65536usize],
    pub cblack: [::std::os::raw::c_uint; 4104usize],
    pub black: ::std::os::raw::c_uint,
    pub data_maximum: ::std::os::raw::c_uint,
    pub maximum: ::std::os::raw::c_uint,
    pub linear_max: [::std::os::raw::c_long; 4usize],
    pub fmaximum: f32,
    pub fnorm: f32,
    pub white: [[ushort; 8usize]; 8usize],
    pub cam_mul: [f32; 4usize],
    pub pre_mul: [f32; 4usize],
    pub cmatrix: [[f32; 4usize]; 3usize],
    pub ccm: [[f32; 4usize]; 3usize],
    pub rgb_cam: [[f32; 4usize]; 3usize],
    pub cam_xyz: [[f32; 3usize]; 4usize],
    pub phase_one_data: ph1_t,
    pub flash_used: f32,
    pub canon_ev: f32,
    pub model2: [::std::os::raw::c_char; 64usize],
    pub UniqueCameraModel: [::std::os::raw::c_char; 64usize],
    pub LocalizedCameraModel: [::std::os::raw::c_char; 64usize],
    pub ImageUniqueID: [::std::os::raw::c_char; 64usize],
    pub RawDataUniqueID: [::std::os::raw::c_char; 17usize],
    pub OriginalRawFileName: [::std::os::raw::c_char; 64usize],
    pub profile: *mut ::std::os::raw::c_void,
    pub profile_length: ::std::os::raw::c_uint,
    pub black_stat: [::std::os::raw::c_uint; 8usize],
    pub dng_color: [libraw_dng_color_t; 2usize],
    pub dng_levels: libraw_dng_levels_t,
    pub WB_Coeffs: [[::std::os::raw::c_int; 4usize]; 256usize],
    pub WBCT_Coeffs: [[f32; 5usize]; 64usize],
    pub as_shot_wb_applied: ::std::os::raw::c_int,
    pub P1_color: [libraw_P1_color_t; 2usize],
    pub raw_bps: ::std::os::raw::c_uint,
    pub ExifColorSpace: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_libraw_colordata_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_colordata_t>(),
        187040usize,
        concat!("Size of: ", stringify!(libraw_colordata_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_colordata_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_colordata_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_colordata_t>())).curve as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(curve)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_colordata_t>())).cblack as *const _ as usize },
        131072usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(cblack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_colordata_t>())).black as *const _ as usize },
        147488usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(black)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_colordata_t>())).data_maximum as *const _ as usize },
        147492usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(data_maximum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_colordata_t>())).maximum as *const _ as usize },
        147496usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(maximum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_colordata_t>())).linear_max as *const _ as usize },
        147504usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(linear_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_colordata_t>())).fmaximum as *const _ as usize },
        147536usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(fmaximum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_colordata_t>())).fnorm as *const _ as usize },
        147540usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(fnorm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_colordata_t>())).white as *const _ as usize },
        147544usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(white)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_colordata_t>())).cam_mul as *const _ as usize },
        147672usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(cam_mul)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_colordata_t>())).pre_mul as *const _ as usize },
        147688usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(pre_mul)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_colordata_t>())).cmatrix as *const _ as usize },
        147704usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(cmatrix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_colordata_t>())).ccm as *const _ as usize },
        147752usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(ccm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_colordata_t>())).rgb_cam as *const _ as usize },
        147800usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(rgb_cam)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_colordata_t>())).cam_xyz as *const _ as usize },
        147848usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(cam_xyz)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_colordata_t>())).phase_one_data as *const _ as usize
        },
        147896usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(phase_one_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_colordata_t>())).flash_used as *const _ as usize },
        147932usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(flash_used)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_colordata_t>())).canon_ev as *const _ as usize },
        147936usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(canon_ev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_colordata_t>())).model2 as *const _ as usize },
        147940usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(model2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_colordata_t>())).UniqueCameraModel as *const _ as usize
        },
        148004usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(UniqueCameraModel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_colordata_t>())).LocalizedCameraModel as *const _ as usize
        },
        148068usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(LocalizedCameraModel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_colordata_t>())).ImageUniqueID as *const _ as usize
        },
        148132usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(ImageUniqueID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_colordata_t>())).RawDataUniqueID as *const _ as usize
        },
        148196usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(RawDataUniqueID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_colordata_t>())).OriginalRawFileName as *const _ as usize
        },
        148213usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(OriginalRawFileName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_colordata_t>())).profile as *const _ as usize },
        148280usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(profile)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_colordata_t>())).profile_length as *const _ as usize
        },
        148288usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(profile_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_colordata_t>())).black_stat as *const _ as usize },
        148292usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(black_stat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_colordata_t>())).dng_color as *const _ as usize },
        148324usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(dng_color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_colordata_t>())).dng_levels as *const _ as usize },
        148660usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(dng_levels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_colordata_t>())).WB_Coeffs as *const _ as usize },
        181580usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(WB_Coeffs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_colordata_t>())).WBCT_Coeffs as *const _ as usize },
        185676usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(WBCT_Coeffs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_colordata_t>())).as_shot_wb_applied as *const _ as usize
        },
        186956usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(as_shot_wb_applied)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_colordata_t>())).P1_color as *const _ as usize },
        186960usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(P1_color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_colordata_t>())).raw_bps as *const _ as usize },
        187032usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(raw_bps)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_colordata_t>())).ExifColorSpace as *const _ as usize
        },
        187036usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(ExifColorSpace)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_thumbnail_t {
    pub tformat: LibRaw_thumbnail_formats,
    pub twidth: ushort,
    pub theight: ushort,
    pub tlength: ::std::os::raw::c_uint,
    pub tcolors: ::std::os::raw::c_int,
    pub thumb: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_libraw_thumbnail_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_thumbnail_t>(),
        24usize,
        concat!("Size of: ", stringify!(libraw_thumbnail_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_thumbnail_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_thumbnail_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_thumbnail_t>())).tformat as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_thumbnail_t),
            "::",
            stringify!(tformat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_thumbnail_t>())).twidth as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_thumbnail_t),
            "::",
            stringify!(twidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_thumbnail_t>())).theight as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_thumbnail_t),
            "::",
            stringify!(theight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_thumbnail_t>())).tlength as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_thumbnail_t),
            "::",
            stringify!(tlength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_thumbnail_t>())).tcolors as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_thumbnail_t),
            "::",
            stringify!(tcolors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_thumbnail_t>())).thumb as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_thumbnail_t),
            "::",
            stringify!(thumb)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_gps_info_t {
    pub latitude: [f32; 3usize],
    pub longitude: [f32; 3usize],
    pub gpstimestamp: [f32; 3usize],
    pub altitude: f32,
    pub altref: ::std::os::raw::c_char,
    pub latref: ::std::os::raw::c_char,
    pub longref: ::std::os::raw::c_char,
    pub gpsstatus: ::std::os::raw::c_char,
    pub gpsparsed: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_libraw_gps_info_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_gps_info_t>(),
        48usize,
        concat!("Size of: ", stringify!(libraw_gps_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_gps_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(libraw_gps_info_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_gps_info_t>())).latitude as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_gps_info_t),
            "::",
            stringify!(latitude)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_gps_info_t>())).longitude as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_gps_info_t),
            "::",
            stringify!(longitude)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_gps_info_t>())).gpstimestamp as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_gps_info_t),
            "::",
            stringify!(gpstimestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_gps_info_t>())).altitude as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_gps_info_t),
            "::",
            stringify!(altitude)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_gps_info_t>())).altref as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_gps_info_t),
            "::",
            stringify!(altref)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_gps_info_t>())).latref as *const _ as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_gps_info_t),
            "::",
            stringify!(latref)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_gps_info_t>())).longref as *const _ as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_gps_info_t),
            "::",
            stringify!(longref)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_gps_info_t>())).gpsstatus as *const _ as usize },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_gps_info_t),
            "::",
            stringify!(gpsstatus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_gps_info_t>())).gpsparsed as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_gps_info_t),
            "::",
            stringify!(gpsparsed)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_imgother_t {
    pub iso_speed: f32,
    pub shutter: f32,
    pub aperture: f32,
    pub focal_len: f32,
    pub timestamp: time_t,
    pub shot_order: ::std::os::raw::c_uint,
    pub gpsdata: [::std::os::raw::c_uint; 32usize],
    pub parsed_gps: libraw_gps_info_t,
    pub desc: [::std::os::raw::c_char; 512usize],
    pub artist: [::std::os::raw::c_char; 64usize],
    pub analogbalance: [f32; 4usize],
}
#[test]
fn bindgen_test_layout_libraw_imgother_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_imgother_t>(),
        800usize,
        concat!("Size of: ", stringify!(libraw_imgother_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_imgother_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_imgother_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_imgother_t>())).iso_speed as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_imgother_t),
            "::",
            stringify!(iso_speed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_imgother_t>())).shutter as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_imgother_t),
            "::",
            stringify!(shutter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_imgother_t>())).aperture as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_imgother_t),
            "::",
            stringify!(aperture)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_imgother_t>())).focal_len as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_imgother_t),
            "::",
            stringify!(focal_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_imgother_t>())).timestamp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_imgother_t),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_imgother_t>())).shot_order as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_imgother_t),
            "::",
            stringify!(shot_order)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_imgother_t>())).gpsdata as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_imgother_t),
            "::",
            stringify!(gpsdata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_imgother_t>())).parsed_gps as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_imgother_t),
            "::",
            stringify!(parsed_gps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_imgother_t>())).desc as *const _ as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_imgother_t),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_imgother_t>())).artist as *const _ as usize },
        716usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_imgother_t),
            "::",
            stringify!(artist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_imgother_t>())).analogbalance as *const _ as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_imgother_t),
            "::",
            stringify!(analogbalance)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_metadata_common_t {
    pub FlashEC: f32,
    pub FlashGN: f32,
    pub CameraTemperature: f32,
    pub SensorTemperature: f32,
    pub SensorTemperature2: f32,
    pub LensTemperature: f32,
    pub AmbientTemperature: f32,
    pub BatteryTemperature: f32,
    pub exifAmbientTemperature: f32,
    pub exifHumidity: f32,
    pub exifPressure: f32,
    pub exifWaterDepth: f32,
    pub exifAcceleration: f32,
    pub exifCameraElevationAngle: f32,
    pub real_ISO: f32,
    pub exifExposureIndex: f32,
    pub ColorSpace: ushort,
    pub firmware: [::std::os::raw::c_char; 128usize],
}
#[test]
fn bindgen_test_layout_libraw_metadata_common_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_metadata_common_t>(),
        196usize,
        concat!("Size of: ", stringify!(libraw_metadata_common_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_metadata_common_t>(),
        4usize,
        concat!("Alignment of ", stringify!(libraw_metadata_common_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_metadata_common_t>())).FlashEC as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(FlashEC)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_metadata_common_t>())).FlashGN as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(FlashGN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_metadata_common_t>())).CameraTemperature as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(CameraTemperature)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_metadata_common_t>())).SensorTemperature as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(SensorTemperature)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_metadata_common_t>())).SensorTemperature2 as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(SensorTemperature2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_metadata_common_t>())).LensTemperature as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(LensTemperature)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_metadata_common_t>())).AmbientTemperature as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(AmbientTemperature)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_metadata_common_t>())).BatteryTemperature as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(BatteryTemperature)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_metadata_common_t>())).exifAmbientTemperature as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(exifAmbientTemperature)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_metadata_common_t>())).exifHumidity as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(exifHumidity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_metadata_common_t>())).exifPressure as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(exifPressure)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_metadata_common_t>())).exifWaterDepth as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(exifWaterDepth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_metadata_common_t>())).exifAcceleration as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(exifAcceleration)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_metadata_common_t>())).exifCameraElevationAngle
                as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(exifCameraElevationAngle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_metadata_common_t>())).real_ISO as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(real_ISO)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_metadata_common_t>())).exifExposureIndex as *const _
                as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(exifExposureIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_metadata_common_t>())).ColorSpace as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(ColorSpace)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_metadata_common_t>())).firmware as *const _ as usize
        },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(firmware)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_output_params_t {
    pub greybox: [::std::os::raw::c_uint; 4usize],
    pub cropbox: [::std::os::raw::c_uint; 4usize],
    pub aber: [f64; 4usize],
    pub gamm: [f64; 6usize],
    pub user_mul: [f32; 4usize],
    pub shot_select: ::std::os::raw::c_uint,
    pub bright: f32,
    pub threshold: f32,
    pub half_size: ::std::os::raw::c_int,
    pub four_color_rgb: ::std::os::raw::c_int,
    pub highlight: ::std::os::raw::c_int,
    pub use_auto_wb: ::std::os::raw::c_int,
    pub use_camera_wb: ::std::os::raw::c_int,
    pub use_camera_matrix: ::std::os::raw::c_int,
    pub output_color: ::std::os::raw::c_int,
    pub output_profile: *mut ::std::os::raw::c_char,
    pub camera_profile: *mut ::std::os::raw::c_char,
    pub bad_pixels: *mut ::std::os::raw::c_char,
    pub dark_frame: *mut ::std::os::raw::c_char,
    pub output_bps: ::std::os::raw::c_int,
    pub output_tiff: ::std::os::raw::c_int,
    pub user_flip: ::std::os::raw::c_int,
    pub user_qual: ::std::os::raw::c_int,
    pub user_black: ::std::os::raw::c_int,
    pub user_cblack: [::std::os::raw::c_int; 4usize],
    pub user_sat: ::std::os::raw::c_int,
    pub med_passes: ::std::os::raw::c_int,
    pub auto_bright_thr: f32,
    pub adjust_maximum_thr: f32,
    pub no_auto_bright: ::std::os::raw::c_int,
    pub use_fuji_rotate: ::std::os::raw::c_int,
    pub green_matching: ::std::os::raw::c_int,
    pub dcb_iterations: ::std::os::raw::c_int,
    pub dcb_enhance_fl: ::std::os::raw::c_int,
    pub fbdd_noiserd: ::std::os::raw::c_int,
    pub exp_correc: ::std::os::raw::c_int,
    pub exp_shift: f32,
    pub exp_preser: f32,
    pub use_rawspeed: ::std::os::raw::c_int,
    pub use_dngsdk: ::std::os::raw::c_int,
    pub no_auto_scale: ::std::os::raw::c_int,
    pub no_interpolation: ::std::os::raw::c_int,
    pub raw_processing_options: ::std::os::raw::c_uint,
    pub max_raw_memory_mb: ::std::os::raw::c_uint,
    pub sony_arw2_posterization_thr: ::std::os::raw::c_int,
    pub coolscan_nef_gamma: f32,
    pub p4shot_order: [::std::os::raw::c_char; 5usize],
    pub custom_camera_strings: *mut *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_libraw_output_params_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_output_params_t>(),
        336usize,
        concat!("Size of: ", stringify!(libraw_output_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_output_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_output_params_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_output_params_t>())).greybox as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(greybox)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_output_params_t>())).cropbox as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(cropbox)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_output_params_t>())).aber as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(aber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_output_params_t>())).gamm as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(gamm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_output_params_t>())).user_mul as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(user_mul)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).shot_select as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(shot_select)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_output_params_t>())).bright as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(bright)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).threshold as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(threshold)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).half_size as *const _ as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(half_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).four_color_rgb as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(four_color_rgb)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).highlight as *const _ as usize
        },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(highlight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).use_auto_wb as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(use_auto_wb)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).use_camera_wb as *const _ as usize
        },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(use_camera_wb)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).use_camera_matrix as *const _
                as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(use_camera_matrix)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).output_color as *const _ as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(output_color)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).output_profile as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(output_profile)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).camera_profile as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(camera_profile)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).bad_pixels as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(bad_pixels)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).dark_frame as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(dark_frame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).output_bps as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(output_bps)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).output_tiff as *const _ as usize
        },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(output_tiff)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).user_flip as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(user_flip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).user_qual as *const _ as usize
        },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(user_qual)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).user_black as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(user_black)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).user_cblack as *const _ as usize
        },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(user_cblack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_output_params_t>())).user_sat as *const _ as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(user_sat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).med_passes as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(med_passes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).auto_bright_thr as *const _ as usize
        },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(auto_bright_thr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).adjust_maximum_thr as *const _
                as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(adjust_maximum_thr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).no_auto_bright as *const _ as usize
        },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(no_auto_bright)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).use_fuji_rotate as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(use_fuji_rotate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).green_matching as *const _ as usize
        },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(green_matching)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).dcb_iterations as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(dcb_iterations)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).dcb_enhance_fl as *const _ as usize
        },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(dcb_enhance_fl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).fbdd_noiserd as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(fbdd_noiserd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).exp_correc as *const _ as usize
        },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(exp_correc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).exp_shift as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(exp_shift)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).exp_preser as *const _ as usize
        },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(exp_preser)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).use_rawspeed as *const _ as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(use_rawspeed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).use_dngsdk as *const _ as usize
        },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(use_dngsdk)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).no_auto_scale as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(no_auto_scale)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).no_interpolation as *const _ as usize
        },
        300usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(no_interpolation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).raw_processing_options as *const _
                as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(raw_processing_options)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).max_raw_memory_mb as *const _
                as usize
        },
        308usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(max_raw_memory_mb)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).sony_arw2_posterization_thr
                as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(sony_arw2_posterization_thr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).coolscan_nef_gamma as *const _
                as usize
        },
        316usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(coolscan_nef_gamma)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).p4shot_order as *const _ as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(p4shot_order)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).custom_camera_strings as *const _
                as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(custom_camera_strings)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_rawdata_t {
    pub raw_alloc: *mut ::std::os::raw::c_void,
    pub raw_image: *mut ushort,
    pub color4_image: *mut [ushort; 4usize],
    pub color3_image: *mut [ushort; 3usize],
    pub float_image: *mut f32,
    pub float3_image: *mut [f32; 3usize],
    pub float4_image: *mut [f32; 4usize],
    pub ph1_cblack: *mut [::std::os::raw::c_short; 2usize],
    pub ph1_rblack: *mut [::std::os::raw::c_short; 2usize],
    pub iparams: libraw_iparams_t,
    pub sizes: libraw_image_sizes_t,
    pub ioparams: libraw_internal_output_params_t,
    pub color: libraw_colordata_t,
}
#[test]
fn bindgen_test_layout_libraw_rawdata_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_rawdata_t>(),
        187744usize,
        concat!("Size of: ", stringify!(libraw_rawdata_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_rawdata_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_rawdata_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_rawdata_t>())).raw_alloc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_rawdata_t),
            "::",
            stringify!(raw_alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_rawdata_t>())).raw_image as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_rawdata_t),
            "::",
            stringify!(raw_image)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_rawdata_t>())).color4_image as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_rawdata_t),
            "::",
            stringify!(color4_image)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_rawdata_t>())).color3_image as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_rawdata_t),
            "::",
            stringify!(color3_image)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_rawdata_t>())).float_image as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_rawdata_t),
            "::",
            stringify!(float_image)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_rawdata_t>())).float3_image as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_rawdata_t),
            "::",
            stringify!(float3_image)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_rawdata_t>())).float4_image as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_rawdata_t),
            "::",
            stringify!(float4_image)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_rawdata_t>())).ph1_cblack as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_rawdata_t),
            "::",
            stringify!(ph1_cblack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_rawdata_t>())).ph1_rblack as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_rawdata_t),
            "::",
            stringify!(ph1_rblack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_rawdata_t>())).iparams as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_rawdata_t),
            "::",
            stringify!(iparams)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_rawdata_t>())).sizes as *const _ as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_rawdata_t),
            "::",
            stringify!(sizes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_rawdata_t>())).ioparams as *const _ as usize },
        688usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_rawdata_t),
            "::",
            stringify!(ioparams)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_rawdata_t>())).color as *const _ as usize },
        704usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_rawdata_t),
            "::",
            stringify!(color)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_makernotes_lens_t {
    pub LensID: ::std::os::raw::c_ulonglong,
    pub Lens: [::std::os::raw::c_char; 128usize],
    pub LensFormat: ushort,
    pub LensMount: ushort,
    pub CamID: ::std::os::raw::c_ulonglong,
    pub CameraFormat: ushort,
    pub CameraMount: ushort,
    pub body: [::std::os::raw::c_char; 64usize],
    pub FocalType: ::std::os::raw::c_short,
    pub LensFeatures_pre: [::std::os::raw::c_char; 16usize],
    pub LensFeatures_suf: [::std::os::raw::c_char; 16usize],
    pub MinFocal: f32,
    pub MaxFocal: f32,
    pub MaxAp4MinFocal: f32,
    pub MaxAp4MaxFocal: f32,
    pub MinAp4MinFocal: f32,
    pub MinAp4MaxFocal: f32,
    pub MaxAp: f32,
    pub MinAp: f32,
    pub CurFocal: f32,
    pub CurAp: f32,
    pub MaxAp4CurFocal: f32,
    pub MinAp4CurFocal: f32,
    pub MinFocusDistance: f32,
    pub FocusRangeIndex: f32,
    pub LensFStops: f32,
    pub TeleconverterID: ::std::os::raw::c_ulonglong,
    pub Teleconverter: [::std::os::raw::c_char; 128usize],
    pub AdapterID: ::std::os::raw::c_ulonglong,
    pub Adapter: [::std::os::raw::c_char; 128usize],
    pub AttachmentID: ::std::os::raw::c_ulonglong,
    pub Attachment: [::std::os::raw::c_char; 128usize],
    pub FocalUnits: ushort,
    pub FocalLengthIn35mmFormat: f32,
}
#[test]
fn bindgen_test_layout_libraw_makernotes_lens_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_makernotes_lens_t>(),
        736usize,
        concat!("Size of: ", stringify!(libraw_makernotes_lens_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_makernotes_lens_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_makernotes_lens_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).LensID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(LensID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).Lens as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(Lens)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).LensFormat as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(LensFormat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).LensMount as *const _ as usize
        },
        138usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(LensMount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).CamID as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(CamID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).CameraFormat as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(CameraFormat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).CameraMount as *const _ as usize
        },
        154usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(CameraMount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).body as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).FocalType as *const _ as usize
        },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(FocalType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).LensFeatures_pre as *const _
                as usize
        },
        222usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(LensFeatures_pre)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).LensFeatures_suf as *const _
                as usize
        },
        238usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(LensFeatures_suf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).MinFocal as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(MinFocal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).MaxFocal as *const _ as usize
        },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(MaxFocal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).MaxAp4MinFocal as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(MaxAp4MinFocal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).MaxAp4MaxFocal as *const _ as usize
        },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(MaxAp4MaxFocal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).MinAp4MinFocal as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(MinAp4MinFocal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).MinAp4MaxFocal as *const _ as usize
        },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(MinAp4MaxFocal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).MaxAp as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(MaxAp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).MinAp as *const _ as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(MinAp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).CurFocal as *const _ as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(CurFocal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).CurAp as *const _ as usize },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(CurAp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).MaxAp4CurFocal as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(MaxAp4CurFocal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).MinAp4CurFocal as *const _ as usize
        },
        300usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(MinAp4CurFocal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).MinFocusDistance as *const _
                as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(MinFocusDistance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).FocusRangeIndex as *const _
                as usize
        },
        308usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(FocusRangeIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).LensFStops as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(LensFStops)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).TeleconverterID as *const _
                as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(TeleconverterID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).Teleconverter as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(Teleconverter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).AdapterID as *const _ as usize
        },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(AdapterID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).Adapter as *const _ as usize
        },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(Adapter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).AttachmentID as *const _ as usize
        },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(AttachmentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).Attachment as *const _ as usize
        },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(Attachment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).FocalUnits as *const _ as usize
        },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(FocalUnits)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).FocalLengthIn35mmFormat as *const _
                as usize
        },
        732usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(FocalLengthIn35mmFormat)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_nikonlens_t {
    pub EffectiveMaxAp: f32,
    pub LensIDNumber: uchar,
    pub LensFStops: uchar,
    pub MCUVersion: uchar,
    pub LensType: uchar,
}
#[test]
fn bindgen_test_layout_libraw_nikonlens_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_nikonlens_t>(),
        8usize,
        concat!("Size of: ", stringify!(libraw_nikonlens_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_nikonlens_t>(),
        4usize,
        concat!("Alignment of ", stringify!(libraw_nikonlens_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikonlens_t>())).EffectiveMaxAp as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikonlens_t),
            "::",
            stringify!(EffectiveMaxAp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_nikonlens_t>())).LensIDNumber as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikonlens_t),
            "::",
            stringify!(LensIDNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_nikonlens_t>())).LensFStops as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikonlens_t),
            "::",
            stringify!(LensFStops)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_nikonlens_t>())).MCUVersion as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikonlens_t),
            "::",
            stringify!(MCUVersion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_nikonlens_t>())).LensType as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikonlens_t),
            "::",
            stringify!(LensType)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_dnglens_t {
    pub MinFocal: f32,
    pub MaxFocal: f32,
    pub MaxAp4MinFocal: f32,
    pub MaxAp4MaxFocal: f32,
}
#[test]
fn bindgen_test_layout_libraw_dnglens_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_dnglens_t>(),
        16usize,
        concat!("Size of: ", stringify!(libraw_dnglens_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_dnglens_t>(),
        4usize,
        concat!("Alignment of ", stringify!(libraw_dnglens_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_dnglens_t>())).MinFocal as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dnglens_t),
            "::",
            stringify!(MinFocal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_dnglens_t>())).MaxFocal as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dnglens_t),
            "::",
            stringify!(MaxFocal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_dnglens_t>())).MaxAp4MinFocal as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dnglens_t),
            "::",
            stringify!(MaxAp4MinFocal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_dnglens_t>())).MaxAp4MaxFocal as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dnglens_t),
            "::",
            stringify!(MaxAp4MaxFocal)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_lensinfo_t {
    pub MinFocal: f32,
    pub MaxFocal: f32,
    pub MaxAp4MinFocal: f32,
    pub MaxAp4MaxFocal: f32,
    pub EXIF_MaxAp: f32,
    pub LensMake: [::std::os::raw::c_char; 128usize],
    pub Lens: [::std::os::raw::c_char; 128usize],
    pub LensSerial: [::std::os::raw::c_char; 128usize],
    pub InternalLensSerial: [::std::os::raw::c_char; 128usize],
    pub FocalLengthIn35mmFormat: ushort,
    pub nikon: libraw_nikonlens_t,
    pub dng: libraw_dnglens_t,
    pub makernotes: libraw_makernotes_lens_t,
}
#[test]
fn bindgen_test_layout_libraw_lensinfo_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_lensinfo_t>(),
        1296usize,
        concat!("Size of: ", stringify!(libraw_lensinfo_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_lensinfo_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_lensinfo_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_lensinfo_t>())).MinFocal as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_lensinfo_t),
            "::",
            stringify!(MinFocal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_lensinfo_t>())).MaxFocal as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_lensinfo_t),
            "::",
            stringify!(MaxFocal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_lensinfo_t>())).MaxAp4MinFocal as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_lensinfo_t),
            "::",
            stringify!(MaxAp4MinFocal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_lensinfo_t>())).MaxAp4MaxFocal as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_lensinfo_t),
            "::",
            stringify!(MaxAp4MaxFocal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_lensinfo_t>())).EXIF_MaxAp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_lensinfo_t),
            "::",
            stringify!(EXIF_MaxAp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_lensinfo_t>())).LensMake as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_lensinfo_t),
            "::",
            stringify!(LensMake)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_lensinfo_t>())).Lens as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_lensinfo_t),
            "::",
            stringify!(Lens)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_lensinfo_t>())).LensSerial as *const _ as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_lensinfo_t),
            "::",
            stringify!(LensSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_lensinfo_t>())).InternalLensSerial as *const _ as usize
        },
        404usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_lensinfo_t),
            "::",
            stringify!(InternalLensSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_lensinfo_t>())).FocalLengthIn35mmFormat as *const _
                as usize
        },
        532usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_lensinfo_t),
            "::",
            stringify!(FocalLengthIn35mmFormat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_lensinfo_t>())).nikon as *const _ as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_lensinfo_t),
            "::",
            stringify!(nikon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_lensinfo_t>())).dng as *const _ as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_lensinfo_t),
            "::",
            stringify!(dng)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_lensinfo_t>())).makernotes as *const _ as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_lensinfo_t),
            "::",
            stringify!(makernotes)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_makernotes_t {
    pub canon: libraw_canon_makernotes_t,
    pub nikon: libraw_nikon_makernotes_t,
    pub hasselblad: libraw_hasselblad_makernotes_t,
    pub fuji: libraw_fuji_info_t,
    pub olympus: libraw_olympus_makernotes_t,
    pub sony: libraw_sony_info_t,
    pub kodak: libraw_kodak_makernotes_t,
    pub panasonic: libraw_panasonic_makernotes_t,
    pub pentax: libraw_pentax_makernotes_t,
    pub phaseone: libraw_p1_makernotes_t,
    pub samsung: libraw_samsung_makernotes_t,
    pub common: libraw_metadata_common_t,
}
#[test]
fn bindgen_test_layout_libraw_makernotes_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_makernotes_t>(),
        2976usize,
        concat!("Size of: ", stringify!(libraw_makernotes_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_makernotes_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_makernotes_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_makernotes_t>())).canon as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_t),
            "::",
            stringify!(canon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_makernotes_t>())).nikon as *const _ as usize },
        664usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_t),
            "::",
            stringify!(nikon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_makernotes_t>())).hasselblad as *const _ as usize },
        904usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_t),
            "::",
            stringify!(hasselblad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_makernotes_t>())).fuji as *const _ as usize },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_t),
            "::",
            stringify!(fuji)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_makernotes_t>())).olympus as *const _ as usize },
        1376usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_t),
            "::",
            stringify!(olympus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_makernotes_t>())).sony as *const _ as usize },
        1720usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_t),
            "::",
            stringify!(sony)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_makernotes_t>())).kodak as *const _ as usize },
        1872usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_t),
            "::",
            stringify!(kodak)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_makernotes_t>())).panasonic as *const _ as usize },
        2116usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_t),
            "::",
            stringify!(panasonic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_makernotes_t>())).pentax as *const _ as usize },
        2172usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_t),
            "::",
            stringify!(pentax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_makernotes_t>())).phaseone as *const _ as usize },
        2192usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_t),
            "::",
            stringify!(phaseone)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_makernotes_t>())).samsung as *const _ as usize },
        2640usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_t),
            "::",
            stringify!(samsung)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_makernotes_t>())).common as *const _ as usize },
        2776usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_t),
            "::",
            stringify!(common)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_shootinginfo_t {
    pub DriveMode: ::std::os::raw::c_short,
    pub FocusMode: ::std::os::raw::c_short,
    pub MeteringMode: ::std::os::raw::c_short,
    pub AFPoint: ::std::os::raw::c_short,
    pub ExposureMode: ::std::os::raw::c_short,
    pub ExposureProgram: ::std::os::raw::c_short,
    pub ImageStabilization: ::std::os::raw::c_short,
    pub BodySerial: [::std::os::raw::c_char; 64usize],
    pub InternalBodySerial: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout_libraw_shootinginfo_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_shootinginfo_t>(),
        142usize,
        concat!("Size of: ", stringify!(libraw_shootinginfo_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_shootinginfo_t>(),
        2usize,
        concat!("Alignment of ", stringify!(libraw_shootinginfo_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_shootinginfo_t>())).DriveMode as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_shootinginfo_t),
            "::",
            stringify!(DriveMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_shootinginfo_t>())).FocusMode as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_shootinginfo_t),
            "::",
            stringify!(FocusMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_shootinginfo_t>())).MeteringMode as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_shootinginfo_t),
            "::",
            stringify!(MeteringMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_shootinginfo_t>())).AFPoint as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_shootinginfo_t),
            "::",
            stringify!(AFPoint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_shootinginfo_t>())).ExposureMode as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_shootinginfo_t),
            "::",
            stringify!(ExposureMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_shootinginfo_t>())).ExposureProgram as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_shootinginfo_t),
            "::",
            stringify!(ExposureProgram)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_shootinginfo_t>())).ImageStabilization as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_shootinginfo_t),
            "::",
            stringify!(ImageStabilization)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_shootinginfo_t>())).BodySerial as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_shootinginfo_t),
            "::",
            stringify!(BodySerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_shootinginfo_t>())).InternalBodySerial as *const _
                as usize
        },
        78usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_shootinginfo_t),
            "::",
            stringify!(InternalBodySerial)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_data_t {
    pub image: *mut [ushort; 4usize],
    pub sizes: libraw_image_sizes_t,
    pub idata: libraw_iparams_t,
    pub lens: libraw_lensinfo_t,
    pub makernotes: libraw_makernotes_t,
    pub shootinginfo: libraw_shootinginfo_t,
    pub params: libraw_output_params_t,
    pub progress_flags: ::std::os::raw::c_uint,
    pub process_warnings: ::std::os::raw::c_uint,
    pub color: libraw_colordata_t,
    pub other: libraw_imgother_t,
    pub thumbnail: libraw_thumbnail_t,
    pub rawdata: libraw_rawdata_t,
    pub parent_class: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_libraw_data_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_data_t>(),
        381000usize,
        concat!("Size of: ", stringify!(libraw_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_data_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_data_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_data_t>())).image as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_data_t),
            "::",
            stringify!(image)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_data_t>())).sizes as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_data_t),
            "::",
            stringify!(sizes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_data_t>())).idata as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_data_t),
            "::",
            stringify!(idata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_data_t>())).lens as *const _ as usize },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_data_t),
            "::",
            stringify!(lens)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_data_t>())).makernotes as *const _ as usize },
        1920usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_data_t),
            "::",
            stringify!(makernotes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_data_t>())).shootinginfo as *const _ as usize },
        4896usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_data_t),
            "::",
            stringify!(shootinginfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_data_t>())).params as *const _ as usize },
        5040usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_data_t),
            "::",
            stringify!(params)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_data_t>())).progress_flags as *const _ as usize },
        5376usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_data_t),
            "::",
            stringify!(progress_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_data_t>())).process_warnings as *const _ as usize },
        5380usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_data_t),
            "::",
            stringify!(process_warnings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_data_t>())).color as *const _ as usize },
        5384usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_data_t),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_data_t>())).other as *const _ as usize },
        192424usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_data_t),
            "::",
            stringify!(other)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_data_t>())).thumbnail as *const _ as usize },
        193224usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_data_t),
            "::",
            stringify!(thumbnail)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_data_t>())).rawdata as *const _ as usize },
        193248usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_data_t),
            "::",
            stringify!(rawdata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_data_t>())).parent_class as *const _ as usize },
        380992usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_data_t),
            "::",
            stringify!(parent_class)
        )
    );
}
extern "C" {
    pub fn libraw_strerror(errorcode: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn libraw_strprogress(arg1: LibRaw_progress) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn libraw_init(flags: ::std::os::raw::c_uint) -> *mut libraw_data_t;
}
extern "C" {
    pub fn libraw_open_file(
        arg1: *mut libraw_data_t,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libraw_open_file_ex(
        arg1: *mut libraw_data_t,
        arg2: *const ::std::os::raw::c_char,
        max_buff_sz: INT64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libraw_open_buffer(
        arg1: *mut libraw_data_t,
        buffer: *mut ::std::os::raw::c_void,
        size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libraw_unpack(arg1: *mut libraw_data_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libraw_unpack_thumb(arg1: *mut libraw_data_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libraw_recycle_datastream(arg1: *mut libraw_data_t);
}
extern "C" {
    pub fn libraw_recycle(arg1: *mut libraw_data_t);
}
extern "C" {
    pub fn libraw_close(arg1: *mut libraw_data_t);
}
extern "C" {
    pub fn libraw_subtract_black(arg1: *mut libraw_data_t);
}
extern "C" {
    pub fn libraw_raw2image(arg1: *mut libraw_data_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libraw_free_image(arg1: *mut libraw_data_t);
}
extern "C" {
    pub fn libraw_version() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn libraw_versionNumber() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libraw_cameraList() -> *mut *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn libraw_cameraCount() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libraw_set_memerror_handler(
        arg1: *mut libraw_data_t,
        cb: memory_callback,
        datap: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn libraw_set_exifparser_handler(
        arg1: *mut libraw_data_t,
        cb: exif_parser_callback,
        datap: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn libraw_set_dataerror_handler(
        arg1: *mut libraw_data_t,
        func: data_callback,
        datap: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn libraw_set_progress_handler(
        arg1: *mut libraw_data_t,
        cb: progress_callback,
        datap: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn libraw_unpack_function_name(lr: *mut libraw_data_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn libraw_get_decoder_info(
        lr: *mut libraw_data_t,
        d: *mut libraw_decoder_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libraw_COLOR(
        arg1: *mut libraw_data_t,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libraw_capabilities() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn libraw_adjust_sizes_info_only(arg1: *mut libraw_data_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libraw_dcraw_ppm_tiff_writer(
        lr: *mut libraw_data_t,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libraw_dcraw_thumb_writer(
        lr: *mut libraw_data_t,
        fname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libraw_dcraw_process(lr: *mut libraw_data_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libraw_dcraw_make_mem_image(
        lr: *mut libraw_data_t,
        errc: *mut ::std::os::raw::c_int,
    ) -> *mut libraw_processed_image_t;
}
extern "C" {
    pub fn libraw_dcraw_make_mem_thumb(
        lr: *mut libraw_data_t,
        errc: *mut ::std::os::raw::c_int,
    ) -> *mut libraw_processed_image_t;
}
extern "C" {
    pub fn libraw_dcraw_clear_mem(arg1: *mut libraw_processed_image_t);
}
extern "C" {
    pub fn libraw_set_demosaic(lr: *mut libraw_data_t, value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn libraw_set_output_color(lr: *mut libraw_data_t, value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn libraw_set_user_mul(lr: *mut libraw_data_t, index: ::std::os::raw::c_int, val: f32);
}
extern "C" {
    pub fn libraw_set_output_bps(lr: *mut libraw_data_t, value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn libraw_set_gamma(lr: *mut libraw_data_t, index: ::std::os::raw::c_int, value: f32);
}
extern "C" {
    pub fn libraw_set_no_auto_bright(lr: *mut libraw_data_t, value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn libraw_set_bright(lr: *mut libraw_data_t, value: f32);
}
extern "C" {
    pub fn libraw_set_highlight(lr: *mut libraw_data_t, value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn libraw_set_fbdd_noiserd(lr: *mut libraw_data_t, value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn libraw_get_raw_height(lr: *mut libraw_data_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libraw_get_raw_width(lr: *mut libraw_data_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libraw_get_iheight(lr: *mut libraw_data_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libraw_get_iwidth(lr: *mut libraw_data_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libraw_get_cam_mul(lr: *mut libraw_data_t, index: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn libraw_get_pre_mul(lr: *mut libraw_data_t, index: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn libraw_get_rgb_cam(
        lr: *mut libraw_data_t,
        index1: ::std::os::raw::c_int,
        index2: ::std::os::raw::c_int,
    ) -> f32;
}
extern "C" {
    pub fn libraw_get_color_maximum(lr: *mut libraw_data_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libraw_set_output_tif(lr: *mut libraw_data_t, value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn libraw_get_iparams(lr: *mut libraw_data_t) -> *mut libraw_iparams_t;
}
extern "C" {
    pub fn libraw_get_lensinfo(lr: *mut libraw_data_t) -> *mut libraw_lensinfo_t;
}
extern "C" {
    pub fn libraw_get_imgother(lr: *mut libraw_data_t) -> *mut libraw_imgother_t;
}
