/* automatically generated by rust-bindgen 0.63.0 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const __MINGW64_VERSION_MAJOR: u32 = 11;
pub const __MINGW64_VERSION_MINOR: u32 = 0;
pub const __MINGW64_VERSION_BUGFIX: u32 = 0;
pub const __MINGW64_VERSION_RC: u32 = 0;
pub const __MINGW64_VERSION_STATE: &[u8; 6usize] = b"alpha\0";
pub const __MINGW32_MAJOR_VERSION: u32 = 3;
pub const __MINGW32_MINOR_VERSION: u32 = 11;
pub const _M_AMD64: u32 = 100;
pub const _M_X64: u32 = 100;
pub const __: u32 = 1;
pub const __MINGW_USE_UNDERSCORE_PREFIX: u32 = 0;
pub const __MINGW_HAVE_ANSI_C99_PRINTF: u32 = 1;
pub const __MINGW_HAVE_WIDE_C99_PRINTF: u32 = 1;
pub const __MINGW_HAVE_ANSI_C99_SCANF: u32 = 1;
pub const __MINGW_HAVE_WIDE_C99_SCANF: u32 = 1;
pub const __MINGW_SEC_WARN_STR : & [u8 ; 92usize] = b"This function or variable may be unsafe, use _CRT_SECURE_NO_WARNINGS to disable deprecation\0" ;
pub const __MINGW_MSVC2005_DEPREC_STR : & [u8 ; 117usize] = b"This POSIX function is deprecated beginning in Visual C++ 2005, use _CRT_NONSTDC_NO_DEPRECATE to disable deprecation\0" ;
pub const __MINGW_FORTIFY_LEVEL: u32 = 0;
pub const __MINGW_FORTIFY_VA_ARG: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const __USE_CRTIMP: u32 = 1;
pub const USE___UUIDOF: u32 = 0;
pub const __CRT__NO_INLINE: u32 = 1;
pub const __MSVCRT_VERSION__: u32 = 1792;
pub const _WIN32_WINNT: u32 = 1537;
pub const MINGW_HAS_SECURE_API: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const MINGW_HAS_DDK_H: u32 = 1;
pub const _CRT_PACKING: u32 = 8;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 253;
pub const _ARGMAX: u32 = 100;
pub const __USE_MINGW_ANSI_STDIO: u32 = 1;
pub const PATH_MAX: u32 = 260;
pub const CHAR_BIT: u32 = 8;
pub const SCHAR_MIN: i32 = -128;
pub const SCHAR_MAX: u32 = 127;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MIN: i32 = -128;
pub const CHAR_MAX: u32 = 127;
pub const MB_LEN_MAX: u32 = 5;
pub const SHRT_MIN: i32 = -32768;
pub const SHRT_MAX: u32 = 32767;
pub const USHRT_MAX: u32 = 65535;
pub const INT_MIN: i32 = -2147483648;
pub const INT_MAX: u32 = 2147483647;
pub const UINT_MAX: u32 = 4294967295;
pub const LONG_MIN: i32 = -2147483648;
pub const LONG_MAX: u32 = 2147483647;
pub const ULONG_MAX: u32 = 4294967295;
pub const LLONG_MAX: u64 = 9223372036854775807;
pub const LLONG_MIN: i64 = -9223372036854775808;
pub const ULLONG_MAX: i32 = -1;
pub const _I8_MIN: i32 = -128;
pub const _I8_MAX: u32 = 127;
pub const _UI8_MAX: u32 = 255;
pub const _I16_MIN: i32 = -32768;
pub const _I16_MAX: u32 = 32767;
pub const _UI16_MAX: u32 = 65535;
pub const _I32_MIN: i32 = -2147483648;
pub const _I32_MAX: u32 = 2147483647;
pub const _UI32_MAX: u32 = 4294967295;
pub const LONG_LONG_MAX: u64 = 9223372036854775807;
pub const LONG_LONG_MIN: i64 = -9223372036854775808;
pub const ULONG_LONG_MAX: i32 = -1;
pub const _I64_MIN: i64 = -9223372036854775808;
pub const _I64_MAX: u64 = 9223372036854775807;
pub const _UI64_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const SSIZE_MAX: u64 = 9223372036854775807;
pub const _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION: u32 = 1;
pub const _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR: u32 = 2;
pub const _CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS: u32 = 4;
pub const _CRT_INTERNAL_PRINTF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 8;
pub const _CRT_INTERNAL_PRINTF_LEGACY_THREE_DIGIT_EXPONENTS: u32 = 16;
pub const _CRT_INTERNAL_SCANF_SECURECRT: u32 = 1;
pub const _CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS: u32 = 2;
pub const _CRT_INTERNAL_SCANF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 4;
pub const _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS: u32 = 4;
pub const _CRT_INTERNAL_LOCAL_SCANF_OPTIONS: u32 = 2;
pub const BUFSIZ: u32 = 512;
pub const _NSTREAM_: u32 = 512;
pub const _IOB_ENTRIES: u32 = 20;
pub const EOF: i32 = -1;
pub const _P_tmpdir: &[u8; 2usize] = b"\\\0";
pub const _wP_tmpdir: &[u8; 2usize] = b"\\\0";
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_SET: u32 = 0;
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const FILENAME_MAX: u32 = 260;
pub const FOPEN_MAX: u32 = 20;
pub const _SYS_OPEN: u32 = 20;
pub const TMP_MAX: u32 = 32767;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 64;
pub const _IONBF: u32 = 4;
pub const _IOREAD: u32 = 1;
pub const _IOWRT: u32 = 2;
pub const _IOMYBUF: u32 = 8;
pub const _IOEOF: u32 = 16;
pub const _IOERR: u32 = 32;
pub const _IOSTRG: u32 = 64;
pub const _IORW: u32 = 128;
pub const _TWO_DIGIT_EXPONENT: u32 = 1;
pub const P_tmpdir: &[u8; 2usize] = b"\\\0";
pub const SYS_OPEN: u32 = 20;
pub const _P_WAIT: u32 = 0;
pub const _P_NOWAIT: u32 = 1;
pub const _OLD_P_OVERLAY: u32 = 2;
pub const _P_NOWAITO: u32 = 3;
pub const _P_DETACH: u32 = 4;
pub const _P_OVERLAY: u32 = 2;
pub const _WAIT_CHILD: u32 = 0;
pub const _WAIT_GRANDCHILD: u32 = 1;
pub const TMP_MAX_S: u32 = 32767;
pub const __USE_MINGW_STRTOX: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const EXIT_FAILURE: u32 = 1;
pub const RAND_MAX: u32 = 32767;
pub const _MAX_PATH: u32 = 260;
pub const _MAX_DRIVE: u32 = 3;
pub const _MAX_DIR: u32 = 256;
pub const _MAX_FNAME: u32 = 256;
pub const _MAX_EXT: u32 = 256;
pub const _OUT_TO_DEFAULT: u32 = 0;
pub const _OUT_TO_STDERR: u32 = 1;
pub const _OUT_TO_MSGBOX: u32 = 2;
pub const _REPORT_ERRMODE: u32 = 3;
pub const _WRITE_ABORT_MSG: u32 = 1;
pub const _CALL_REPORTFAULT: u32 = 2;
pub const _MAX_ENV: u32 = 32767;
pub const _CVTBUFSIZE: u32 = 349;
pub const _HEAP_MAXREQ: i32 = -32;
pub const _HEAPEMPTY: i32 = -1;
pub const _HEAPOK: i32 = -2;
pub const _HEAPBADBEGIN: i32 = -3;
pub const _HEAPBADNODE: i32 = -4;
pub const _HEAPEND: i32 = -5;
pub const _HEAPBADPTR: i32 = -6;
pub const _FREEENTRY: u32 = 0;
pub const _USEDENTRY: u32 = 1;
pub const _MAX_WAIT_MALLOC_CRT: u32 = 60000;
pub const _ALLOCA_S_THRESHOLD: u32 = 1024;
pub const _ALLOCA_S_STACK_MARKER: u32 = 52428;
pub const _ALLOCA_S_HEAP_MARKER: u32 = 56797;
pub const _ALLOCA_S_MARKER_SIZE: u32 = 16;
pub const _DOMAIN: u32 = 1;
pub const _SING: u32 = 2;
pub const _OVERFLOW: u32 = 3;
pub const _UNDERFLOW: u32 = 4;
pub const _TLOSS: u32 = 5;
pub const _PLOSS: u32 = 6;
pub const DOMAIN: u32 = 1;
pub const SING: u32 = 2;
pub const OVERFLOW: u32 = 3;
pub const UNDERFLOW: u32 = 4;
pub const TLOSS: u32 = 5;
pub const PLOSS: u32 = 6;
pub const M_E: f64 = 2.718281828459045;
pub const M_LOG2E: f64 = 1.4426950408889634;
pub const M_LOG10E: f64 = 0.4342944819032518;
pub const M_LN2: f64 = 0.6931471805599453;
pub const M_LN10: f64 = 2.302585092994046;
pub const M_PI: f64 = 3.141592653589793;
pub const M_PI_2: f64 = 1.5707963267948966;
pub const M_PI_4: f64 = 0.7853981633974483;
pub const M_1_PI: f64 = 0.3183098861837907;
pub const M_2_PI: f64 = 0.6366197723675814;
pub const M_2_SQRTPI: f64 = 1.1283791670955126;
pub const M_SQRT2: f64 = 1.4142135623730951;
pub const M_SQRT1_2: f64 = 0.7071067811865476;
pub const __MINGW_FPCLASS_DEFINED: u32 = 1;
pub const _FPCLASS_SNAN: u32 = 1;
pub const _FPCLASS_QNAN: u32 = 2;
pub const _FPCLASS_NINF: u32 = 4;
pub const _FPCLASS_NN: u32 = 8;
pub const _FPCLASS_ND: u32 = 16;
pub const _FPCLASS_NZ: u32 = 32;
pub const _FPCLASS_PZ: u32 = 64;
pub const _FPCLASS_PD: u32 = 128;
pub const _FPCLASS_PN: u32 = 256;
pub const _FPCLASS_PINF: u32 = 512;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const FP_SNAN: u32 = 1;
pub const FP_QNAN: u32 = 2;
pub const FP_NINF: u32 = 4;
pub const FP_PINF: u32 = 512;
pub const FP_NDENORM: u32 = 16;
pub const FP_PDENORM: u32 = 128;
pub const FP_NZERO: u32 = 32;
pub const FP_PZERO: u32 = 64;
pub const FP_NNORM: u32 = 8;
pub const FP_PNORM: u32 = 256;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ENOFILE: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDEADLK: u32 = 36;
pub const ENAMETOOLONG: u32 = 38;
pub const ENOLCK: u32 = 39;
pub const ENOSYS: u32 = 40;
pub const ENOTEMPTY: u32 = 41;
pub const EINVAL: u32 = 22;
pub const EILSEQ: u32 = 42;
pub const STRUNCATE: u32 = 80;
pub const EDEADLOCK: u32 = 36;
pub const ENOTSUP: u32 = 129;
pub const EAFNOSUPPORT: u32 = 102;
pub const EADDRINUSE: u32 = 100;
pub const EADDRNOTAVAIL: u32 = 101;
pub const EISCONN: u32 = 113;
pub const ENOBUFS: u32 = 119;
pub const ECONNABORTED: u32 = 106;
pub const EALREADY: u32 = 103;
pub const ECONNREFUSED: u32 = 107;
pub const ECONNRESET: u32 = 108;
pub const EDESTADDRREQ: u32 = 109;
pub const EHOSTUNREACH: u32 = 110;
pub const EMSGSIZE: u32 = 115;
pub const ENETDOWN: u32 = 116;
pub const ENETRESET: u32 = 117;
pub const ENETUNREACH: u32 = 118;
pub const ENOPROTOOPT: u32 = 123;
pub const ENOTSOCK: u32 = 128;
pub const ENOTCONN: u32 = 126;
pub const ECANCELED: u32 = 105;
pub const EINPROGRESS: u32 = 112;
pub const EOPNOTSUPP: u32 = 130;
pub const EWOULDBLOCK: u32 = 140;
pub const EOWNERDEAD: u32 = 133;
pub const EPROTO: u32 = 134;
pub const EPROTONOSUPPORT: u32 = 135;
pub const EBADMSG: u32 = 104;
pub const EIDRM: u32 = 111;
pub const ENODATA: u32 = 120;
pub const ENOLINK: u32 = 121;
pub const ENOMSG: u32 = 122;
pub const ENOSR: u32 = 124;
pub const ENOSTR: u32 = 125;
pub const ENOTRECOVERABLE: u32 = 127;
pub const ETIME: u32 = 137;
pub const ETXTBSY: u32 = 139;
pub const ETIMEDOUT: u32 = 138;
pub const ELOOP: u32 = 114;
pub const EPROTOTYPE: u32 = 136;
pub const EOVERFLOW: u32 = 132;
pub const _NLSCMPERROR: u32 = 2147483647;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const INTMAX_MIN: i64 = -9223372036854775808;
pub const INTMAX_MAX: u64 = 9223372036854775807;
pub const UINTMAX_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const LIBRAW_DEFAULT_ADJUST_MAXIMUM_THRESHOLD: f64 = 0.75;
pub const LIBRAW_DEFAULT_AUTO_BRIGHTNESS_THRESHOLD: f64 = 0.01;
pub const LIBRAW_MAX_ALLOC_MB_DEFAULT: u32 = 2048;
pub const LIBRAW_MAX_NONDNG_RAW_FILE_SIZE: u32 = 2147483647;
pub const LIBRAW_MAX_DNG_RAW_FILE_SIZE: u32 = 2147483647;
pub const LIBRAW_MAX_THUMBNAIL_MB: u32 = 512;
pub const LIBRAW_MAX_METADATA_BLOCKS: u32 = 1024;
pub const LIBRAW_CBLACK_SIZE: u32 = 4104;
pub const LIBRAW_IFD_MAXCOUNT: u32 = 10;
pub const LIBRAW_THUMBNAIL_MAXCOUNT: u32 = 8;
pub const LIBRAW_CRXTRACKS_MAXCOUNT: u32 = 16;
pub const LIBRAW_AFDATA_MAXCOUNT: u32 = 4;
pub const LIBRAW_AHD_TILE: u32 = 512;
pub const LIBRAW_LENS_NOT_SET: i32 = -1;
pub const LIBRAW_XTRANS: u32 = 9;
pub const LIBRAW_PROGRESS_THUMB_MASK: u32 = 268435455;
pub const LIBRAW_MAJOR_VERSION: u32 = 0;
pub const LIBRAW_MINOR_VERSION: u32 = 21;
pub const LIBRAW_PATCH_VERSION: u32 = 0;
pub const LIBRAW_SHLIB_CURRENT: u32 = 23;
pub const LIBRAW_SHLIB_REVISION: u32 = 0;
pub const LIBRAW_SHLIB_AGE: u32 = 0;
pub const LibRawBigEndian: u32 = 0;
pub const LIBRAW_HISTOGRAM_SIZE: u32 = 8192;
pub type __gnuc_va_list = __builtin_va_list;
pub type va_list = __gnuc_va_list;
pub type rsize_t = usize;
pub type wchar_t = libc::c_ushort;
pub type wint_t = libc::c_ushort;
pub type wctype_t = libc::c_ushort;
pub type errno_t = libc::c_int;
pub type __time32_t = libc::c_long;
pub type __time64_t = libc::c_longlong;
pub type time_t = __time64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct threadmbcinfostruct {
    _unused: [u8; 0],
}
pub type pthreadlocinfo = *mut threadlocaleinfostruct;
pub type pthreadmbcinfo = *mut threadmbcinfostruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __lc_time_data {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct localeinfo_struct {
    pub locinfo: pthreadlocinfo,
    pub mbcinfo: pthreadmbcinfo,
}
#[test]
fn bindgen_test_layout_localeinfo_struct() {
    const UNINIT: ::core::mem::MaybeUninit<localeinfo_struct> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<localeinfo_struct>(),
        16usize,
        concat!("Size of: ", stringify!(localeinfo_struct))
    );
    assert_eq!(
        ::core::mem::align_of::<localeinfo_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(localeinfo_struct))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).locinfo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(localeinfo_struct),
            "::",
            stringify!(locinfo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mbcinfo) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(localeinfo_struct),
            "::",
            stringify!(mbcinfo)
        )
    );
}
pub type _locale_tstruct = localeinfo_struct;
pub type _locale_t = *mut localeinfo_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct tagLC_ID {
    pub wLanguage: libc::c_ushort,
    pub wCountry: libc::c_ushort,
    pub wCodePage: libc::c_ushort,
}
#[test]
fn bindgen_test_layout_tagLC_ID() {
    const UNINIT: ::core::mem::MaybeUninit<tagLC_ID> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<tagLC_ID>(),
        6usize,
        concat!("Size of: ", stringify!(tagLC_ID))
    );
    assert_eq!(
        ::core::mem::align_of::<tagLC_ID>(),
        2usize,
        concat!("Alignment of ", stringify!(tagLC_ID))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).wLanguage) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagLC_ID),
            "::",
            stringify!(wLanguage)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).wCountry) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(tagLC_ID),
            "::",
            stringify!(wCountry)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).wCodePage) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tagLC_ID),
            "::",
            stringify!(wCodePage)
        )
    );
}
pub type LC_ID = tagLC_ID;
pub type LPLC_ID = *mut tagLC_ID;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct threadlocaleinfostruct {
    pub refcount: libc::c_int,
    pub lc_codepage: libc::c_uint,
    pub lc_collate_cp: libc::c_uint,
    pub lc_handle: [libc::c_ulong; 6usize],
    pub lc_id: [LC_ID; 6usize],
    pub lc_category: [threadlocaleinfostruct__bindgen_ty_1; 6usize],
    pub lc_clike: libc::c_int,
    pub mb_cur_max: libc::c_int,
    pub lconv_intl_refcount: *mut libc::c_int,
    pub lconv_num_refcount: *mut libc::c_int,
    pub lconv_mon_refcount: *mut libc::c_int,
    pub lconv: *mut lconv,
    pub ctype1_refcount: *mut libc::c_int,
    pub ctype1: *mut libc::c_ushort,
    pub pctype: *const libc::c_ushort,
    pub pclmap: *const libc::c_uchar,
    pub pcumap: *const libc::c_uchar,
    pub lc_time_curr: *mut __lc_time_data,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct threadlocaleinfostruct__bindgen_ty_1 {
    pub locale: *mut libc::c_char,
    pub wlocale: *mut wchar_t,
    pub refcount: *mut libc::c_int,
    pub wrefcount: *mut libc::c_int,
}
#[test]
fn bindgen_test_layout_threadlocaleinfostruct__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<threadlocaleinfostruct__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<threadlocaleinfostruct__bindgen_ty_1>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(threadlocaleinfostruct__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<threadlocaleinfostruct__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(threadlocaleinfostruct__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).locale) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(threadlocaleinfostruct__bindgen_ty_1),
            "::",
            stringify!(locale)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).wlocale) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(threadlocaleinfostruct__bindgen_ty_1),
            "::",
            stringify!(wlocale)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).refcount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(threadlocaleinfostruct__bindgen_ty_1),
            "::",
            stringify!(refcount)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).wrefcount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(threadlocaleinfostruct__bindgen_ty_1),
            "::",
            stringify!(wrefcount)
        )
    );
}
#[test]
fn bindgen_test_layout_threadlocaleinfostruct() {
    const UNINIT: ::core::mem::MaybeUninit<threadlocaleinfostruct> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<threadlocaleinfostruct>(),
        352usize,
        concat!("Size of: ", stringify!(threadlocaleinfostruct))
    );
    assert_eq!(
        ::core::mem::align_of::<threadlocaleinfostruct>(),
        8usize,
        concat!("Alignment of ", stringify!(threadlocaleinfostruct))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).refcount) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(threadlocaleinfostruct),
            "::",
            stringify!(refcount)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lc_codepage) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(threadlocaleinfostruct),
            "::",
            stringify!(lc_codepage)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lc_collate_cp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(threadlocaleinfostruct),
            "::",
            stringify!(lc_collate_cp)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lc_handle) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(threadlocaleinfostruct),
            "::",
            stringify!(lc_handle)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lc_id) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(threadlocaleinfostruct),
            "::",
            stringify!(lc_id)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lc_category) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(threadlocaleinfostruct),
            "::",
            stringify!(lc_category)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lc_clike) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(threadlocaleinfostruct),
            "::",
            stringify!(lc_clike)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mb_cur_max) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(threadlocaleinfostruct),
            "::",
            stringify!(mb_cur_max)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lconv_intl_refcount) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(threadlocaleinfostruct),
            "::",
            stringify!(lconv_intl_refcount)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lconv_num_refcount) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(threadlocaleinfostruct),
            "::",
            stringify!(lconv_num_refcount)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lconv_mon_refcount) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(threadlocaleinfostruct),
            "::",
            stringify!(lconv_mon_refcount)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lconv) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(threadlocaleinfostruct),
            "::",
            stringify!(lconv)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ctype1_refcount) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(threadlocaleinfostruct),
            "::",
            stringify!(ctype1_refcount)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ctype1) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(threadlocaleinfostruct),
            "::",
            stringify!(ctype1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pctype) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(threadlocaleinfostruct),
            "::",
            stringify!(pctype)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pclmap) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(threadlocaleinfostruct),
            "::",
            stringify!(pclmap)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pcumap) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(threadlocaleinfostruct),
            "::",
            stringify!(pcumap)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lc_time_curr) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(threadlocaleinfostruct),
            "::",
            stringify!(lc_time_curr)
        )
    );
}
pub type threadlocinfo = threadlocaleinfostruct;
extern "C" {
    pub fn memchr(
        _Buf: *const libc::c_void,
        _Val: libc::c_int,
        _MaxCount: libc::c_ulonglong,
    ) -> *mut libc::c_void;
}
extern "C" {
    pub fn memcmp(
        _Buf1: *const libc::c_void,
        _Buf2: *const libc::c_void,
        _Size: libc::c_ulonglong,
    ) -> libc::c_int;
}
extern "C" {
    pub fn memcpy(
        _Dst: *mut libc::c_void,
        _Src: *const libc::c_void,
        _Size: libc::c_ulonglong,
    ) -> *mut libc::c_void;
}
extern "C" {
    pub fn memcpy_s(
        _dest: *mut libc::c_void,
        _numberOfElements: usize,
        _src: *const libc::c_void,
        _count: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn mempcpy(
        _Dst: *mut libc::c_void,
        _Src: *const libc::c_void,
        _Size: libc::c_ulonglong,
    ) -> *mut libc::c_void;
}
extern "C" {
    pub fn memset(
        _Dst: *mut libc::c_void,
        _Val: libc::c_int,
        _Size: libc::c_ulonglong,
    ) -> *mut libc::c_void;
}
extern "C" {
    pub fn memccpy(
        _Dst: *mut libc::c_void,
        _Src: *const libc::c_void,
        _Val: libc::c_int,
        _Size: libc::c_ulonglong,
    ) -> *mut libc::c_void;
}
extern "C" {
    pub fn memicmp(
        _Buf1: *const libc::c_void,
        _Buf2: *const libc::c_void,
        _Size: usize,
    ) -> libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct _iobuf {
    pub _ptr: *mut libc::c_char,
    pub _cnt: libc::c_int,
    pub _base: *mut libc::c_char,
    pub _flag: libc::c_int,
    pub _file: libc::c_int,
    pub _charbuf: libc::c_int,
    pub _bufsiz: libc::c_int,
    pub _tmpfname: *mut libc::c_char,
}
#[test]
fn bindgen_test_layout__iobuf() {
    const UNINIT: ::core::mem::MaybeUninit<_iobuf> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_iobuf>(),
        48usize,
        concat!("Size of: ", stringify!(_iobuf))
    );
    assert_eq!(
        ::core::mem::align_of::<_iobuf>(),
        8usize,
        concat!("Alignment of ", stringify!(_iobuf))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_iobuf),
            "::",
            stringify!(_ptr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._cnt) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_iobuf),
            "::",
            stringify!(_cnt)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._base) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_iobuf),
            "::",
            stringify!(_base)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._flag) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_iobuf),
            "::",
            stringify!(_flag)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._file) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_iobuf),
            "::",
            stringify!(_file)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._charbuf) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_iobuf),
            "::",
            stringify!(_charbuf)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._bufsiz) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_iobuf),
            "::",
            stringify!(_bufsiz)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._tmpfname) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_iobuf),
            "::",
            stringify!(_tmpfname)
        )
    );
}
pub type FILE = _iobuf;
pub type _off_t = libc::c_long;
pub type off32_t = libc::c_long;
pub type _off64_t = libc::c_longlong;
pub type off64_t = libc::c_longlong;
pub type off_t = off32_t;
pub type fpos_t = libc::c_longlong;
extern "C" {
    pub fn clearerr(_File: *mut FILE);
}
extern "C" {
    pub fn fclose(_File: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn feof(_File: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn ferror(_File: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn fflush(_File: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn fgetc(_File: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn fgetpos(_File: *mut FILE, _Pos: *mut fpos_t) -> libc::c_int;
}
extern "C" {
    pub fn fgetpos64(_File: *mut FILE, _Pos: *mut fpos_t) -> libc::c_int;
}
extern "C" {
    pub fn fgets(
        _Buf: *mut libc::c_char,
        _MaxCount: libc::c_int,
        _File: *mut FILE,
    ) -> *mut libc::c_char;
}
extern "C" {
    pub fn fopen(_Filename: *const libc::c_char, _Mode: *const libc::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fopen64(filename: *const libc::c_char, mode: *const libc::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fputc(_Ch: libc::c_int, _File: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn fputs(_Str: *const libc::c_char, _File: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn fread(
        _DstBuf: *mut libc::c_void,
        _ElementSize: libc::c_ulonglong,
        _Count: libc::c_ulonglong,
        _File: *mut FILE,
    ) -> libc::c_ulonglong;
}
extern "C" {
    pub fn freopen(
        _Filename: *const libc::c_char,
        _Mode: *const libc::c_char,
        _File: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fsetpos(_File: *mut FILE, _Pos: *const fpos_t) -> libc::c_int;
}
extern "C" {
    pub fn fsetpos64(_File: *mut FILE, _Pos: *const fpos_t) -> libc::c_int;
}
extern "C" {
    pub fn fseek(_File: *mut FILE, _Offset: libc::c_long, _Origin: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn ftell(_File: *mut FILE) -> libc::c_long;
}
extern "C" {
    pub fn fseeko64(stream: *mut FILE, offset: _off64_t, whence: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn fseeko(stream: *mut FILE, offset: _off_t, whence: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn ftello(stream: *mut FILE) -> _off_t;
}
extern "C" {
    pub fn ftello64(stream: *mut FILE) -> _off64_t;
}
extern "C" {
    pub fn fwrite(
        _Str: *const libc::c_void,
        _Size: libc::c_ulonglong,
        _Count: libc::c_ulonglong,
        _File: *mut FILE,
    ) -> libc::c_ulonglong;
}
extern "C" {
    pub fn getc(_File: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn getchar() -> libc::c_int;
}
extern "C" {
    pub fn gets(_Buffer: *mut libc::c_char) -> *mut libc::c_char;
}
extern "C" {
    pub fn perror(_ErrMsg: *const libc::c_char);
}
extern "C" {
    pub fn putc(_Ch: libc::c_int, _File: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn putchar(_Ch: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn puts(_Str: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn remove(_Filename: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn rename(
        _OldFilename: *const libc::c_char,
        _NewFilename: *const libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    pub fn unlink(_Filename: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn rewind(_File: *mut FILE);
}
extern "C" {
    pub fn setbuf(_File: *mut FILE, _Buffer: *mut libc::c_char);
}
extern "C" {
    pub fn setvbuf(
        _File: *mut FILE,
        _Buf: *mut libc::c_char,
        _Mode: libc::c_int,
        _Size: usize,
    ) -> libc::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(_Buffer: *mut libc::c_char) -> *mut libc::c_char;
}
extern "C" {
    pub fn ungetc(_Ch: libc::c_int, _File: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn fgetwc(_File: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn fputwc(_Ch: wchar_t, _File: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn getwc(_File: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn getwchar() -> wint_t;
}
extern "C" {
    pub fn putwc(_Ch: wchar_t, _File: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn putwchar(_Ch: wchar_t) -> wint_t;
}
extern "C" {
    pub fn ungetwc(_Ch: wint_t, _File: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn fgetws(_Dst: *mut wchar_t, _SizeInWords: libc::c_int, _File: *mut FILE) -> *mut wchar_t;
}
extern "C" {
    pub fn fputws(_Str: *const wchar_t, _File: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn tempnam(
        _Directory: *const libc::c_char,
        _FilePrefix: *const libc::c_char,
    ) -> *mut libc::c_char;
}
extern "C" {
    pub fn fcloseall() -> libc::c_int;
}
extern "C" {
    pub fn fdopen(_FileHandle: libc::c_int, _Format: *const libc::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fgetchar() -> libc::c_int;
}
extern "C" {
    pub fn fileno(_File: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn flushall() -> libc::c_int;
}
extern "C" {
    pub fn fputchar(_Ch: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn getw(_File: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn putw(_Ch: libc::c_int, _File: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn rmtmp() -> libc::c_int;
}
extern "C" {
    pub fn clearerr_s(_File: *mut FILE) -> errno_t;
}
extern "C" {
    pub fn fread_s(
        _DstBuf: *mut libc::c_void,
        _DstSize: usize,
        _ElementSize: usize,
        _Count: usize,
        _File: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fprintf_s(_File: *mut FILE, _Format: *const libc::c_char, ...) -> libc::c_int;
}
extern "C" {
    pub fn fscanf_s(_File: *mut FILE, _Format: *const libc::c_char, ...) -> libc::c_int;
}
extern "C" {
    pub fn printf_s(_Format: *const libc::c_char, ...) -> libc::c_int;
}
extern "C" {
    pub fn scanf_s(_Format: *const libc::c_char, ...) -> libc::c_int;
}
extern "C" {
    pub fn sscanf_s(_Src: *const libc::c_char, _Format: *const libc::c_char, ...) -> libc::c_int;
}
extern "C" {
    pub fn vfprintf_s(
        _File: *mut FILE,
        _Format: *const libc::c_char,
        _ArgList: va_list,
    ) -> libc::c_int;
}
extern "C" {
    pub fn vprintf_s(_Format: *const libc::c_char, _ArgList: va_list) -> libc::c_int;
}
extern "C" {
    pub fn vsnprintf_s(
        _DstBuf: *mut libc::c_char,
        _DstSize: usize,
        _MaxCount: usize,
        _Format: *const libc::c_char,
        _ArgList: va_list,
    ) -> libc::c_int;
}
extern "C" {
    pub fn vsprintf_s(
        _DstBuf: *mut libc::c_char,
        _Size: usize,
        _Format: *const libc::c_char,
        _ArgList: va_list,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sprintf_s(
        _DstBuf: *mut libc::c_char,
        _DstSize: usize,
        _Format: *const libc::c_char,
        ...
    ) -> libc::c_int;
}
extern "C" {
    pub fn fopen_s(
        _File: *mut *mut FILE,
        _Filename: *const libc::c_char,
        _Mode: *const libc::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn freopen_s(
        _File: *mut *mut FILE,
        _Filename: *const libc::c_char,
        _Mode: *const libc::c_char,
        _Stream: *mut FILE,
    ) -> errno_t;
}
extern "C" {
    pub fn gets_s(arg1: *mut libc::c_char, arg2: rsize_t) -> *mut libc::c_char;
}
extern "C" {
    pub fn tmpfile_s(_File: *mut *mut FILE) -> errno_t;
}
extern "C" {
    pub fn tmpnam_s(arg1: *mut libc::c_char, arg2: rsize_t) -> errno_t;
}
extern "C" {
    pub fn fwprintf_s(_File: *mut FILE, _Format: *const wchar_t, ...) -> libc::c_int;
}
extern "C" {
    pub fn wprintf_s(_Format: *const wchar_t, ...) -> libc::c_int;
}
extern "C" {
    pub fn vfwprintf_s(_File: *mut FILE, _Format: *const wchar_t, _ArgList: va_list)
        -> libc::c_int;
}
extern "C" {
    pub fn vwprintf_s(_Format: *const wchar_t, _ArgList: va_list) -> libc::c_int;
}
extern "C" {
    pub fn vswprintf_s(
        _Dst: *mut wchar_t,
        _SizeInWords: usize,
        _Format: *const wchar_t,
        _ArgList: va_list,
    ) -> libc::c_int;
}
extern "C" {
    pub fn swprintf_s(
        _Dst: *mut wchar_t,
        _SizeInWords: usize,
        _Format: *const wchar_t,
        ...
    ) -> libc::c_int;
}
extern "C" {
    pub fn fwscanf_s(_File: *mut FILE, _Format: *const wchar_t, ...) -> libc::c_int;
}
extern "C" {
    pub fn swscanf_s(_Src: *const wchar_t, _Format: *const wchar_t, ...) -> libc::c_int;
}
extern "C" {
    pub fn wscanf_s(_Format: *const wchar_t, ...) -> libc::c_int;
}
pub type _onexit_t = ::core::option::Option<unsafe extern "C" fn() -> libc::c_int>;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct _div_t {
    pub quot: libc::c_int,
    pub rem: libc::c_int,
}
#[test]
fn bindgen_test_layout__div_t() {
    const UNINIT: ::core::mem::MaybeUninit<_div_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_div_t>(),
        8usize,
        concat!("Size of: ", stringify!(_div_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_div_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_div_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type div_t = _div_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct _ldiv_t {
    pub quot: libc::c_long,
    pub rem: libc::c_long,
}
#[test]
fn bindgen_test_layout__ldiv_t() {
    const UNINIT: ::core::mem::MaybeUninit<_ldiv_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_ldiv_t>(),
        8usize,
        concat!("Size of: ", stringify!(_ldiv_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_ldiv_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_ldiv_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type ldiv_t = _ldiv_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct _LDOUBLE {
    pub ld: [libc::c_uchar; 10usize],
}
#[test]
fn bindgen_test_layout__LDOUBLE() {
    const UNINIT: ::core::mem::MaybeUninit<_LDOUBLE> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_LDOUBLE>(),
        10usize,
        concat!("Size of: ", stringify!(_LDOUBLE))
    );
    assert_eq!(
        ::core::mem::align_of::<_LDOUBLE>(),
        1usize,
        concat!("Alignment of ", stringify!(_LDOUBLE))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ld) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LDOUBLE),
            "::",
            stringify!(ld)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct _CRT_DOUBLE {
    pub x: f64,
}
#[test]
fn bindgen_test_layout__CRT_DOUBLE() {
    const UNINIT: ::core::mem::MaybeUninit<_CRT_DOUBLE> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_CRT_DOUBLE>(),
        8usize,
        concat!("Size of: ", stringify!(_CRT_DOUBLE))
    );
    assert_eq!(
        ::core::mem::align_of::<_CRT_DOUBLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_CRT_DOUBLE))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CRT_DOUBLE),
            "::",
            stringify!(x)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct _CRT_FLOAT {
    pub f: f32,
}
#[test]
fn bindgen_test_layout__CRT_FLOAT() {
    const UNINIT: ::core::mem::MaybeUninit<_CRT_FLOAT> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_CRT_FLOAT>(),
        4usize,
        concat!("Size of: ", stringify!(_CRT_FLOAT))
    );
    assert_eq!(
        ::core::mem::align_of::<_CRT_FLOAT>(),
        4usize,
        concat!("Alignment of ", stringify!(_CRT_FLOAT))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).f) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CRT_FLOAT),
            "::",
            stringify!(f)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct _LONGDOUBLE {
    pub x: u128,
}
#[test]
fn bindgen_test_layout__LONGDOUBLE() {
    const UNINIT: ::core::mem::MaybeUninit<_LONGDOUBLE> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_LONGDOUBLE>(),
        16usize,
        concat!("Size of: ", stringify!(_LONGDOUBLE))
    );
    assert_eq!(
        ::core::mem::align_of::<_LONGDOUBLE>(),
        16usize,
        concat!("Alignment of ", stringify!(_LONGDOUBLE))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LONGDOUBLE),
            "::",
            stringify!(x)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct _LDBL12 {
    pub ld12: [libc::c_uchar; 12usize],
}
#[test]
fn bindgen_test_layout__LDBL12() {
    const UNINIT: ::core::mem::MaybeUninit<_LDBL12> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_LDBL12>(),
        12usize,
        concat!("Size of: ", stringify!(_LDBL12))
    );
    assert_eq!(
        ::core::mem::align_of::<_LDBL12>(),
        1usize,
        concat!("Alignment of ", stringify!(_LDBL12))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ld12) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LDBL12),
            "::",
            stringify!(ld12)
        )
    );
}
extern "C" {
    pub static mut __imp___mb_cur_max: *mut libc::c_int;
}
pub type _purecall_handler = ::core::option::Option<unsafe extern "C" fn()>;
pub type _invalid_parameter_handler = ::core::option::Option<
    unsafe extern "C" fn(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        arg3: *const wchar_t,
        arg4: libc::c_uint,
        arg5: usize,
    ),
>;
extern "C" {
    pub static mut _sys_errlist: [*mut libc::c_char; 1usize];
}
extern "C" {
    pub static mut _sys_nerr: libc::c_int;
}
extern "C" {
    pub static mut __imp___argc: *mut libc::c_int;
}
extern "C" {
    pub static mut __imp___argv: *mut *mut *mut libc::c_char;
}
extern "C" {
    pub static mut __imp___wargv: *mut *mut *mut wchar_t;
}
extern "C" {
    pub static mut __imp__environ: *mut *mut *mut libc::c_char;
}
extern "C" {
    pub static mut __imp__wenviron: *mut *mut *mut wchar_t;
}
extern "C" {
    pub static mut __imp__pgmptr: *mut *mut libc::c_char;
}
extern "C" {
    pub static mut __imp__wpgmptr: *mut *mut wchar_t;
}
extern "C" {
    pub static mut __imp__osplatform: *mut libc::c_uint;
}
extern "C" {
    pub static mut __imp__osver: *mut libc::c_uint;
}
extern "C" {
    pub static mut __imp__winver: *mut libc::c_uint;
}
extern "C" {
    pub static mut __imp__winmajor: *mut libc::c_uint;
}
extern "C" {
    pub static mut __imp__winminor: *mut libc::c_uint;
}
extern "C" {
    pub fn exit(_Code: libc::c_int) -> !;
}
extern "C" {
    pub fn abort() -> !;
}
extern "C" {
    pub fn abs(_X: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn labs(_X: libc::c_long) -> libc::c_long;
}
extern "C" {
    pub fn atexit(arg1: ::core::option::Option<unsafe extern "C" fn()>) -> libc::c_int;
}
extern "C" {
    pub fn atof(_String: *const libc::c_char) -> f64;
}
extern "C" {
    pub fn atoi(_Str: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn atol(_Str: *const libc::c_char) -> libc::c_long;
}
extern "C" {
    pub fn bsearch(
        _Key: *const libc::c_void,
        _Base: *const libc::c_void,
        _NumOfElements: usize,
        _SizeOfElements: usize,
        _PtFuncCompare: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *const libc::c_void,
                arg2: *const libc::c_void,
            ) -> libc::c_int,
        >,
    ) -> *mut libc::c_void;
}
extern "C" {
    pub fn qsort(
        _Base: *mut libc::c_void,
        _NumOfElements: usize,
        _SizeOfElements: usize,
        _PtFuncCompare: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *const libc::c_void,
                arg2: *const libc::c_void,
            ) -> libc::c_int,
        >,
    );
}
extern "C" {
    pub fn div(_Numerator: libc::c_int, _Denominator: libc::c_int) -> div_t;
}
extern "C" {
    pub fn getenv(_VarName: *const libc::c_char) -> *mut libc::c_char;
}
extern "C" {
    pub fn ldiv(_Numerator: libc::c_long, _Denominator: libc::c_long) -> ldiv_t;
}
extern "C" {
    pub fn mblen(_Ch: *const libc::c_char, _MaxCount: usize) -> libc::c_int;
}
extern "C" {
    pub fn mbtowc(
        _DstCh: *mut wchar_t,
        _SrcCh: *const libc::c_char,
        _SrcSizeInBytes: usize,
    ) -> libc::c_int;
}
extern "C" {
    pub fn mbstowcs(_Dest: *mut wchar_t, _Source: *const libc::c_char, _MaxCount: usize) -> usize;
}
extern "C" {
    pub fn mkstemp(template_name: *mut libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn rand() -> libc::c_int;
}
extern "C" {
    pub fn srand(_Seed: libc::c_uint);
}
extern "C" {
    pub fn strtol(
        _Str: *const libc::c_char,
        _EndPtr: *mut *mut libc::c_char,
        _Radix: libc::c_int,
    ) -> libc::c_long;
}
extern "C" {
    pub fn strtoul(
        _Str: *const libc::c_char,
        _EndPtr: *mut *mut libc::c_char,
        _Radix: libc::c_int,
    ) -> libc::c_ulong;
}
extern "C" {
    pub fn system(_Command: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn wctomb(_MbCh: *mut libc::c_char, _WCh: wchar_t) -> libc::c_int;
}
extern "C" {
    pub fn wcstombs(_Dest: *mut libc::c_char, _Source: *const wchar_t, _MaxCount: usize) -> usize;
}
extern "C" {
    pub fn calloc(
        _NumOfElements: libc::c_ulonglong,
        _SizeOfElements: libc::c_ulonglong,
    ) -> *mut libc::c_void;
}
extern "C" {
    pub fn free(_Memory: *mut libc::c_void);
}
extern "C" {
    pub fn malloc(_Size: libc::c_ulonglong) -> *mut libc::c_void;
}
extern "C" {
    pub fn realloc(_Memory: *mut libc::c_void, _NewSize: libc::c_ulonglong) -> *mut libc::c_void;
}
extern "C" {
    pub fn wcstol(
        _Str: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: libc::c_int,
    ) -> libc::c_long;
}
extern "C" {
    pub fn wcstoul(
        _Str: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: libc::c_int,
    ) -> libc::c_ulong;
}
extern "C" {
    pub fn ecvt(
        _Val: f64,
        _NumOfDigits: libc::c_int,
        _PtDec: *mut libc::c_int,
        _PtSign: *mut libc::c_int,
    ) -> *mut libc::c_char;
}
extern "C" {
    pub fn fcvt(
        _Val: f64,
        _NumOfDec: libc::c_int,
        _PtDec: *mut libc::c_int,
        _PtSign: *mut libc::c_int,
    ) -> *mut libc::c_char;
}
extern "C" {
    pub fn gcvt(
        _Val: f64,
        _NumOfDigits: libc::c_int,
        _DstBuf: *mut libc::c_char,
    ) -> *mut libc::c_char;
}
extern "C" {
    pub fn itoa(
        _Val: libc::c_int,
        _DstBuf: *mut libc::c_char,
        _Radix: libc::c_int,
    ) -> *mut libc::c_char;
}
extern "C" {
    pub fn ltoa(
        _Val: libc::c_long,
        _DstBuf: *mut libc::c_char,
        _Radix: libc::c_int,
    ) -> *mut libc::c_char;
}
extern "C" {
    pub fn putenv(_EnvString: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn swab(_Buf1: *mut libc::c_char, _Buf2: *mut libc::c_char, _SizeInBytes: libc::c_int);
}
extern "C" {
    pub fn ultoa(
        _Val: libc::c_ulong,
        _Dstbuf: *mut libc::c_char,
        _Radix: libc::c_int,
    ) -> *mut libc::c_char;
}
extern "C" {
    pub fn onexit(_Func: _onexit_t) -> _onexit_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct lldiv_t {
    pub quot: libc::c_longlong,
    pub rem: libc::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    const UNINIT: ::core::mem::MaybeUninit<lldiv_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::core::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn lldiv(arg1: libc::c_longlong, arg2: libc::c_longlong) -> lldiv_t;
}
extern "C" {
    pub fn llabs(arg1: libc::c_longlong) -> libc::c_longlong;
}
extern "C" {
    pub fn strtoll(
        arg1: *const libc::c_char,
        arg2: *mut *mut libc::c_char,
        arg3: libc::c_int,
    ) -> libc::c_longlong;
}
extern "C" {
    pub fn strtoull(
        arg1: *const libc::c_char,
        arg2: *mut *mut libc::c_char,
        arg3: libc::c_int,
    ) -> libc::c_ulonglong;
}
extern "C" {
    pub fn atoll(arg1: *const libc::c_char) -> libc::c_longlong;
}
extern "C" {
    pub fn wtoll(arg1: *const wchar_t) -> libc::c_longlong;
}
extern "C" {
    pub fn lltoa(
        arg1: libc::c_longlong,
        arg2: *mut libc::c_char,
        arg3: libc::c_int,
    ) -> *mut libc::c_char;
}
extern "C" {
    pub fn ulltoa(
        arg1: libc::c_ulonglong,
        arg2: *mut libc::c_char,
        arg3: libc::c_int,
    ) -> *mut libc::c_char;
}
extern "C" {
    pub fn lltow(arg1: libc::c_longlong, arg2: *mut wchar_t, arg3: libc::c_int) -> *mut wchar_t;
}
extern "C" {
    pub fn ulltow(arg1: libc::c_ulonglong, arg2: *mut wchar_t, arg3: libc::c_int) -> *mut wchar_t;
}
extern "C" {
    pub fn bsearch_s(
        _Key: *const libc::c_void,
        _Base: *const libc::c_void,
        _NumOfElements: rsize_t,
        _SizeOfElements: rsize_t,
        _PtFuncCompare: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut libc::c_void,
                arg2: *const libc::c_void,
                arg3: *const libc::c_void,
            ) -> libc::c_int,
        >,
        _Context: *mut libc::c_void,
    ) -> *mut libc::c_void;
}
extern "C" {
    pub fn getenv_s(
        _ReturnSize: *mut usize,
        _DstBuf: *mut libc::c_char,
        _DstSize: rsize_t,
        _VarName: *const libc::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn mbstowcs_s(
        _PtNumOfCharConverted: *mut usize,
        _DstBuf: *mut wchar_t,
        _SizeInWords: usize,
        _SrcBuf: *const libc::c_char,
        _MaxCount: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn wctomb_s(
        _SizeConverted: *mut libc::c_int,
        _MbCh: *mut libc::c_char,
        _SizeInBytes: rsize_t,
        _WCh: wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstombs_s(
        _PtNumOfCharConverted: *mut usize,
        _Dst: *mut libc::c_char,
        _DstSizeInBytes: usize,
        _Src: *const wchar_t,
        _MaxCountInBytes: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn qsort_s(
        _Base: *mut libc::c_void,
        _NumOfElements: usize,
        _SizeOfElements: usize,
        _PtFuncCompare: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut libc::c_void,
                arg2: *const libc::c_void,
                arg3: *const libc::c_void,
            ) -> libc::c_int,
        >,
        _Context: *mut libc::c_void,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct _heapinfo {
    pub _pentry: *mut libc::c_int,
    pub _size: usize,
    pub _useflag: libc::c_int,
}
#[test]
fn bindgen_test_layout__heapinfo() {
    const UNINIT: ::core::mem::MaybeUninit<_heapinfo> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_heapinfo>(),
        24usize,
        concat!("Size of: ", stringify!(_heapinfo))
    );
    assert_eq!(
        ::core::mem::align_of::<_heapinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(_heapinfo))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._pentry) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_heapinfo),
            "::",
            stringify!(_pentry)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_heapinfo),
            "::",
            stringify!(_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._useflag) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_heapinfo),
            "::",
            stringify!(_useflag)
        )
    );
}
pub type _HEAPINFO = _heapinfo;
extern "C" {
    pub static mut _amblksiz: libc::c_uint;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mingw_dbl_type_t {
    pub x: f64,
    pub val: libc::c_ulonglong,
    pub lh: __mingw_dbl_type_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct __mingw_dbl_type_t__bindgen_ty_1 {
    pub low: libc::c_uint,
    pub high: libc::c_uint,
}
#[test]
fn bindgen_test_layout___mingw_dbl_type_t__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<__mingw_dbl_type_t__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__mingw_dbl_type_t__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__mingw_dbl_type_t__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<__mingw_dbl_type_t__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__mingw_dbl_type_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).low) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mingw_dbl_type_t__bindgen_ty_1),
            "::",
            stringify!(low)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).high) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mingw_dbl_type_t__bindgen_ty_1),
            "::",
            stringify!(high)
        )
    );
}
#[test]
fn bindgen_test_layout___mingw_dbl_type_t() {
    const UNINIT: ::core::mem::MaybeUninit<__mingw_dbl_type_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__mingw_dbl_type_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mingw_dbl_type_t))
    );
    assert_eq!(
        ::core::mem::align_of::<__mingw_dbl_type_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mingw_dbl_type_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mingw_dbl_type_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mingw_dbl_type_t),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lh) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mingw_dbl_type_t),
            "::",
            stringify!(lh)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mingw_flt_type_t {
    pub x: f32,
    pub val: libc::c_uint,
}
#[test]
fn bindgen_test_layout___mingw_flt_type_t() {
    const UNINIT: ::core::mem::MaybeUninit<__mingw_flt_type_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__mingw_flt_type_t>(),
        4usize,
        concat!("Size of: ", stringify!(__mingw_flt_type_t))
    );
    assert_eq!(
        ::core::mem::align_of::<__mingw_flt_type_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mingw_flt_type_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mingw_flt_type_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mingw_flt_type_t),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct __mingw_ldbl_type_t__bindgen_ty_1 {
    pub low: libc::c_uint,
    pub high: libc::c_uint,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[test]
fn bindgen_test_layout___mingw_ldbl_type_t__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<__mingw_ldbl_type_t__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__mingw_ldbl_type_t__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(__mingw_ldbl_type_t__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<__mingw_ldbl_type_t__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__mingw_ldbl_type_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).low) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mingw_ldbl_type_t__bindgen_ty_1),
            "::",
            stringify!(low)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).high) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mingw_ldbl_type_t__bindgen_ty_1),
            "::",
            stringify!(high)
        )
    );
}
impl __mingw_ldbl_type_t__bindgen_ty_1 {
    #[inline]
    pub fn sign_exponent(&self) -> libc::c_int {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_sign_exponent(&mut self, val: libc::c_int) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn res1(&self) -> libc::c_int {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_res1(&mut self, val: libc::c_int) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn res0(&self) -> libc::c_int {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(32usize, 32u8) as u32) }
    }
    #[inline]
    pub fn set_res0(&mut self, val: libc::c_int) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(32usize, 32u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        sign_exponent: libc::c_int,
        res1: libc::c_int,
        res0: libc::c_int,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let sign_exponent: u32 = unsafe { ::core::mem::transmute(sign_exponent) };
            sign_exponent as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let res1: u32 = unsafe { ::core::mem::transmute(res1) };
            res1 as u64
        });
        __bindgen_bitfield_unit.set(32usize, 32u8, {
            let res0: u32 = unsafe { ::core::mem::transmute(res0) };
            res0 as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub static mut __imp__HUGE: *mut f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct _exception {
    pub type_: libc::c_int,
    pub name: *const libc::c_char,
    pub arg1: f64,
    pub arg2: f64,
    pub retval: f64,
}
#[test]
fn bindgen_test_layout__exception() {
    const UNINIT: ::core::mem::MaybeUninit<_exception> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_exception>(),
        40usize,
        concat!("Size of: ", stringify!(_exception))
    );
    assert_eq!(
        ::core::mem::align_of::<_exception>(),
        8usize,
        concat!("Alignment of ", stringify!(_exception))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_exception),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_exception),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).arg1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_exception),
            "::",
            stringify!(arg1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).arg2) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_exception),
            "::",
            stringify!(arg2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).retval) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_exception),
            "::",
            stringify!(retval)
        )
    );
}
extern "C" {
    pub fn sin(_X: f64) -> f64;
}
extern "C" {
    pub fn cos(_X: f64) -> f64;
}
extern "C" {
    pub fn tan(_X: f64) -> f64;
}
extern "C" {
    pub fn sinh(_X: f64) -> f64;
}
extern "C" {
    pub fn cosh(_X: f64) -> f64;
}
extern "C" {
    pub fn tanh(_X: f64) -> f64;
}
extern "C" {
    pub fn asin(_X: f64) -> f64;
}
extern "C" {
    pub fn acos(_X: f64) -> f64;
}
extern "C" {
    pub fn atan(_X: f64) -> f64;
}
extern "C" {
    pub fn atan2(_Y: f64, _X: f64) -> f64;
}
extern "C" {
    pub fn exp(_X: f64) -> f64;
}
extern "C" {
    pub fn log(_X: f64) -> f64;
}
extern "C" {
    pub fn log10(_X: f64) -> f64;
}
extern "C" {
    pub fn pow(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn sqrt(_X: f64) -> f64;
}
extern "C" {
    pub fn ceil(_X: f64) -> f64;
}
extern "C" {
    pub fn floor(_X: f64) -> f64;
}
extern "C" {
    pub fn fabsf(x: f32) -> f32;
}
extern "C" {
    pub fn fabs(_X: f64) -> f64;
}
extern "C" {
    pub fn ldexp(_X: f64, _Y: libc::c_int) -> f64;
}
extern "C" {
    pub fn frexp(_X: f64, _Y: *mut libc::c_int) -> f64;
}
extern "C" {
    pub fn modf(_X: f64, _Y: *mut f64) -> f64;
}
extern "C" {
    pub fn fmod(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn sincos(__x: f64, p_sin: *mut f64, p_cos: *mut f64);
}
extern "C" {
    pub fn sincosf(__x: f32, p_sin: *mut f32, p_cos: *mut f32);
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct _complex {
    pub x: f64,
    pub y: f64,
}
#[test]
fn bindgen_test_layout__complex() {
    const UNINIT: ::core::mem::MaybeUninit<_complex> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_complex>(),
        16usize,
        concat!("Size of: ", stringify!(_complex))
    );
    assert_eq!(
        ::core::mem::align_of::<_complex>(),
        8usize,
        concat!("Alignment of ", stringify!(_complex))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_complex),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_complex),
            "::",
            stringify!(y)
        )
    );
}
extern "C" {
    pub fn j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn jn(arg1: libc::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn yn(arg1: libc::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn chgsign(arg1: f64) -> f64;
}
extern "C" {
    pub fn finite(arg1: f64) -> libc::c_int;
}
extern "C" {
    pub fn fpclass(arg1: f64) -> libc::c_int;
}
pub type float_t = f32;
pub type double_t = f64;
extern "C" {
    pub fn sinf(_X: f32) -> f32;
}
extern "C" {
    pub fn cosf(_X: f32) -> f32;
}
extern "C" {
    pub fn tanf(_X: f32) -> f32;
}
extern "C" {
    pub fn asinf(_X: f32) -> f32;
}
extern "C" {
    pub fn acosf(arg1: f32) -> f32;
}
extern "C" {
    pub fn atanf(arg1: f32) -> f32;
}
extern "C" {
    pub fn atan2f(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn sinhf(_X: f32) -> f32;
}
extern "C" {
    pub fn coshf(_X: f32) -> f32;
}
extern "C" {
    pub fn tanhf(_X: f32) -> f32;
}
extern "C" {
    pub fn acosh(arg1: f64) -> f64;
}
extern "C" {
    pub fn acoshf(arg1: f32) -> f32;
}
extern "C" {
    pub fn asinh(arg1: f64) -> f64;
}
extern "C" {
    pub fn asinhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn atanh(arg1: f64) -> f64;
}
extern "C" {
    pub fn atanhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn expf(_X: f32) -> f32;
}
extern "C" {
    pub fn exp2(arg1: f64) -> f64;
}
extern "C" {
    pub fn exp2f(arg1: f32) -> f32;
}
extern "C" {
    pub fn expm1(arg1: f64) -> f64;
}
extern "C" {
    pub fn expm1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn frexpf(_X: f32, _Y: *mut libc::c_int) -> f32;
}
extern "C" {
    pub fn ilogb(arg1: f64) -> libc::c_int;
}
extern "C" {
    pub fn ilogbf(arg1: f32) -> libc::c_int;
}
extern "C" {
    pub fn ldexpf(_X: f32, _Y: libc::c_int) -> f32;
}
extern "C" {
    pub fn logf(arg1: f32) -> f32;
}
extern "C" {
    pub fn log10f(arg1: f32) -> f32;
}
extern "C" {
    pub fn log1p(arg1: f64) -> f64;
}
extern "C" {
    pub fn log1pf(arg1: f32) -> f32;
}
extern "C" {
    pub fn log2(arg1: f64) -> f64;
}
extern "C" {
    pub fn log2f(arg1: f32) -> f32;
}
extern "C" {
    pub fn logb(arg1: f64) -> f64;
}
extern "C" {
    pub fn logbf(arg1: f32) -> f32;
}
extern "C" {
    pub fn modff(arg1: f32, arg2: *mut f32) -> f32;
}
extern "C" {
    pub fn scalbn(arg1: f64, arg2: libc::c_int) -> f64;
}
extern "C" {
    pub fn scalbnf(arg1: f32, arg2: libc::c_int) -> f32;
}
extern "C" {
    pub fn scalbln(arg1: f64, arg2: libc::c_long) -> f64;
}
extern "C" {
    pub fn scalblnf(arg1: f32, arg2: libc::c_long) -> f32;
}
extern "C" {
    pub fn cbrt(arg1: f64) -> f64;
}
extern "C" {
    pub fn cbrtf(arg1: f32) -> f32;
}
extern "C" {
    pub fn hypot(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn hypotf(x: f32, y: f32) -> f32;
}
extern "C" {
    pub fn powf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn sqrtf(arg1: f32) -> f32;
}
extern "C" {
    pub fn erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub static mut signgam: libc::c_int;
}
extern "C" {
    pub fn tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn ceilf(arg1: f32) -> f32;
}
extern "C" {
    pub fn floorf(arg1: f32) -> f32;
}
extern "C" {
    pub fn nearbyint(arg1: f64) -> f64;
}
extern "C" {
    pub fn nearbyintf(arg1: f32) -> f32;
}
extern "C" {
    pub fn rint(arg1: f64) -> f64;
}
extern "C" {
    pub fn rintf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lrint(arg1: f64) -> libc::c_long;
}
extern "C" {
    pub fn lrintf(arg1: f32) -> libc::c_long;
}
extern "C" {
    pub fn llrint(arg1: f64) -> libc::c_longlong;
}
extern "C" {
    pub fn llrintf(arg1: f32) -> libc::c_longlong;
}
extern "C" {
    pub fn round(arg1: f64) -> f64;
}
extern "C" {
    pub fn roundf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lround(arg1: f64) -> libc::c_long;
}
extern "C" {
    pub fn lroundf(arg1: f32) -> libc::c_long;
}
extern "C" {
    pub fn llround(arg1: f64) -> libc::c_longlong;
}
extern "C" {
    pub fn llroundf(arg1: f32) -> libc::c_longlong;
}
extern "C" {
    pub fn trunc(arg1: f64) -> f64;
}
extern "C" {
    pub fn truncf(arg1: f32) -> f32;
}
extern "C" {
    pub fn fmodf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn remainder(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn remainderf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn remquo(arg1: f64, arg2: f64, arg3: *mut libc::c_int) -> f64;
}
extern "C" {
    pub fn remquof(arg1: f32, arg2: f32, arg3: *mut libc::c_int) -> f32;
}
extern "C" {
    pub fn copysign(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn copysignf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn nan(tagp: *const libc::c_char) -> f64;
}
extern "C" {
    pub fn nanf(tagp: *const libc::c_char) -> f32;
}
extern "C" {
    pub fn nextafter(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn nextafterf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fdim(x: f64, y: f64) -> f64;
}
extern "C" {
    pub fn fdimf(x: f32, y: f32) -> f32;
}
extern "C" {
    pub fn fmax(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fmaxf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fmin(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fminf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fma(arg1: f64, arg2: f64, arg3: f64) -> f64;
}
extern "C" {
    pub fn fmaf(arg1: f32, arg2: f32, arg3: f32) -> f32;
}
pub type _ino_t = libc::c_ushort;
pub type ino_t = libc::c_ushort;
pub type _dev_t = libc::c_uint;
pub type dev_t = libc::c_uint;
pub type _pid_t = libc::c_longlong;
pub type pid_t = _pid_t;
pub type _mode_t = libc::c_ushort;
pub type mode_t = _mode_t;
pub type useconds_t = libc::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct timespec {
    pub tv_sec: time_t,
    pub tv_nsec: libc::c_long,
}
#[test]
fn bindgen_test_layout_timespec() {
    const UNINIT: ::core::mem::MaybeUninit<timespec> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::core::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[test]
fn bindgen_test_layout_itimerspec() {
    const UNINIT: ::core::mem::MaybeUninit<itimerspec> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<itimerspec>(),
        32usize,
        concat!("Size of: ", stringify!(itimerspec))
    );
    assert_eq!(
        ::core::mem::align_of::<itimerspec>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerspec))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).it_interval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).it_value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_value)
        )
    );
}
pub type _sigset_t = libc::c_ulonglong;
extern "C" {
    pub fn strcpy(_Dest: *mut libc::c_char, _Source: *const libc::c_char) -> *mut libc::c_char;
}
extern "C" {
    pub fn strcat(_Dest: *mut libc::c_char, _Source: *const libc::c_char) -> *mut libc::c_char;
}
extern "C" {
    pub fn strcmp(_Str1: *const libc::c_char, _Str2: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn strlen(_Str: *const libc::c_char) -> libc::c_ulonglong;
}
extern "C" {
    pub fn strnlen(_Str: *const libc::c_char, _MaxCount: usize) -> usize;
}
extern "C" {
    pub fn memmove(
        _Dst: *mut libc::c_void,
        _Src: *const libc::c_void,
        _Size: libc::c_ulonglong,
    ) -> *mut libc::c_void;
}
extern "C" {
    pub fn strchr(_Str: *const libc::c_char, _Val: libc::c_int) -> *mut libc::c_char;
}
extern "C" {
    pub fn strcoll(_Str1: *const libc::c_char, _Str2: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn strcspn(_Str: *const libc::c_char, _Control: *const libc::c_char) -> libc::c_ulonglong;
}
extern "C" {
    pub fn strerror(arg1: libc::c_int) -> *mut libc::c_char;
}
extern "C" {
    pub fn strlwr_l(_String: *mut libc::c_char, _Locale: _locale_t) -> *mut libc::c_char;
}
extern "C" {
    pub fn strncat(
        _Dest: *mut libc::c_char,
        _Source: *const libc::c_char,
        _Count: libc::c_ulonglong,
    ) -> *mut libc::c_char;
}
extern "C" {
    pub fn strncmp(
        _Str1: *const libc::c_char,
        _Str2: *const libc::c_char,
        _MaxCount: libc::c_ulonglong,
    ) -> libc::c_int;
}
extern "C" {
    pub fn strncpy(
        _Dest: *mut libc::c_char,
        _Source: *const libc::c_char,
        _Count: libc::c_ulonglong,
    ) -> *mut libc::c_char;
}
extern "C" {
    pub fn strpbrk(_Str: *const libc::c_char, _Control: *const libc::c_char) -> *mut libc::c_char;
}
extern "C" {
    pub fn strrchr(_Str: *const libc::c_char, _Ch: libc::c_int) -> *mut libc::c_char;
}
extern "C" {
    pub fn strspn(_Str: *const libc::c_char, _Control: *const libc::c_char) -> libc::c_ulonglong;
}
extern "C" {
    pub fn strstr(_Str: *const libc::c_char, _SubStr: *const libc::c_char) -> *mut libc::c_char;
}
extern "C" {
    pub fn strtok(_Str: *mut libc::c_char, _Delim: *const libc::c_char) -> *mut libc::c_char;
}
extern "C" {
    pub fn strtok_r(
        _Str: *mut libc::c_char,
        _Delim: *const libc::c_char,
        __last: *mut *mut libc::c_char,
    ) -> *mut libc::c_char;
}
extern "C" {
    pub fn strxfrm(
        _Dst: *mut libc::c_char,
        _Src: *const libc::c_char,
        _MaxCount: libc::c_ulonglong,
    ) -> libc::c_ulonglong;
}
extern "C" {
    pub fn strdup(_Src: *const libc::c_char) -> *mut libc::c_char;
}
extern "C" {
    pub fn strcmpi(_Str1: *const libc::c_char, _Str2: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn stricmp(_Str1: *const libc::c_char, _Str2: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn strlwr(_Str: *mut libc::c_char) -> *mut libc::c_char;
}
extern "C" {
    pub fn strnicmp(
        _Str1: *const libc::c_char,
        _Str: *const libc::c_char,
        _MaxCount: usize,
    ) -> libc::c_int;
}
extern "C" {
    pub fn strncasecmp(
        arg1: *const libc::c_char,
        arg2: *const libc::c_char,
        arg3: libc::c_ulonglong,
    ) -> libc::c_int;
}
extern "C" {
    pub fn strcasecmp(arg1: *const libc::c_char, arg2: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn strnset(
        _Str: *mut libc::c_char,
        _Val: libc::c_int,
        _MaxCount: usize,
    ) -> *mut libc::c_char;
}
extern "C" {
    pub fn strrev(_Str: *mut libc::c_char) -> *mut libc::c_char;
}
extern "C" {
    pub fn strset(_Str: *mut libc::c_char, _Val: libc::c_int) -> *mut libc::c_char;
}
extern "C" {
    pub fn strupr(_Str: *mut libc::c_char) -> *mut libc::c_char;
}
extern "C" {
    pub fn wcscat(_Dest: *mut wchar_t, _Source: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcschr(_Str: *const libc::c_ushort, _Ch: libc::c_ushort) -> *mut libc::c_ushort;
}
extern "C" {
    pub fn wcscmp(_Str1: *const libc::c_ushort, _Str2: *const libc::c_ushort) -> libc::c_int;
}
extern "C" {
    pub fn wcscpy(_Dest: *mut wchar_t, _Source: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscspn(_Str: *const wchar_t, _Control: *const wchar_t) -> usize;
}
extern "C" {
    pub fn wcslen(_Str: *const libc::c_ushort) -> libc::c_ulonglong;
}
extern "C" {
    pub fn wcsnlen(_Src: *const wchar_t, _MaxCount: usize) -> usize;
}
extern "C" {
    pub fn wcsncat(_Dest: *mut wchar_t, _Source: *const wchar_t, _Count: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsncmp(
        _Str1: *const libc::c_ushort,
        _Str2: *const libc::c_ushort,
        _MaxCount: libc::c_ulonglong,
    ) -> libc::c_int;
}
extern "C" {
    pub fn wcsncpy(_Dest: *mut wchar_t, _Source: *const wchar_t, _Count: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wcspbrk(_Str: *const wchar_t, _Control: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsrchr(_Str: *const wchar_t, _Ch: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsspn(_Str: *const wchar_t, _Control: *const wchar_t) -> usize;
}
extern "C" {
    pub fn wcsstr(_Str: *const wchar_t, _SubStr: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcstok(_Str: *mut wchar_t, _Delim: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsxfrm(_Dst: *mut wchar_t, _Src: *const wchar_t, _MaxCount: usize) -> usize;
}
extern "C" {
    pub fn wcscoll(_Str1: *const wchar_t, _Str2: *const wchar_t) -> libc::c_int;
}
extern "C" {
    pub fn wcsdup(_Str: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsicmp(_Str1: *const wchar_t, _Str2: *const wchar_t) -> libc::c_int;
}
extern "C" {
    pub fn wcsnicmp(_Str1: *const wchar_t, _Str2: *const wchar_t, _MaxCount: usize) -> libc::c_int;
}
extern "C" {
    pub fn wcsnset(_Str: *mut wchar_t, _Val: wchar_t, _MaxCount: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsrev(_Str: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsset(_Str: *mut wchar_t, _Val: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcslwr(_Str: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsupr(_Str: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsicoll(_Str1: *const wchar_t, _Str2: *const wchar_t) -> libc::c_int;
}
extern "C" {
    pub fn strerror_s(
        _Buf: *mut libc::c_char,
        _SizeInBytes: usize,
        _ErrNum: libc::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn strncat_s(
        _Dst: *mut libc::c_char,
        _DstSizeInChars: usize,
        _Src: *const libc::c_char,
        _MaxCount: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn strcpy_s(
        _Dst: *mut libc::c_char,
        _SizeInBytes: rsize_t,
        _Src: *const libc::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn strncpy_s(
        _Dst: *mut libc::c_char,
        _DstSizeInChars: usize,
        _Src: *const libc::c_char,
        _MaxCount: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn strtok_s(
        _Str: *mut libc::c_char,
        _Delim: *const libc::c_char,
        _Context: *mut *mut libc::c_char,
    ) -> *mut libc::c_char;
}
extern "C" {
    pub fn strcat_s(
        _Dst: *mut libc::c_char,
        _SizeInBytes: rsize_t,
        _Src: *const libc::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn memmove_s(
        _dest: *mut libc::c_void,
        _numberOfElements: usize,
        _src: *const libc::c_void,
        _count: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstok_s(
        _Str: *mut wchar_t,
        _Delim: *const wchar_t,
        _Context: *mut *mut wchar_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscpy_s(_Dst: *mut wchar_t, _SizeInWords: rsize_t, _Src: *const wchar_t) -> errno_t;
}
extern "C" {
    pub fn wcscat_s(_Dst: *mut wchar_t, _SizeInWords: rsize_t, _Src: *const wchar_t) -> errno_t;
}
extern "C" {
    pub fn wcsncat_s(
        _Dst: *mut wchar_t,
        _DstSizeInChars: usize,
        _Src: *const wchar_t,
        _MaxCount: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn wcsncpy_s(
        _Dst: *mut wchar_t,
        _DstSizeInChars: usize,
        _Src: *const wchar_t,
        _MaxCount: usize,
    ) -> errno_t;
}
pub type int_least8_t = libc::c_schar;
pub type uint_least8_t = libc::c_uchar;
pub type int_least16_t = libc::c_short;
pub type uint_least16_t = libc::c_ushort;
pub type int_least32_t = libc::c_int;
pub type uint_least32_t = libc::c_uint;
pub type int_least64_t = libc::c_longlong;
pub type uint_least64_t = libc::c_ulonglong;
pub type int_fast8_t = libc::c_schar;
pub type uint_fast8_t = libc::c_uchar;
pub type int_fast16_t = libc::c_short;
pub type uint_fast16_t = libc::c_ushort;
pub type int_fast32_t = libc::c_int;
pub type uint_fast32_t = libc::c_uint;
pub type int_fast64_t = libc::c_longlong;
pub type uint_fast64_t = libc::c_ulonglong;
pub type intmax_t = libc::c_longlong;
pub type uintmax_t = libc::c_ulonglong;
pub const LibRaw_openbayer_patterns_LIBRAW_OPENBAYER_RGGB: LibRaw_openbayer_patterns = 148;
pub const LibRaw_openbayer_patterns_LIBRAW_OPENBAYER_BGGR: LibRaw_openbayer_patterns = 22;
pub const LibRaw_openbayer_patterns_LIBRAW_OPENBAYER_GRBG: LibRaw_openbayer_patterns = 97;
pub const LibRaw_openbayer_patterns_LIBRAW_OPENBAYER_GBRG: LibRaw_openbayer_patterns = 73;
pub type LibRaw_openbayer_patterns = libc::c_uint;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_FORWARDMATRIX: LibRaw_dngfields_marks = 1;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_ILLUMINANT: LibRaw_dngfields_marks = 2;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_COLORMATRIX: LibRaw_dngfields_marks = 4;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_CALIBRATION: LibRaw_dngfields_marks = 8;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_ANALOGBALANCE: LibRaw_dngfields_marks = 16;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_BLACK: LibRaw_dngfields_marks = 32;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_WHITE: LibRaw_dngfields_marks = 64;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_OPCODE2: LibRaw_dngfields_marks = 128;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_LINTABLE: LibRaw_dngfields_marks = 256;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_CROPORIGIN: LibRaw_dngfields_marks = 512;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_CROPSIZE: LibRaw_dngfields_marks = 1024;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_PREVIEWCS: LibRaw_dngfields_marks = 2048;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_ASSHOTNEUTRAL: LibRaw_dngfields_marks = 4096;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_BASELINEEXPOSURE: LibRaw_dngfields_marks = 8192;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_LINEARRESPONSELIMIT: LibRaw_dngfields_marks = 16384;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_USERCROP: LibRaw_dngfields_marks = 32768;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_OPCODE1: LibRaw_dngfields_marks = 65536;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_OPCODE3: LibRaw_dngfields_marks = 131072;
pub type LibRaw_dngfields_marks = libc::c_uint;
pub const LibRaw_As_Shot_WB_Applied_codes_LIBRAW_ASWB_APPLIED: LibRaw_As_Shot_WB_Applied_codes = 1;
pub const LibRaw_As_Shot_WB_Applied_codes_LIBRAW_ASWB_CANON: LibRaw_As_Shot_WB_Applied_codes = 2;
pub const LibRaw_As_Shot_WB_Applied_codes_LIBRAW_ASWB_NIKON: LibRaw_As_Shot_WB_Applied_codes = 4;
pub const LibRaw_As_Shot_WB_Applied_codes_LIBRAW_ASWB_NIKON_SRAW: LibRaw_As_Shot_WB_Applied_codes =
    8;
pub const LibRaw_As_Shot_WB_Applied_codes_LIBRAW_ASWB_PENTAX: LibRaw_As_Shot_WB_Applied_codes = 16;
pub type LibRaw_As_Shot_WB_Applied_codes = libc::c_uint;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_UNKNOWN: LibRaw_ExifTagTypes = 0;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_BYTE: LibRaw_ExifTagTypes = 1;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_ASCII: LibRaw_ExifTagTypes = 2;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_SHORT: LibRaw_ExifTagTypes = 3;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_LONG: LibRaw_ExifTagTypes = 4;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_RATIONAL: LibRaw_ExifTagTypes = 5;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_SBYTE: LibRaw_ExifTagTypes = 6;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_UNDEFINED: LibRaw_ExifTagTypes = 7;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_SSHORT: LibRaw_ExifTagTypes = 8;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_SLONG: LibRaw_ExifTagTypes = 9;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_SRATIONAL: LibRaw_ExifTagTypes = 10;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_FLOAT: LibRaw_ExifTagTypes = 11;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_DOUBLE: LibRaw_ExifTagTypes = 12;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_IFD: LibRaw_ExifTagTypes = 13;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_UNICODE: LibRaw_ExifTagTypes = 14;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_COMPLEX: LibRaw_ExifTagTypes = 15;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_LONG8: LibRaw_ExifTagTypes = 16;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_SLONG8: LibRaw_ExifTagTypes = 17;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_IFD8: LibRaw_ExifTagTypes = 18;
pub type LibRaw_ExifTagTypes = libc::c_uint;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Unknown: LibRaw_whitebalance_code = 0;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Daylight: LibRaw_whitebalance_code = 1;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Fluorescent: LibRaw_whitebalance_code = 2;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Tungsten: LibRaw_whitebalance_code = 3;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Flash: LibRaw_whitebalance_code = 4;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_FineWeather: LibRaw_whitebalance_code = 9;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Cloudy: LibRaw_whitebalance_code = 10;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Shade: LibRaw_whitebalance_code = 11;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_FL_D: LibRaw_whitebalance_code = 12;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_FL_N: LibRaw_whitebalance_code = 13;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_FL_W: LibRaw_whitebalance_code = 14;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_FL_WW: LibRaw_whitebalance_code = 15;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_FL_L: LibRaw_whitebalance_code = 16;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Ill_A: LibRaw_whitebalance_code = 17;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Ill_B: LibRaw_whitebalance_code = 18;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Ill_C: LibRaw_whitebalance_code = 19;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_D55: LibRaw_whitebalance_code = 20;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_D65: LibRaw_whitebalance_code = 21;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_D75: LibRaw_whitebalance_code = 22;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_D50: LibRaw_whitebalance_code = 23;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_StudioTungsten: LibRaw_whitebalance_code = 24;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Sunset: LibRaw_whitebalance_code = 64;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Underwater: LibRaw_whitebalance_code = 65;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_FluorescentHigh: LibRaw_whitebalance_code = 66;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_HT_Mercury: LibRaw_whitebalance_code = 67;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_AsShot: LibRaw_whitebalance_code = 81;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Auto: LibRaw_whitebalance_code = 82;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Custom: LibRaw_whitebalance_code = 83;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Auto1: LibRaw_whitebalance_code = 85;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Auto2: LibRaw_whitebalance_code = 86;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Auto3: LibRaw_whitebalance_code = 87;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Auto4: LibRaw_whitebalance_code = 88;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Custom1: LibRaw_whitebalance_code = 90;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Custom2: LibRaw_whitebalance_code = 91;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Custom3: LibRaw_whitebalance_code = 92;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Custom4: LibRaw_whitebalance_code = 93;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Custom5: LibRaw_whitebalance_code = 94;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Custom6: LibRaw_whitebalance_code = 95;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_PC_Set1: LibRaw_whitebalance_code = 96;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_PC_Set2: LibRaw_whitebalance_code = 97;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_PC_Set3: LibRaw_whitebalance_code = 98;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_PC_Set4: LibRaw_whitebalance_code = 99;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_PC_Set5: LibRaw_whitebalance_code = 100;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Measured: LibRaw_whitebalance_code = 110;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_BW: LibRaw_whitebalance_code = 120;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Kelvin: LibRaw_whitebalance_code = 254;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Other: LibRaw_whitebalance_code = 255;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_None: LibRaw_whitebalance_code = 65535;
pub type LibRaw_whitebalance_code = libc::c_uint;
pub const LibRaw_MultiExposure_related_LIBRAW_ME_NONE: LibRaw_MultiExposure_related = 0;
pub const LibRaw_MultiExposure_related_LIBRAW_ME_SIMPLE: LibRaw_MultiExposure_related = 1;
pub const LibRaw_MultiExposure_related_LIBRAW_ME_OVERLAY: LibRaw_MultiExposure_related = 2;
pub const LibRaw_MultiExposure_related_LIBRAW_ME_HDR: LibRaw_MultiExposure_related = 3;
pub type LibRaw_MultiExposure_related = libc::c_uint;
pub const LibRaw_dng_processing_LIBRAW_DNG_NONE: LibRaw_dng_processing = 0;
pub const LibRaw_dng_processing_LIBRAW_DNG_FLOAT: LibRaw_dng_processing = 1;
pub const LibRaw_dng_processing_LIBRAW_DNG_LINEAR: LibRaw_dng_processing = 2;
pub const LibRaw_dng_processing_LIBRAW_DNG_DEFLATE: LibRaw_dng_processing = 4;
pub const LibRaw_dng_processing_LIBRAW_DNG_XTRANS: LibRaw_dng_processing = 8;
pub const LibRaw_dng_processing_LIBRAW_DNG_OTHER: LibRaw_dng_processing = 16;
pub const LibRaw_dng_processing_LIBRAW_DNG_8BIT: LibRaw_dng_processing = 32;
pub const LibRaw_dng_processing_LIBRAW_DNG_ALL: LibRaw_dng_processing = 63;
pub const LibRaw_dng_processing_LIBRAW_DNG_DEFAULT: LibRaw_dng_processing = 39;
pub type LibRaw_dng_processing = libc::c_uint;
pub const LibRaw_output_flags_LIBRAW_OUTPUT_FLAGS_NONE: LibRaw_output_flags = 0;
pub const LibRaw_output_flags_LIBRAW_OUTPUT_FLAGS_PPMMETA: LibRaw_output_flags = 1;
pub type LibRaw_output_flags = libc::c_uint;
pub const LibRaw_runtime_capabilities_LIBRAW_CAPS_RAWSPEED: LibRaw_runtime_capabilities = 1;
pub const LibRaw_runtime_capabilities_LIBRAW_CAPS_DNGSDK: LibRaw_runtime_capabilities = 2;
pub const LibRaw_runtime_capabilities_LIBRAW_CAPS_GPRSDK: LibRaw_runtime_capabilities = 4;
pub const LibRaw_runtime_capabilities_LIBRAW_CAPS_UNICODEPATHS: LibRaw_runtime_capabilities = 8;
pub const LibRaw_runtime_capabilities_LIBRAW_CAPS_X3FTOOLS: LibRaw_runtime_capabilities = 16;
pub const LibRaw_runtime_capabilities_LIBRAW_CAPS_RPI6BY9: LibRaw_runtime_capabilities = 32;
pub const LibRaw_runtime_capabilities_LIBRAW_CAPS_ZLIB: LibRaw_runtime_capabilities = 64;
pub const LibRaw_runtime_capabilities_LIBRAW_CAPS_JPEG: LibRaw_runtime_capabilities = 128;
pub const LibRaw_runtime_capabilities_LIBRAW_CAPS_RAWSPEED3: LibRaw_runtime_capabilities = 256;
pub const LibRaw_runtime_capabilities_LIBRAW_CAPS_RAWSPEED_BITS: LibRaw_runtime_capabilities = 512;
pub type LibRaw_runtime_capabilities = libc::c_uint;
pub const LibRaw_colorspace_LIBRAW_COLORSPACE_NotFound: LibRaw_colorspace = 0;
pub const LibRaw_colorspace_LIBRAW_COLORSPACE_sRGB: LibRaw_colorspace = 1;
pub const LibRaw_colorspace_LIBRAW_COLORSPACE_AdobeRGB: LibRaw_colorspace = 2;
pub const LibRaw_colorspace_LIBRAW_COLORSPACE_WideGamutRGB: LibRaw_colorspace = 3;
pub const LibRaw_colorspace_LIBRAW_COLORSPACE_ProPhotoRGB: LibRaw_colorspace = 4;
pub const LibRaw_colorspace_LIBRAW_COLORSPACE_ICC: LibRaw_colorspace = 5;
pub const LibRaw_colorspace_LIBRAW_COLORSPACE_Uncalibrated: LibRaw_colorspace = 6;
pub const LibRaw_colorspace_LIBRAW_COLORSPACE_CameraLinearUniWB: LibRaw_colorspace = 7;
pub const LibRaw_colorspace_LIBRAW_COLORSPACE_CameraLinear: LibRaw_colorspace = 8;
pub const LibRaw_colorspace_LIBRAW_COLORSPACE_CameraGammaUniWB: LibRaw_colorspace = 9;
pub const LibRaw_colorspace_LIBRAW_COLORSPACE_CameraGamma: LibRaw_colorspace = 10;
pub const LibRaw_colorspace_LIBRAW_COLORSPACE_MonochromeLinear: LibRaw_colorspace = 11;
pub const LibRaw_colorspace_LIBRAW_COLORSPACE_MonochromeGamma: LibRaw_colorspace = 12;
pub const LibRaw_colorspace_LIBRAW_COLORSPACE_Unknown: LibRaw_colorspace = 255;
pub type LibRaw_colorspace = libc::c_uint;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Unknown: LibRaw_cameramaker_index = 0;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Agfa: LibRaw_cameramaker_index = 1;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Alcatel: LibRaw_cameramaker_index = 2;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Apple: LibRaw_cameramaker_index = 3;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Aptina: LibRaw_cameramaker_index = 4;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_AVT: LibRaw_cameramaker_index = 5;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Baumer: LibRaw_cameramaker_index = 6;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Broadcom: LibRaw_cameramaker_index = 7;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Canon: LibRaw_cameramaker_index = 8;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Casio: LibRaw_cameramaker_index = 9;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_CINE: LibRaw_cameramaker_index = 10;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Clauss: LibRaw_cameramaker_index = 11;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Contax: LibRaw_cameramaker_index = 12;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Creative: LibRaw_cameramaker_index = 13;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_DJI: LibRaw_cameramaker_index = 14;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_DXO: LibRaw_cameramaker_index = 15;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Epson: LibRaw_cameramaker_index = 16;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Foculus: LibRaw_cameramaker_index = 17;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Fujifilm: LibRaw_cameramaker_index = 18;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Generic: LibRaw_cameramaker_index = 19;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Gione: LibRaw_cameramaker_index = 20;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_GITUP: LibRaw_cameramaker_index = 21;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Google: LibRaw_cameramaker_index = 22;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_GoPro: LibRaw_cameramaker_index = 23;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Hasselblad: LibRaw_cameramaker_index = 24;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_HTC: LibRaw_cameramaker_index = 25;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_I_Mobile: LibRaw_cameramaker_index = 26;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Imacon: LibRaw_cameramaker_index = 27;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_JK_Imaging: LibRaw_cameramaker_index = 28;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Kodak: LibRaw_cameramaker_index = 29;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Konica: LibRaw_cameramaker_index = 30;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Leaf: LibRaw_cameramaker_index = 31;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Leica: LibRaw_cameramaker_index = 32;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Lenovo: LibRaw_cameramaker_index = 33;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_LG: LibRaw_cameramaker_index = 34;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Logitech: LibRaw_cameramaker_index = 35;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Mamiya: LibRaw_cameramaker_index = 36;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Matrix: LibRaw_cameramaker_index = 37;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Meizu: LibRaw_cameramaker_index = 38;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Micron: LibRaw_cameramaker_index = 39;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Minolta: LibRaw_cameramaker_index = 40;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Motorola: LibRaw_cameramaker_index = 41;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_NGM: LibRaw_cameramaker_index = 42;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Nikon: LibRaw_cameramaker_index = 43;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Nokia: LibRaw_cameramaker_index = 44;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Olympus: LibRaw_cameramaker_index = 45;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_OmniVison: LibRaw_cameramaker_index = 46;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Panasonic: LibRaw_cameramaker_index = 47;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Parrot: LibRaw_cameramaker_index = 48;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Pentax: LibRaw_cameramaker_index = 49;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_PhaseOne: LibRaw_cameramaker_index = 50;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_PhotoControl: LibRaw_cameramaker_index = 51;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Photron: LibRaw_cameramaker_index = 52;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Pixelink: LibRaw_cameramaker_index = 53;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Polaroid: LibRaw_cameramaker_index = 54;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_RED: LibRaw_cameramaker_index = 55;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Ricoh: LibRaw_cameramaker_index = 56;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Rollei: LibRaw_cameramaker_index = 57;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_RoverShot: LibRaw_cameramaker_index = 58;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Samsung: LibRaw_cameramaker_index = 59;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Sigma: LibRaw_cameramaker_index = 60;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Sinar: LibRaw_cameramaker_index = 61;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_SMaL: LibRaw_cameramaker_index = 62;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Sony: LibRaw_cameramaker_index = 63;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_ST_Micro: LibRaw_cameramaker_index = 64;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_THL: LibRaw_cameramaker_index = 65;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_VLUU: LibRaw_cameramaker_index = 66;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Xiaomi: LibRaw_cameramaker_index = 67;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_XIAOYI: LibRaw_cameramaker_index = 68;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_YI: LibRaw_cameramaker_index = 69;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Yuneec: LibRaw_cameramaker_index = 70;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Zeiss: LibRaw_cameramaker_index = 71;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_OnePlus: LibRaw_cameramaker_index = 72;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_ISG: LibRaw_cameramaker_index = 73;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_VIVO: LibRaw_cameramaker_index = 74;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_HMD_Global: LibRaw_cameramaker_index = 75;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_HUAWEI: LibRaw_cameramaker_index = 76;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_RaspberryPi: LibRaw_cameramaker_index = 77;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_OmDigital: LibRaw_cameramaker_index = 78;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_TheLastOne: LibRaw_cameramaker_index = 79;
pub type LibRaw_cameramaker_index = libc::c_uint;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Unknown: LibRaw_camera_mounts = 0;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Alpa: LibRaw_camera_mounts = 1;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_C: LibRaw_camera_mounts = 2;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Canon_EF_M: LibRaw_camera_mounts = 3;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Canon_EF_S: LibRaw_camera_mounts = 4;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Canon_EF: LibRaw_camera_mounts = 5;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Canon_RF: LibRaw_camera_mounts = 6;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Contax_N: LibRaw_camera_mounts = 7;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Contax645: LibRaw_camera_mounts = 8;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_FT: LibRaw_camera_mounts = 9;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_mFT: LibRaw_camera_mounts = 10;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Fuji_GF: LibRaw_camera_mounts = 11;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Fuji_GX: LibRaw_camera_mounts = 12;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Fuji_X: LibRaw_camera_mounts = 13;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Hasselblad_H: LibRaw_camera_mounts = 14;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Hasselblad_V: LibRaw_camera_mounts = 15;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Hasselblad_XCD: LibRaw_camera_mounts = 16;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Leica_M: LibRaw_camera_mounts = 17;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Leica_R: LibRaw_camera_mounts = 18;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Leica_S: LibRaw_camera_mounts = 19;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Leica_SL: LibRaw_camera_mounts = 20;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Leica_TL: LibRaw_camera_mounts = 21;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_LPS_L: LibRaw_camera_mounts = 22;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Mamiya67: LibRaw_camera_mounts = 23;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Mamiya645: LibRaw_camera_mounts = 24;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Minolta_A: LibRaw_camera_mounts = 25;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Nikon_CX: LibRaw_camera_mounts = 26;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Nikon_F: LibRaw_camera_mounts = 27;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Nikon_Z: LibRaw_camera_mounts = 28;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_PhaseOne_iXM_MV: LibRaw_camera_mounts = 29;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_PhaseOne_iXM_RS: LibRaw_camera_mounts = 30;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_PhaseOne_iXM: LibRaw_camera_mounts = 31;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Pentax_645: LibRaw_camera_mounts = 32;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Pentax_K: LibRaw_camera_mounts = 33;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Pentax_Q: LibRaw_camera_mounts = 34;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_RicohModule: LibRaw_camera_mounts = 35;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Rollei_bayonet: LibRaw_camera_mounts = 36;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Samsung_NX_M: LibRaw_camera_mounts = 37;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Samsung_NX: LibRaw_camera_mounts = 38;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Sigma_X3F: LibRaw_camera_mounts = 39;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Sony_E: LibRaw_camera_mounts = 40;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_LF: LibRaw_camera_mounts = 41;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_DigitalBack: LibRaw_camera_mounts = 42;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_FixedLens: LibRaw_camera_mounts = 43;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_IL_UM: LibRaw_camera_mounts = 44;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_TheLastOne: LibRaw_camera_mounts = 45;
pub type LibRaw_camera_mounts = libc::c_uint;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_Unknown: LibRaw_camera_formats = 0;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_APSC: LibRaw_camera_formats = 1;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_FF: LibRaw_camera_formats = 2;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_MF: LibRaw_camera_formats = 3;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_APSH: LibRaw_camera_formats = 4;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_1INCH: LibRaw_camera_formats = 5;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_1div2p3INCH: LibRaw_camera_formats = 6;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_1div1p7INCH: LibRaw_camera_formats = 7;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_FT: LibRaw_camera_formats = 8;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_CROP645: LibRaw_camera_formats = 9;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_LeicaS: LibRaw_camera_formats = 10;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_645: LibRaw_camera_formats = 11;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_66: LibRaw_camera_formats = 12;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_69: LibRaw_camera_formats = 13;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_LF: LibRaw_camera_formats = 14;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_Leica_DMR: LibRaw_camera_formats = 15;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_67: LibRaw_camera_formats = 16;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_SigmaAPSC: LibRaw_camera_formats = 17;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_SigmaMerrill: LibRaw_camera_formats = 18;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_SigmaAPSH: LibRaw_camera_formats = 19;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_3648: LibRaw_camera_formats = 20;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_68: LibRaw_camera_formats = 21;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_TheLastOne: LibRaw_camera_formats = 22;
pub type LibRaw_camera_formats = libc::c_uint;
pub const LibRawImageAspects_LIBRAW_IMAGE_ASPECT_UNKNOWN: LibRawImageAspects = 0;
pub const LibRawImageAspects_LIBRAW_IMAGE_ASPECT_OTHER: LibRawImageAspects = 1;
pub const LibRawImageAspects_LIBRAW_IMAGE_ASPECT_MINIMAL_REAL_ASPECT_VALUE: LibRawImageAspects = 99;
pub const LibRawImageAspects_LIBRAW_IMAGE_ASPECT_MAXIMAL_REAL_ASPECT_VALUE: LibRawImageAspects =
    10000;
pub const LibRawImageAspects_LIBRAW_IMAGE_ASPECT_3to2: LibRawImageAspects = 1500;
pub const LibRawImageAspects_LIBRAW_IMAGE_ASPECT_1to1: LibRawImageAspects = 1000;
pub const LibRawImageAspects_LIBRAW_IMAGE_ASPECT_4to3: LibRawImageAspects = 1333;
pub const LibRawImageAspects_LIBRAW_IMAGE_ASPECT_16to9: LibRawImageAspects = 1777;
pub const LibRawImageAspects_LIBRAW_IMAGE_ASPECT_5to4: LibRawImageAspects = 1250;
pub const LibRawImageAspects_LIBRAW_IMAGE_ASPECT_7to6: LibRawImageAspects = 1166;
pub const LibRawImageAspects_LIBRAW_IMAGE_ASPECT_6to5: LibRawImageAspects = 1200;
pub const LibRawImageAspects_LIBRAW_IMAGE_ASPECT_7to5: LibRawImageAspects = 1400;
pub type LibRawImageAspects = libc::c_uint;
pub const LibRaw_lens_focal_types_LIBRAW_FT_UNDEFINED: LibRaw_lens_focal_types = 0;
pub const LibRaw_lens_focal_types_LIBRAW_FT_PRIME_LENS: LibRaw_lens_focal_types = 1;
pub const LibRaw_lens_focal_types_LIBRAW_FT_ZOOM_LENS: LibRaw_lens_focal_types = 2;
pub const LibRaw_lens_focal_types_LIBRAW_FT_ZOOM_LENS_CONSTANT_APERTURE: LibRaw_lens_focal_types =
    3;
pub const LibRaw_lens_focal_types_LIBRAW_FT_ZOOM_LENS_VARIABLE_APERTURE: LibRaw_lens_focal_types =
    4;
pub type LibRaw_lens_focal_types = libc::c_uint;
pub const LibRaw_Canon_RecordModes_LIBRAW_Canon_RecordMode_UNDEFINED: LibRaw_Canon_RecordModes = 0;
pub const LibRaw_Canon_RecordModes_LIBRAW_Canon_RecordMode_JPEG: LibRaw_Canon_RecordModes = 1;
pub const LibRaw_Canon_RecordModes_LIBRAW_Canon_RecordMode_CRW_THM: LibRaw_Canon_RecordModes = 2;
pub const LibRaw_Canon_RecordModes_LIBRAW_Canon_RecordMode_AVI_THM: LibRaw_Canon_RecordModes = 3;
pub const LibRaw_Canon_RecordModes_LIBRAW_Canon_RecordMode_TIF: LibRaw_Canon_RecordModes = 4;
pub const LibRaw_Canon_RecordModes_LIBRAW_Canon_RecordMode_TIF_JPEG: LibRaw_Canon_RecordModes = 5;
pub const LibRaw_Canon_RecordModes_LIBRAW_Canon_RecordMode_CR2: LibRaw_Canon_RecordModes = 6;
pub const LibRaw_Canon_RecordModes_LIBRAW_Canon_RecordMode_CR2_JPEG: LibRaw_Canon_RecordModes = 7;
pub const LibRaw_Canon_RecordModes_LIBRAW_Canon_RecordMode_UNKNOWN: LibRaw_Canon_RecordModes = 8;
pub const LibRaw_Canon_RecordModes_LIBRAW_Canon_RecordMode_MOV: LibRaw_Canon_RecordModes = 9;
pub const LibRaw_Canon_RecordModes_LIBRAW_Canon_RecordMode_MP4: LibRaw_Canon_RecordModes = 10;
pub const LibRaw_Canon_RecordModes_LIBRAW_Canon_RecordMode_CRM: LibRaw_Canon_RecordModes = 11;
pub const LibRaw_Canon_RecordModes_LIBRAW_Canon_RecordMode_CR3: LibRaw_Canon_RecordModes = 12;
pub const LibRaw_Canon_RecordModes_LIBRAW_Canon_RecordMode_CR3_JPEG: LibRaw_Canon_RecordModes = 13;
pub const LibRaw_Canon_RecordModes_LIBRAW_Canon_RecordMode_HEIF: LibRaw_Canon_RecordModes = 14;
pub const LibRaw_Canon_RecordModes_LIBRAW_Canon_RecordMode_CR3_HEIF: LibRaw_Canon_RecordModes = 15;
pub const LibRaw_Canon_RecordModes_LIBRAW_Canon_RecordMode_TheLastOne: LibRaw_Canon_RecordModes =
    16;
pub type LibRaw_Canon_RecordModes = libc::c_uint;
pub const LibRaw_minolta_storagemethods_LIBRAW_MINOLTA_UNPACKED: LibRaw_minolta_storagemethods = 82;
pub const LibRaw_minolta_storagemethods_LIBRAW_MINOLTA_PACKED: LibRaw_minolta_storagemethods = 89;
pub type LibRaw_minolta_storagemethods = libc::c_uint;
pub const LibRaw_minolta_bayerpatterns_LIBRAW_MINOLTA_RGGB: LibRaw_minolta_bayerpatterns = 1;
pub const LibRaw_minolta_bayerpatterns_LIBRAW_MINOLTA_G2BRG1: LibRaw_minolta_bayerpatterns = 4;
pub type LibRaw_minolta_bayerpatterns = libc::c_uint;
pub const LibRaw_sony_cameratypes_LIBRAW_SONY_DSC: LibRaw_sony_cameratypes = 1;
pub const LibRaw_sony_cameratypes_LIBRAW_SONY_DSLR: LibRaw_sony_cameratypes = 2;
pub const LibRaw_sony_cameratypes_LIBRAW_SONY_NEX: LibRaw_sony_cameratypes = 3;
pub const LibRaw_sony_cameratypes_LIBRAW_SONY_SLT: LibRaw_sony_cameratypes = 4;
pub const LibRaw_sony_cameratypes_LIBRAW_SONY_ILCE: LibRaw_sony_cameratypes = 5;
pub const LibRaw_sony_cameratypes_LIBRAW_SONY_ILCA: LibRaw_sony_cameratypes = 6;
pub const LibRaw_sony_cameratypes_LIBRAW_SONY_CameraType_UNKNOWN: LibRaw_sony_cameratypes = 65535;
pub type LibRaw_sony_cameratypes = libc::c_uint;
pub const LibRaw_Sony_0x2010_Type_LIBRAW_SONY_Tag2010None: LibRaw_Sony_0x2010_Type = 0;
pub const LibRaw_Sony_0x2010_Type_LIBRAW_SONY_Tag2010a: LibRaw_Sony_0x2010_Type = 1;
pub const LibRaw_Sony_0x2010_Type_LIBRAW_SONY_Tag2010b: LibRaw_Sony_0x2010_Type = 2;
pub const LibRaw_Sony_0x2010_Type_LIBRAW_SONY_Tag2010c: LibRaw_Sony_0x2010_Type = 3;
pub const LibRaw_Sony_0x2010_Type_LIBRAW_SONY_Tag2010d: LibRaw_Sony_0x2010_Type = 4;
pub const LibRaw_Sony_0x2010_Type_LIBRAW_SONY_Tag2010e: LibRaw_Sony_0x2010_Type = 5;
pub const LibRaw_Sony_0x2010_Type_LIBRAW_SONY_Tag2010f: LibRaw_Sony_0x2010_Type = 6;
pub const LibRaw_Sony_0x2010_Type_LIBRAW_SONY_Tag2010g: LibRaw_Sony_0x2010_Type = 7;
pub const LibRaw_Sony_0x2010_Type_LIBRAW_SONY_Tag2010h: LibRaw_Sony_0x2010_Type = 8;
pub const LibRaw_Sony_0x2010_Type_LIBRAW_SONY_Tag2010i: LibRaw_Sony_0x2010_Type = 9;
pub type LibRaw_Sony_0x2010_Type = libc::c_uint;
pub const LibRaw_Sony_0x9050_Type_LIBRAW_SONY_Tag9050None: LibRaw_Sony_0x9050_Type = 0;
pub const LibRaw_Sony_0x9050_Type_LIBRAW_SONY_Tag9050a: LibRaw_Sony_0x9050_Type = 1;
pub const LibRaw_Sony_0x9050_Type_LIBRAW_SONY_Tag9050b: LibRaw_Sony_0x9050_Type = 2;
pub const LibRaw_Sony_0x9050_Type_LIBRAW_SONY_Tag9050c: LibRaw_Sony_0x9050_Type = 3;
pub type LibRaw_Sony_0x9050_Type = libc::c_uint;
pub const LIBRAW_SONY_FOCUSMODEmodes_LIBRAW_SONY_FOCUSMODE_MF: LIBRAW_SONY_FOCUSMODEmodes = 0;
pub const LIBRAW_SONY_FOCUSMODEmodes_LIBRAW_SONY_FOCUSMODE_AF_S: LIBRAW_SONY_FOCUSMODEmodes = 2;
pub const LIBRAW_SONY_FOCUSMODEmodes_LIBRAW_SONY_FOCUSMODE_AF_C: LIBRAW_SONY_FOCUSMODEmodes = 3;
pub const LIBRAW_SONY_FOCUSMODEmodes_LIBRAW_SONY_FOCUSMODE_AF_A: LIBRAW_SONY_FOCUSMODEmodes = 4;
pub const LIBRAW_SONY_FOCUSMODEmodes_LIBRAW_SONY_FOCUSMODE_DMF: LIBRAW_SONY_FOCUSMODEmodes = 6;
pub const LIBRAW_SONY_FOCUSMODEmodes_LIBRAW_SONY_FOCUSMODE_AF_D: LIBRAW_SONY_FOCUSMODEmodes = 7;
pub const LIBRAW_SONY_FOCUSMODEmodes_LIBRAW_SONY_FOCUSMODE_AF: LIBRAW_SONY_FOCUSMODEmodes = 101;
pub const LIBRAW_SONY_FOCUSMODEmodes_LIBRAW_SONY_FOCUSMODE_PERMANENT_AF:
    LIBRAW_SONY_FOCUSMODEmodes = 104;
pub const LIBRAW_SONY_FOCUSMODEmodes_LIBRAW_SONY_FOCUSMODE_SEMI_MF: LIBRAW_SONY_FOCUSMODEmodes =
    105;
pub const LIBRAW_SONY_FOCUSMODEmodes_LIBRAW_SONY_FOCUSMODE_UNKNOWN: LIBRAW_SONY_FOCUSMODEmodes = -1;
pub type LIBRAW_SONY_FOCUSMODEmodes = libc::c_int;
pub const LibRaw_KodakSensors_LIBRAW_Kodak_UnknownSensor: LibRaw_KodakSensors = 0;
pub const LibRaw_KodakSensors_LIBRAW_Kodak_M1: LibRaw_KodakSensors = 1;
pub const LibRaw_KodakSensors_LIBRAW_Kodak_M15: LibRaw_KodakSensors = 2;
pub const LibRaw_KodakSensors_LIBRAW_Kodak_M16: LibRaw_KodakSensors = 3;
pub const LibRaw_KodakSensors_LIBRAW_Kodak_M17: LibRaw_KodakSensors = 4;
pub const LibRaw_KodakSensors_LIBRAW_Kodak_M2: LibRaw_KodakSensors = 5;
pub const LibRaw_KodakSensors_LIBRAW_Kodak_M23: LibRaw_KodakSensors = 6;
pub const LibRaw_KodakSensors_LIBRAW_Kodak_M24: LibRaw_KodakSensors = 7;
pub const LibRaw_KodakSensors_LIBRAW_Kodak_M3: LibRaw_KodakSensors = 8;
pub const LibRaw_KodakSensors_LIBRAW_Kodak_M5: LibRaw_KodakSensors = 9;
pub const LibRaw_KodakSensors_LIBRAW_Kodak_M6: LibRaw_KodakSensors = 10;
pub const LibRaw_KodakSensors_LIBRAW_Kodak_C14: LibRaw_KodakSensors = 11;
pub const LibRaw_KodakSensors_LIBRAW_Kodak_X14: LibRaw_KodakSensors = 12;
pub const LibRaw_KodakSensors_LIBRAW_Kodak_M11: LibRaw_KodakSensors = 13;
pub type LibRaw_KodakSensors = libc::c_uint;
pub const LibRaw_HasselbladFormatCodes_LIBRAW_HF_Unknown: LibRaw_HasselbladFormatCodes = 0;
pub const LibRaw_HasselbladFormatCodes_LIBRAW_HF_3FR: LibRaw_HasselbladFormatCodes = 1;
pub const LibRaw_HasselbladFormatCodes_LIBRAW_HF_FFF: LibRaw_HasselbladFormatCodes = 2;
pub const LibRaw_HasselbladFormatCodes_LIBRAW_HF_Imacon: LibRaw_HasselbladFormatCodes = 3;
pub const LibRaw_HasselbladFormatCodes_LIBRAW_HF_HasselbladDNG: LibRaw_HasselbladFormatCodes = 4;
pub const LibRaw_HasselbladFormatCodes_LIBRAW_HF_AdobeDNG: LibRaw_HasselbladFormatCodes = 5;
pub const LibRaw_HasselbladFormatCodes_LIBRAW_HF_AdobeDNG_fromPhocusDNG:
    LibRaw_HasselbladFormatCodes = 6;
pub type LibRaw_HasselbladFormatCodes = libc::c_uint;
pub const LibRaw_rawspecial_t_LIBRAW_RAWSPECIAL_SONYARW2_NONE: LibRaw_rawspecial_t = 0;
pub const LibRaw_rawspecial_t_LIBRAW_RAWSPECIAL_SONYARW2_BASEONLY: LibRaw_rawspecial_t = 1;
pub const LibRaw_rawspecial_t_LIBRAW_RAWSPECIAL_SONYARW2_DELTAONLY: LibRaw_rawspecial_t = 2;
pub const LibRaw_rawspecial_t_LIBRAW_RAWSPECIAL_SONYARW2_DELTAZEROBASE: LibRaw_rawspecial_t = 4;
pub const LibRaw_rawspecial_t_LIBRAW_RAWSPECIAL_SONYARW2_DELTATOVALUE: LibRaw_rawspecial_t = 8;
pub const LibRaw_rawspecial_t_LIBRAW_RAWSPECIAL_SONYARW2_ALLFLAGS: LibRaw_rawspecial_t = 15;
pub const LibRaw_rawspecial_t_LIBRAW_RAWSPECIAL_NODP2Q_INTERPOLATERG: LibRaw_rawspecial_t = 16;
pub const LibRaw_rawspecial_t_LIBRAW_RAWSPECIAL_NODP2Q_INTERPOLATEAF: LibRaw_rawspecial_t = 32;
pub const LibRaw_rawspecial_t_LIBRAW_RAWSPECIAL_SRAW_NO_RGB: LibRaw_rawspecial_t = 64;
pub const LibRaw_rawspecial_t_LIBRAW_RAWSPECIAL_SRAW_NO_INTERPOLATE: LibRaw_rawspecial_t = 128;
pub type LibRaw_rawspecial_t = libc::c_uint;
pub const LibRaw_rawspeed_bits_t_LIBRAW_RAWSPEEDV1_USE: LibRaw_rawspeed_bits_t = 1;
pub const LibRaw_rawspeed_bits_t_LIBRAW_RAWSPEEDV1_FAILONUNKNOWN: LibRaw_rawspeed_bits_t = 2;
pub const LibRaw_rawspeed_bits_t_LIBRAW_RAWSPEEDV1_IGNOREERRORS: LibRaw_rawspeed_bits_t = 4;
pub const LibRaw_rawspeed_bits_t_LIBRAW_RAWSPEEDV3_USE: LibRaw_rawspeed_bits_t = 256;
pub const LibRaw_rawspeed_bits_t_LIBRAW_RAWSPEEDV3_FAILONUNKNOWN: LibRaw_rawspeed_bits_t = 512;
pub const LibRaw_rawspeed_bits_t_LIBRAW_RAWSPEEDV3_IGNOREERRORS: LibRaw_rawspeed_bits_t = 1024;
pub type LibRaw_rawspeed_bits_t = libc::c_uint;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_PENTAX_PS_ALLFRAMES:
    LibRaw_processing_options = 1;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_CONVERTFLOAT_TO_INT:
    LibRaw_processing_options = 2;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_ARQ_SKIP_CHANNEL_SWAP:
    LibRaw_processing_options = 4;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_NO_ROTATE_FOR_KODAK_THUMBNAILS:
    LibRaw_processing_options = 8;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_USE_PPM16_THUMBS: LibRaw_processing_options =
    32;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_DONT_CHECK_DNG_ILLUMINANT:
    LibRaw_processing_options = 64;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_DNGSDK_ZEROCOPY: LibRaw_processing_options =
    128;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_ZEROFILTERS_FOR_MONOCHROMETIFFS:
    LibRaw_processing_options = 256;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_DNG_ADD_ENHANCED: LibRaw_processing_options =
    512;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_DNG_ADD_PREVIEWS: LibRaw_processing_options =
    1024;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_DNG_PREFER_LARGEST_IMAGE:
    LibRaw_processing_options = 2048;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_DNG_STAGE2: LibRaw_processing_options = 4096;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_DNG_STAGE3: LibRaw_processing_options = 8192;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_DNG_ALLOWSIZECHANGE:
    LibRaw_processing_options = 16384;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_DNG_DISABLEWBADJUST:
    LibRaw_processing_options = 32768;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_PROVIDE_NONSTANDARD_WB:
    LibRaw_processing_options = 65536;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_CAMERAWB_FALLBACK_TO_DAYLIGHT:
    LibRaw_processing_options = 131072;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_CHECK_THUMBNAILS_KNOWN_VENDORS:
    LibRaw_processing_options = 262144;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_CHECK_THUMBNAILS_ALL_VENDORS:
    LibRaw_processing_options = 524288;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_DNG_STAGE2_IFPRESENT:
    LibRaw_processing_options = 1048576;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_DNG_STAGE3_IFPRESENT:
    LibRaw_processing_options = 2097152;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_DNG_ADD_MASKS: LibRaw_processing_options =
    4194304;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_CANON_IGNORE_MAKERNOTES_ROTATION:
    LibRaw_processing_options = 8388608;
pub type LibRaw_processing_options = libc::c_uint;
pub const LibRaw_decoder_flags_LIBRAW_DECODER_HASCURVE: LibRaw_decoder_flags = 16;
pub const LibRaw_decoder_flags_LIBRAW_DECODER_SONYARW2: LibRaw_decoder_flags = 32;
pub const LibRaw_decoder_flags_LIBRAW_DECODER_TRYRAWSPEED: LibRaw_decoder_flags = 64;
pub const LibRaw_decoder_flags_LIBRAW_DECODER_OWNALLOC: LibRaw_decoder_flags = 128;
pub const LibRaw_decoder_flags_LIBRAW_DECODER_FIXEDMAXC: LibRaw_decoder_flags = 256;
pub const LibRaw_decoder_flags_LIBRAW_DECODER_ADOBECOPYPIXEL: LibRaw_decoder_flags = 512;
pub const LibRaw_decoder_flags_LIBRAW_DECODER_LEGACY_WITH_MARGINS: LibRaw_decoder_flags = 1024;
pub const LibRaw_decoder_flags_LIBRAW_DECODER_3CHANNEL: LibRaw_decoder_flags = 2048;
pub const LibRaw_decoder_flags_LIBRAW_DECODER_SINAR4SHOT: LibRaw_decoder_flags = 2048;
pub const LibRaw_decoder_flags_LIBRAW_DECODER_FLATDATA: LibRaw_decoder_flags = 4096;
pub const LibRaw_decoder_flags_LIBRAW_DECODER_FLAT_BG2_SWAPPED: LibRaw_decoder_flags = 8192;
pub const LibRaw_decoder_flags_LIBRAW_DECODER_UNSUPPORTED_FORMAT: LibRaw_decoder_flags = 16384;
pub const LibRaw_decoder_flags_LIBRAW_DECODER_NOTSET: LibRaw_decoder_flags = 32768;
pub const LibRaw_decoder_flags_LIBRAW_DECODER_TRYRAWSPEED3: LibRaw_decoder_flags = 65536;
pub type LibRaw_decoder_flags = libc::c_uint;
pub const LibRaw_constructor_flags_LIBRAW_OPTIONS_NONE: LibRaw_constructor_flags = 0;
pub const LibRaw_constructor_flags_LIBRAW_OPTIONS_NO_DATAERR_CALLBACK: LibRaw_constructor_flags = 2;
pub const LibRaw_constructor_flags_LIBRAW_OPIONS_NO_DATAERR_CALLBACK: LibRaw_constructor_flags = 2;
pub type LibRaw_constructor_flags = libc::c_uint;
pub const LibRaw_warnings_LIBRAW_WARN_NONE: LibRaw_warnings = 0;
pub const LibRaw_warnings_LIBRAW_WARN_BAD_CAMERA_WB: LibRaw_warnings = 4;
pub const LibRaw_warnings_LIBRAW_WARN_NO_METADATA: LibRaw_warnings = 8;
pub const LibRaw_warnings_LIBRAW_WARN_NO_JPEGLIB: LibRaw_warnings = 16;
pub const LibRaw_warnings_LIBRAW_WARN_NO_EMBEDDED_PROFILE: LibRaw_warnings = 32;
pub const LibRaw_warnings_LIBRAW_WARN_NO_INPUT_PROFILE: LibRaw_warnings = 64;
pub const LibRaw_warnings_LIBRAW_WARN_BAD_OUTPUT_PROFILE: LibRaw_warnings = 128;
pub const LibRaw_warnings_LIBRAW_WARN_NO_BADPIXELMAP: LibRaw_warnings = 256;
pub const LibRaw_warnings_LIBRAW_WARN_BAD_DARKFRAME_FILE: LibRaw_warnings = 512;
pub const LibRaw_warnings_LIBRAW_WARN_BAD_DARKFRAME_DIM: LibRaw_warnings = 1024;
pub const LibRaw_warnings_LIBRAW_WARN_RAWSPEED_PROBLEM: LibRaw_warnings = 4096;
pub const LibRaw_warnings_LIBRAW_WARN_RAWSPEED_UNSUPPORTED: LibRaw_warnings = 8192;
pub const LibRaw_warnings_LIBRAW_WARN_RAWSPEED_PROCESSED: LibRaw_warnings = 16384;
pub const LibRaw_warnings_LIBRAW_WARN_FALLBACK_TO_AHD: LibRaw_warnings = 32768;
pub const LibRaw_warnings_LIBRAW_WARN_PARSEFUJI_PROCESSED: LibRaw_warnings = 65536;
pub const LibRaw_warnings_LIBRAW_WARN_DNGSDK_PROCESSED: LibRaw_warnings = 131072;
pub const LibRaw_warnings_LIBRAW_WARN_DNG_IMAGES_REORDERED: LibRaw_warnings = 262144;
pub const LibRaw_warnings_LIBRAW_WARN_DNG_STAGE2_APPLIED: LibRaw_warnings = 524288;
pub const LibRaw_warnings_LIBRAW_WARN_DNG_STAGE3_APPLIED: LibRaw_warnings = 1048576;
pub const LibRaw_warnings_LIBRAW_WARN_RAWSPEED3_PROBLEM: LibRaw_warnings = 2097152;
pub const LibRaw_warnings_LIBRAW_WARN_RAWSPEED3_UNSUPPORTED: LibRaw_warnings = 4194304;
pub const LibRaw_warnings_LIBRAW_WARN_RAWSPEED3_PROCESSED: LibRaw_warnings = 8388608;
pub const LibRaw_warnings_LIBRAW_WARN_RAWSPEED3_NOTLISTED: LibRaw_warnings = 16777216;
pub type LibRaw_warnings = libc::c_uint;
pub const LibRaw_exceptions_LIBRAW_EXCEPTION_NONE: LibRaw_exceptions = 0;
pub const LibRaw_exceptions_LIBRAW_EXCEPTION_ALLOC: LibRaw_exceptions = 1;
pub const LibRaw_exceptions_LIBRAW_EXCEPTION_DECODE_RAW: LibRaw_exceptions = 2;
pub const LibRaw_exceptions_LIBRAW_EXCEPTION_DECODE_JPEG: LibRaw_exceptions = 3;
pub const LibRaw_exceptions_LIBRAW_EXCEPTION_IO_EOF: LibRaw_exceptions = 4;
pub const LibRaw_exceptions_LIBRAW_EXCEPTION_IO_CORRUPT: LibRaw_exceptions = 5;
pub const LibRaw_exceptions_LIBRAW_EXCEPTION_CANCELLED_BY_CALLBACK: LibRaw_exceptions = 6;
pub const LibRaw_exceptions_LIBRAW_EXCEPTION_BAD_CROP: LibRaw_exceptions = 7;
pub const LibRaw_exceptions_LIBRAW_EXCEPTION_IO_BADFILE: LibRaw_exceptions = 8;
pub const LibRaw_exceptions_LIBRAW_EXCEPTION_DECODE_JPEG2000: LibRaw_exceptions = 9;
pub const LibRaw_exceptions_LIBRAW_EXCEPTION_TOOBIG: LibRaw_exceptions = 10;
pub const LibRaw_exceptions_LIBRAW_EXCEPTION_MEMPOOL: LibRaw_exceptions = 11;
pub const LibRaw_exceptions_LIBRAW_EXCEPTION_UNSUPPORTED_FORMAT: LibRaw_exceptions = 12;
pub type LibRaw_exceptions = libc::c_uint;
pub const LibRaw_progress_LIBRAW_PROGRESS_START: LibRaw_progress = 0;
pub const LibRaw_progress_LIBRAW_PROGRESS_OPEN: LibRaw_progress = 1;
pub const LibRaw_progress_LIBRAW_PROGRESS_IDENTIFY: LibRaw_progress = 2;
pub const LibRaw_progress_LIBRAW_PROGRESS_SIZE_ADJUST: LibRaw_progress = 4;
pub const LibRaw_progress_LIBRAW_PROGRESS_LOAD_RAW: LibRaw_progress = 8;
pub const LibRaw_progress_LIBRAW_PROGRESS_RAW2_IMAGE: LibRaw_progress = 16;
pub const LibRaw_progress_LIBRAW_PROGRESS_REMOVE_ZEROES: LibRaw_progress = 32;
pub const LibRaw_progress_LIBRAW_PROGRESS_BAD_PIXELS: LibRaw_progress = 64;
pub const LibRaw_progress_LIBRAW_PROGRESS_DARK_FRAME: LibRaw_progress = 128;
pub const LibRaw_progress_LIBRAW_PROGRESS_FOVEON_INTERPOLATE: LibRaw_progress = 256;
pub const LibRaw_progress_LIBRAW_PROGRESS_SCALE_COLORS: LibRaw_progress = 512;
pub const LibRaw_progress_LIBRAW_PROGRESS_PRE_INTERPOLATE: LibRaw_progress = 1024;
pub const LibRaw_progress_LIBRAW_PROGRESS_INTERPOLATE: LibRaw_progress = 2048;
pub const LibRaw_progress_LIBRAW_PROGRESS_MIX_GREEN: LibRaw_progress = 4096;
pub const LibRaw_progress_LIBRAW_PROGRESS_MEDIAN_FILTER: LibRaw_progress = 8192;
pub const LibRaw_progress_LIBRAW_PROGRESS_HIGHLIGHTS: LibRaw_progress = 16384;
pub const LibRaw_progress_LIBRAW_PROGRESS_FUJI_ROTATE: LibRaw_progress = 32768;
pub const LibRaw_progress_LIBRAW_PROGRESS_FLIP: LibRaw_progress = 65536;
pub const LibRaw_progress_LIBRAW_PROGRESS_APPLY_PROFILE: LibRaw_progress = 131072;
pub const LibRaw_progress_LIBRAW_PROGRESS_CONVERT_RGB: LibRaw_progress = 262144;
pub const LibRaw_progress_LIBRAW_PROGRESS_STRETCH: LibRaw_progress = 524288;
pub const LibRaw_progress_LIBRAW_PROGRESS_STAGE20: LibRaw_progress = 1048576;
pub const LibRaw_progress_LIBRAW_PROGRESS_STAGE21: LibRaw_progress = 2097152;
pub const LibRaw_progress_LIBRAW_PROGRESS_STAGE22: LibRaw_progress = 4194304;
pub const LibRaw_progress_LIBRAW_PROGRESS_STAGE23: LibRaw_progress = 8388608;
pub const LibRaw_progress_LIBRAW_PROGRESS_STAGE24: LibRaw_progress = 16777216;
pub const LibRaw_progress_LIBRAW_PROGRESS_STAGE25: LibRaw_progress = 33554432;
pub const LibRaw_progress_LIBRAW_PROGRESS_STAGE26: LibRaw_progress = 67108864;
pub const LibRaw_progress_LIBRAW_PROGRESS_STAGE27: LibRaw_progress = 134217728;
pub const LibRaw_progress_LIBRAW_PROGRESS_THUMB_LOAD: LibRaw_progress = 268435456;
pub const LibRaw_progress_LIBRAW_PROGRESS_TRESERVED1: LibRaw_progress = 536870912;
pub const LibRaw_progress_LIBRAW_PROGRESS_TRESERVED2: LibRaw_progress = 1073741824;
pub type LibRaw_progress = libc::c_uint;
pub const LibRaw_errors_LIBRAW_SUCCESS: LibRaw_errors = 0;
pub const LibRaw_errors_LIBRAW_UNSPECIFIED_ERROR: LibRaw_errors = -1;
pub const LibRaw_errors_LIBRAW_FILE_UNSUPPORTED: LibRaw_errors = -2;
pub const LibRaw_errors_LIBRAW_REQUEST_FOR_NONEXISTENT_IMAGE: LibRaw_errors = -3;
pub const LibRaw_errors_LIBRAW_OUT_OF_ORDER_CALL: LibRaw_errors = -4;
pub const LibRaw_errors_LIBRAW_NO_THUMBNAIL: LibRaw_errors = -5;
pub const LibRaw_errors_LIBRAW_UNSUPPORTED_THUMBNAIL: LibRaw_errors = -6;
pub const LibRaw_errors_LIBRAW_INPUT_CLOSED: LibRaw_errors = -7;
pub const LibRaw_errors_LIBRAW_NOT_IMPLEMENTED: LibRaw_errors = -8;
pub const LibRaw_errors_LIBRAW_REQUEST_FOR_NONEXISTENT_THUMBNAIL: LibRaw_errors = -9;
pub const LibRaw_errors_LIBRAW_UNSUFFICIENT_MEMORY: LibRaw_errors = -100007;
pub const LibRaw_errors_LIBRAW_DATA_ERROR: LibRaw_errors = -100008;
pub const LibRaw_errors_LIBRAW_IO_ERROR: LibRaw_errors = -100009;
pub const LibRaw_errors_LIBRAW_CANCELLED_BY_CALLBACK: LibRaw_errors = -100010;
pub const LibRaw_errors_LIBRAW_BAD_CROP: LibRaw_errors = -100011;
pub const LibRaw_errors_LIBRAW_TOO_BIG: LibRaw_errors = -100012;
pub const LibRaw_errors_LIBRAW_MEMPOOL_OVERFLOW: LibRaw_errors = -100013;
pub type LibRaw_errors = libc::c_int;
pub const LibRaw_internal_thumbnail_formats_LIBRAW_INTERNAL_THUMBNAIL_UNKNOWN:
    LibRaw_internal_thumbnail_formats = 0;
pub const LibRaw_internal_thumbnail_formats_LIBRAW_INTERNAL_THUMBNAIL_KODAK_THUMB:
    LibRaw_internal_thumbnail_formats = 1;
pub const LibRaw_internal_thumbnail_formats_LIBRAW_INTERNAL_THUMBNAIL_KODAK_YCBCR:
    LibRaw_internal_thumbnail_formats = 2;
pub const LibRaw_internal_thumbnail_formats_LIBRAW_INTERNAL_THUMBNAIL_KODAK_RGB:
    LibRaw_internal_thumbnail_formats = 3;
pub const LibRaw_internal_thumbnail_formats_LIBRAW_INTERNAL_THUMBNAIL_JPEG:
    LibRaw_internal_thumbnail_formats = 4;
pub const LibRaw_internal_thumbnail_formats_LIBRAW_INTERNAL_THUMBNAIL_LAYER:
    LibRaw_internal_thumbnail_formats = 5;
pub const LibRaw_internal_thumbnail_formats_LIBRAW_INTERNAL_THUMBNAIL_ROLLEI:
    LibRaw_internal_thumbnail_formats = 6;
pub const LibRaw_internal_thumbnail_formats_LIBRAW_INTERNAL_THUMBNAIL_PPM:
    LibRaw_internal_thumbnail_formats = 7;
pub const LibRaw_internal_thumbnail_formats_LIBRAW_INTERNAL_THUMBNAIL_PPM16:
    LibRaw_internal_thumbnail_formats = 8;
pub const LibRaw_internal_thumbnail_formats_LIBRAW_INTERNAL_THUMBNAIL_X3F:
    LibRaw_internal_thumbnail_formats = 9;
pub const LibRaw_internal_thumbnail_formats_LIBRAW_INTERNAL_THUMBNAIL_DNG_YCBCR:
    LibRaw_internal_thumbnail_formats = 10;
pub type LibRaw_internal_thumbnail_formats = libc::c_uint;
pub const LibRaw_thumbnail_formats_LIBRAW_THUMBNAIL_UNKNOWN: LibRaw_thumbnail_formats = 0;
pub const LibRaw_thumbnail_formats_LIBRAW_THUMBNAIL_JPEG: LibRaw_thumbnail_formats = 1;
pub const LibRaw_thumbnail_formats_LIBRAW_THUMBNAIL_BITMAP: LibRaw_thumbnail_formats = 2;
pub const LibRaw_thumbnail_formats_LIBRAW_THUMBNAIL_BITMAP16: LibRaw_thumbnail_formats = 3;
pub const LibRaw_thumbnail_formats_LIBRAW_THUMBNAIL_LAYER: LibRaw_thumbnail_formats = 4;
pub const LibRaw_thumbnail_formats_LIBRAW_THUMBNAIL_ROLLEI: LibRaw_thumbnail_formats = 5;
pub const LibRaw_thumbnail_formats_LIBRAW_THUMBNAIL_H265: LibRaw_thumbnail_formats = 6;
pub type LibRaw_thumbnail_formats = libc::c_uint;
pub const LibRaw_image_formats_LIBRAW_IMAGE_JPEG: LibRaw_image_formats = 1;
pub const LibRaw_image_formats_LIBRAW_IMAGE_BITMAP: LibRaw_image_formats = 2;
pub type LibRaw_image_formats = libc::c_uint;
pub type INT64 = libc::c_longlong;
pub type UINT64 = libc::c_ulonglong;
pub type uchar = libc::c_uchar;
pub type ushort = libc::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct libraw_decoder_info_t {
    pub decoder_name: *const libc::c_char,
    pub decoder_flags: libc::c_uint,
}
#[test]
fn bindgen_test_layout_libraw_decoder_info_t() {
    const UNINIT: ::core::mem::MaybeUninit<libraw_decoder_info_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<libraw_decoder_info_t>(),
        16usize,
        concat!("Size of: ", stringify!(libraw_decoder_info_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libraw_decoder_info_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_decoder_info_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).decoder_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_decoder_info_t),
            "::",
            stringify!(decoder_name)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).decoder_flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_decoder_info_t),
            "::",
            stringify!(decoder_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct libraw_internal_output_params_t {
    pub mix_green: libc::c_uint,
    pub raw_color: libc::c_uint,
    pub zero_is_bad: libc::c_uint,
    pub shrink: ushort,
    pub fuji_width: ushort,
}
#[test]
fn bindgen_test_layout_libraw_internal_output_params_t() {
    const UNINIT: ::core::mem::MaybeUninit<libraw_internal_output_params_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<libraw_internal_output_params_t>(),
        16usize,
        concat!("Size of: ", stringify!(libraw_internal_output_params_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libraw_internal_output_params_t>(),
        4usize,
        concat!("Alignment of ", stringify!(libraw_internal_output_params_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mix_green) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_internal_output_params_t),
            "::",
            stringify!(mix_green)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).raw_color) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_internal_output_params_t),
            "::",
            stringify!(raw_color)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).zero_is_bad) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_internal_output_params_t),
            "::",
            stringify!(zero_is_bad)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).shrink) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_internal_output_params_t),
            "::",
            stringify!(shrink)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fuji_width) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_internal_output_params_t),
            "::",
            stringify!(fuji_width)
        )
    );
}
pub type memory_callback = ::core::option::Option<
    unsafe extern "C" fn(
        data: *mut libc::c_void,
        file: *const libc::c_char,
        where_: *const libc::c_char,
    ),
>;
pub type exif_parser_callback = ::core::option::Option<
    unsafe extern "C" fn(
        context: *mut libc::c_void,
        tag: libc::c_int,
        type_: libc::c_int,
        len: libc::c_int,
        ord: libc::c_uint,
        ifp: *mut libc::c_void,
        base: INT64,
    ),
>;
pub type data_callback = ::core::option::Option<
    unsafe extern "C" fn(data: *mut libc::c_void, file: *const libc::c_char, offset: libc::c_int),
>;
extern "C" {
    pub fn default_data_callback(
        data: *mut libc::c_void,
        file: *const libc::c_char,
        offset: libc::c_int,
    );
}
pub type progress_callback = ::core::option::Option<
    unsafe extern "C" fn(
        data: *mut libc::c_void,
        stage: LibRaw_progress,
        iteration: libc::c_int,
        expected: libc::c_int,
    ) -> libc::c_int,
>;
pub type pre_identify_callback =
    ::core::option::Option<unsafe extern "C" fn(ctx: *mut libc::c_void) -> libc::c_int>;
pub type post_identify_callback =
    ::core::option::Option<unsafe extern "C" fn(ctx: *mut libc::c_void)>;
pub type process_step_callback =
    ::core::option::Option<unsafe extern "C" fn(ctx: *mut libc::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct libraw_callbacks_t {
    pub data_cb: data_callback,
    pub datacb_data: *mut libc::c_void,
    pub progress_cb: progress_callback,
    pub progresscb_data: *mut libc::c_void,
    pub exif_cb: exif_parser_callback,
    pub exifparser_data: *mut libc::c_void,
    pub pre_identify_cb: pre_identify_callback,
    pub post_identify_cb: post_identify_callback,
    pub pre_subtractblack_cb: process_step_callback,
    pub pre_scalecolors_cb: process_step_callback,
    pub pre_preinterpolate_cb: process_step_callback,
    pub pre_interpolate_cb: process_step_callback,
    pub interpolate_bayer_cb: process_step_callback,
    pub interpolate_xtrans_cb: process_step_callback,
    pub post_interpolate_cb: process_step_callback,
    pub pre_converttorgb_cb: process_step_callback,
    pub post_converttorgb_cb: process_step_callback,
}
#[test]
fn bindgen_test_layout_libraw_callbacks_t() {
    const UNINIT: ::core::mem::MaybeUninit<libraw_callbacks_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<libraw_callbacks_t>(),
        136usize,
        concat!("Size of: ", stringify!(libraw_callbacks_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libraw_callbacks_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_callbacks_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).data_cb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_callbacks_t),
            "::",
            stringify!(data_cb)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).datacb_data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_callbacks_t),
            "::",
            stringify!(datacb_data)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).progress_cb) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_callbacks_t),
            "::",
            stringify!(progress_cb)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).progresscb_data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_callbacks_t),
            "::",
            stringify!(progresscb_data)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).exif_cb) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_callbacks_t),
            "::",
            stringify!(exif_cb)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).exifparser_data) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_callbacks_t),
            "::",
            stringify!(exifparser_data)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pre_identify_cb) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_callbacks_t),
            "::",
            stringify!(pre_identify_cb)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).post_identify_cb) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_callbacks_t),
            "::",
            stringify!(post_identify_cb)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pre_subtractblack_cb) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_callbacks_t),
            "::",
            stringify!(pre_subtractblack_cb)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pre_scalecolors_cb) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_callbacks_t),
            "::",
            stringify!(pre_scalecolors_cb)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pre_preinterpolate_cb) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_callbacks_t),
            "::",
            stringify!(pre_preinterpolate_cb)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pre_interpolate_cb) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_callbacks_t),
            "::",
            stringify!(pre_interpolate_cb)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).interpolate_bayer_cb) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_callbacks_t),
            "::",
            stringify!(interpolate_bayer_cb)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).interpolate_xtrans_cb) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_callbacks_t),
            "::",
            stringify!(interpolate_xtrans_cb)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).post_interpolate_cb) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_callbacks_t),
            "::",
            stringify!(post_interpolate_cb)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pre_converttorgb_cb) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_callbacks_t),
            "::",
            stringify!(pre_converttorgb_cb)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).post_converttorgb_cb) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_callbacks_t),
            "::",
            stringify!(post_converttorgb_cb)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct libraw_processed_image_t {
    pub type_: LibRaw_image_formats,
    pub height: ushort,
    pub width: ushort,
    pub colors: ushort,
    pub bits: ushort,
    pub data_size: libc::c_uint,
    pub data: [libc::c_uchar; 1usize],
}
#[test]
fn bindgen_test_layout_libraw_processed_image_t() {
    const UNINIT: ::core::mem::MaybeUninit<libraw_processed_image_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<libraw_processed_image_t>(),
        20usize,
        concat!("Size of: ", stringify!(libraw_processed_image_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libraw_processed_image_t>(),
        4usize,
        concat!("Alignment of ", stringify!(libraw_processed_image_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_processed_image_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_processed_image_t),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_processed_image_t),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).colors) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_processed_image_t),
            "::",
            stringify!(colors)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bits) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_processed_image_t),
            "::",
            stringify!(bits)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).data_size) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_processed_image_t),
            "::",
            stringify!(data_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_processed_image_t),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct libraw_iparams_t {
    pub guard: [libc::c_char; 4usize],
    pub make: [libc::c_char; 64usize],
    pub model: [libc::c_char; 64usize],
    pub software: [libc::c_char; 64usize],
    pub normalized_make: [libc::c_char; 64usize],
    pub normalized_model: [libc::c_char; 64usize],
    pub maker_index: libc::c_uint,
    pub raw_count: libc::c_uint,
    pub dng_version: libc::c_uint,
    pub is_foveon: libc::c_uint,
    pub colors: libc::c_int,
    pub filters: libc::c_uint,
    pub xtrans: [[libc::c_char; 6usize]; 6usize],
    pub xtrans_abs: [[libc::c_char; 6usize]; 6usize],
    pub cdesc: [libc::c_char; 5usize],
    pub xmplen: libc::c_uint,
    pub xmpdata: *mut libc::c_char,
}
#[test]
fn bindgen_test_layout_libraw_iparams_t() {
    const UNINIT: ::core::mem::MaybeUninit<libraw_iparams_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<libraw_iparams_t>(),
        440usize,
        concat!("Size of: ", stringify!(libraw_iparams_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libraw_iparams_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_iparams_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).guard) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_iparams_t),
            "::",
            stringify!(guard)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).make) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_iparams_t),
            "::",
            stringify!(make)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).model) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_iparams_t),
            "::",
            stringify!(model)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).software) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_iparams_t),
            "::",
            stringify!(software)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).normalized_make) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_iparams_t),
            "::",
            stringify!(normalized_make)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).normalized_model) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_iparams_t),
            "::",
            stringify!(normalized_model)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).maker_index) as usize - ptr as usize },
        324usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_iparams_t),
            "::",
            stringify!(maker_index)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).raw_count) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_iparams_t),
            "::",
            stringify!(raw_count)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).dng_version) as usize - ptr as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_iparams_t),
            "::",
            stringify!(dng_version)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).is_foveon) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_iparams_t),
            "::",
            stringify!(is_foveon)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).colors) as usize - ptr as usize },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_iparams_t),
            "::",
            stringify!(colors)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).filters) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_iparams_t),
            "::",
            stringify!(filters)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).xtrans) as usize - ptr as usize },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_iparams_t),
            "::",
            stringify!(xtrans)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).xtrans_abs) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_iparams_t),
            "::",
            stringify!(xtrans_abs)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cdesc) as usize - ptr as usize },
        420usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_iparams_t),
            "::",
            stringify!(cdesc)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).xmplen) as usize - ptr as usize },
        428usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_iparams_t),
            "::",
            stringify!(xmplen)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).xmpdata) as usize - ptr as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_iparams_t),
            "::",
            stringify!(xmpdata)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct libraw_raw_inset_crop_t {
    pub cleft: ushort,
    pub ctop: ushort,
    pub cwidth: ushort,
    pub cheight: ushort,
}
#[test]
fn bindgen_test_layout_libraw_raw_inset_crop_t() {
    const UNINIT: ::core::mem::MaybeUninit<libraw_raw_inset_crop_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<libraw_raw_inset_crop_t>(),
        8usize,
        concat!("Size of: ", stringify!(libraw_raw_inset_crop_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libraw_raw_inset_crop_t>(),
        2usize,
        concat!("Alignment of ", stringify!(libraw_raw_inset_crop_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cleft) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_raw_inset_crop_t),
            "::",
            stringify!(cleft)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ctop) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_raw_inset_crop_t),
            "::",
            stringify!(ctop)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cwidth) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_raw_inset_crop_t),
            "::",
            stringify!(cwidth)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cheight) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_raw_inset_crop_t),
            "::",
            stringify!(cheight)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct libraw_image_sizes_t {
    pub raw_height: ushort,
    pub raw_width: ushort,
    pub height: ushort,
    pub width: ushort,
    pub top_margin: ushort,
    pub left_margin: ushort,
    pub iheight: ushort,
    pub iwidth: ushort,
    pub raw_pitch: libc::c_uint,
    pub pixel_aspect: f64,
    pub flip: libc::c_int,
    pub mask: [[libc::c_int; 4usize]; 8usize],
    pub raw_aspect: ushort,
    pub raw_inset_crops: [libraw_raw_inset_crop_t; 2usize],
}
#[test]
fn bindgen_test_layout_libraw_image_sizes_t() {
    const UNINIT: ::core::mem::MaybeUninit<libraw_image_sizes_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<libraw_image_sizes_t>(),
        184usize,
        concat!("Size of: ", stringify!(libraw_image_sizes_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libraw_image_sizes_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_image_sizes_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).raw_height) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_image_sizes_t),
            "::",
            stringify!(raw_height)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).raw_width) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_image_sizes_t),
            "::",
            stringify!(raw_width)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_image_sizes_t),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_image_sizes_t),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).top_margin) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_image_sizes_t),
            "::",
            stringify!(top_margin)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).left_margin) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_image_sizes_t),
            "::",
            stringify!(left_margin)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).iheight) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_image_sizes_t),
            "::",
            stringify!(iheight)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).iwidth) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_image_sizes_t),
            "::",
            stringify!(iwidth)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).raw_pitch) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_image_sizes_t),
            "::",
            stringify!(raw_pitch)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pixel_aspect) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_image_sizes_t),
            "::",
            stringify!(pixel_aspect)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).flip) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_image_sizes_t),
            "::",
            stringify!(flip)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mask) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_image_sizes_t),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).raw_aspect) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_image_sizes_t),
            "::",
            stringify!(raw_aspect)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).raw_inset_crops) as usize - ptr as usize },
        166usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_image_sizes_t),
            "::",
            stringify!(raw_inset_crops)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct libraw_area_t {
    pub t: libc::c_short,
    pub l: libc::c_short,
    pub b: libc::c_short,
    pub r: libc::c_short,
}
#[test]
fn bindgen_test_layout_libraw_area_t() {
    const UNINIT: ::core::mem::MaybeUninit<libraw_area_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<libraw_area_t>(),
        8usize,
        concat!("Size of: ", stringify!(libraw_area_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libraw_area_t>(),
        2usize,
        concat!("Alignment of ", stringify!(libraw_area_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).t) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_area_t),
            "::",
            stringify!(t)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_area_t),
            "::",
            stringify!(l)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_area_t),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).r) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_area_t),
            "::",
            stringify!(r)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ph1_t {
    pub format: libc::c_int,
    pub key_off: libc::c_int,
    pub tag_21a: libc::c_int,
    pub t_black: libc::c_int,
    pub split_col: libc::c_int,
    pub black_col: libc::c_int,
    pub split_row: libc::c_int,
    pub black_row: libc::c_int,
    pub tag_210: f32,
}
#[test]
fn bindgen_test_layout_ph1_t() {
    const UNINIT: ::core::mem::MaybeUninit<ph1_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ph1_t>(),
        36usize,
        concat!("Size of: ", stringify!(ph1_t))
    );
    assert_eq!(
        ::core::mem::align_of::<ph1_t>(),
        4usize,
        concat!("Alignment of ", stringify!(ph1_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ph1_t),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).key_off) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ph1_t),
            "::",
            stringify!(key_off)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tag_21a) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ph1_t),
            "::",
            stringify!(tag_21a)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).t_black) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ph1_t),
            "::",
            stringify!(t_black)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).split_col) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ph1_t),
            "::",
            stringify!(split_col)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).black_col) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ph1_t),
            "::",
            stringify!(black_col)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).split_row) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ph1_t),
            "::",
            stringify!(split_row)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).black_row) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ph1_t),
            "::",
            stringify!(black_row)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tag_210) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ph1_t),
            "::",
            stringify!(tag_210)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct libraw_dng_color_t {
    pub parsedfields: libc::c_uint,
    pub illuminant: ushort,
    pub calibration: [[f32; 4usize]; 4usize],
    pub colormatrix: [[f32; 3usize]; 4usize],
    pub forwardmatrix: [[f32; 4usize]; 3usize],
}
#[test]
fn bindgen_test_layout_libraw_dng_color_t() {
    const UNINIT: ::core::mem::MaybeUninit<libraw_dng_color_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<libraw_dng_color_t>(),
        168usize,
        concat!("Size of: ", stringify!(libraw_dng_color_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libraw_dng_color_t>(),
        4usize,
        concat!("Alignment of ", stringify!(libraw_dng_color_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).parsedfields) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_color_t),
            "::",
            stringify!(parsedfields)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).illuminant) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_color_t),
            "::",
            stringify!(illuminant)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).calibration) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_color_t),
            "::",
            stringify!(calibration)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).colormatrix) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_color_t),
            "::",
            stringify!(colormatrix)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).forwardmatrix) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_color_t),
            "::",
            stringify!(forwardmatrix)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct libraw_dng_levels_t {
    pub parsedfields: libc::c_uint,
    pub dng_cblack: [libc::c_uint; 4104usize],
    pub dng_black: libc::c_uint,
    pub dng_fcblack: [f32; 4104usize],
    pub dng_fblack: f32,
    pub dng_whitelevel: [libc::c_uint; 4usize],
    pub default_crop: [ushort; 4usize],
    pub user_crop: [f32; 4usize],
    pub preview_colorspace: libc::c_uint,
    pub analogbalance: [f32; 4usize],
    pub asshotneutral: [f32; 4usize],
    pub baseline_exposure: f32,
    pub LinearResponseLimit: f32,
}
#[test]
fn bindgen_test_layout_libraw_dng_levels_t() {
    const UNINIT: ::core::mem::MaybeUninit<libraw_dng_levels_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<libraw_dng_levels_t>(),
        32928usize,
        concat!("Size of: ", stringify!(libraw_dng_levels_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libraw_dng_levels_t>(),
        4usize,
        concat!("Alignment of ", stringify!(libraw_dng_levels_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).parsedfields) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_levels_t),
            "::",
            stringify!(parsedfields)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).dng_cblack) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_levels_t),
            "::",
            stringify!(dng_cblack)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).dng_black) as usize - ptr as usize },
        16420usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_levels_t),
            "::",
            stringify!(dng_black)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).dng_fcblack) as usize - ptr as usize },
        16424usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_levels_t),
            "::",
            stringify!(dng_fcblack)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).dng_fblack) as usize - ptr as usize },
        32840usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_levels_t),
            "::",
            stringify!(dng_fblack)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).dng_whitelevel) as usize - ptr as usize },
        32844usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_levels_t),
            "::",
            stringify!(dng_whitelevel)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).default_crop) as usize - ptr as usize },
        32860usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_levels_t),
            "::",
            stringify!(default_crop)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).user_crop) as usize - ptr as usize },
        32868usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_levels_t),
            "::",
            stringify!(user_crop)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).preview_colorspace) as usize - ptr as usize },
        32884usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_levels_t),
            "::",
            stringify!(preview_colorspace)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).analogbalance) as usize - ptr as usize },
        32888usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_levels_t),
            "::",
            stringify!(analogbalance)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).asshotneutral) as usize - ptr as usize },
        32904usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_levels_t),
            "::",
            stringify!(asshotneutral)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).baseline_exposure) as usize - ptr as usize },
        32920usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_levels_t),
            "::",
            stringify!(baseline_exposure)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LinearResponseLimit) as usize - ptr as usize },
        32924usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_levels_t),
            "::",
            stringify!(LinearResponseLimit)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct libraw_P1_color_t {
    pub romm_cam: [f32; 9usize],
}
#[test]
fn bindgen_test_layout_libraw_P1_color_t() {
    const UNINIT: ::core::mem::MaybeUninit<libraw_P1_color_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<libraw_P1_color_t>(),
        36usize,
        concat!("Size of: ", stringify!(libraw_P1_color_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libraw_P1_color_t>(),
        4usize,
        concat!("Alignment of ", stringify!(libraw_P1_color_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).romm_cam) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_P1_color_t),
            "::",
            stringify!(romm_cam)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct libraw_canon_makernotes_t {
    pub ColorDataVer: libc::c_int,
    pub ColorDataSubVer: libc::c_int,
    pub SpecularWhiteLevel: libc::c_int,
    pub NormalWhiteLevel: libc::c_int,
    pub ChannelBlackLevel: [libc::c_int; 4usize],
    pub AverageBlackLevel: libc::c_int,
    pub multishot: [libc::c_uint; 4usize],
    pub MeteringMode: libc::c_short,
    pub SpotMeteringMode: libc::c_short,
    pub FlashMeteringMode: uchar,
    pub FlashExposureLock: libc::c_short,
    pub ExposureMode: libc::c_short,
    pub AESetting: libc::c_short,
    pub ImageStabilization: libc::c_short,
    pub FlashMode: libc::c_short,
    pub FlashActivity: libc::c_short,
    pub FlashBits: libc::c_short,
    pub ManualFlashOutput: libc::c_short,
    pub FlashOutput: libc::c_short,
    pub FlashGuideNumber: libc::c_short,
    pub ContinuousDrive: libc::c_short,
    pub SensorWidth: libc::c_short,
    pub SensorHeight: libc::c_short,
    pub AFMicroAdjMode: libc::c_int,
    pub AFMicroAdjValue: f32,
    pub MakernotesFlip: libc::c_short,
    pub RecordMode: libc::c_short,
    pub SRAWQuality: libc::c_short,
    pub wbi: libc::c_uint,
    pub RF_lensID: libc::c_short,
    pub AutoLightingOptimizer: libc::c_int,
    pub HighlightTonePriority: libc::c_int,
    pub Quality: libc::c_short,
    pub CanonLog: libc::c_int,
    pub DefaultCropAbsolute: libraw_area_t,
    pub RecommendedImageArea: libraw_area_t,
    pub LeftOpticalBlack: libraw_area_t,
    pub UpperOpticalBlack: libraw_area_t,
    pub ActiveArea: libraw_area_t,
    pub ISOgain: [libc::c_short; 2usize],
}
#[test]
fn bindgen_test_layout_libraw_canon_makernotes_t() {
    const UNINIT: ::core::mem::MaybeUninit<libraw_canon_makernotes_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<libraw_canon_makernotes_t>(),
        168usize,
        concat!("Size of: ", stringify!(libraw_canon_makernotes_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libraw_canon_makernotes_t>(),
        4usize,
        concat!("Alignment of ", stringify!(libraw_canon_makernotes_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ColorDataVer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(ColorDataVer)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ColorDataSubVer) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(ColorDataSubVer)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SpecularWhiteLevel) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(SpecularWhiteLevel)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).NormalWhiteLevel) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(NormalWhiteLevel)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ChannelBlackLevel) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(ChannelBlackLevel)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AverageBlackLevel) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(AverageBlackLevel)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).multishot) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(multishot)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MeteringMode) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(MeteringMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SpotMeteringMode) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(SpotMeteringMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FlashMeteringMode) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(FlashMeteringMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FlashExposureLock) as usize - ptr as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(FlashExposureLock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ExposureMode) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(ExposureMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AESetting) as usize - ptr as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(AESetting)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ImageStabilization) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(ImageStabilization)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FlashMode) as usize - ptr as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(FlashMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FlashActivity) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(FlashActivity)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FlashBits) as usize - ptr as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(FlashBits)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ManualFlashOutput) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(ManualFlashOutput)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FlashOutput) as usize - ptr as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(FlashOutput)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FlashGuideNumber) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(FlashGuideNumber)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ContinuousDrive) as usize - ptr as usize },
        78usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(ContinuousDrive)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SensorWidth) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(SensorWidth)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SensorHeight) as usize - ptr as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(SensorHeight)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AFMicroAdjMode) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(AFMicroAdjMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AFMicroAdjValue) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(AFMicroAdjValue)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MakernotesFlip) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(MakernotesFlip)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RecordMode) as usize - ptr as usize },
        94usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(RecordMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SRAWQuality) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(SRAWQuality)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).wbi) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(wbi)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RF_lensID) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(RF_lensID)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AutoLightingOptimizer) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(AutoLightingOptimizer)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).HighlightTonePriority) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(HighlightTonePriority)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Quality) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(Quality)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CanonLog) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(CanonLog)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DefaultCropAbsolute) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(DefaultCropAbsolute)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RecommendedImageArea) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(RecommendedImageArea)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LeftOpticalBlack) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(LeftOpticalBlack)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).UpperOpticalBlack) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(UpperOpticalBlack)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ActiveArea) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(ActiveArea)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ISOgain) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(ISOgain)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct libraw_hasselblad_makernotes_t {
    pub BaseISO: libc::c_int,
    pub Gain: f64,
    pub Sensor: [libc::c_char; 8usize],
    pub SensorUnit: [libc::c_char; 64usize],
    pub HostBody: [libc::c_char; 64usize],
    pub SensorCode: libc::c_int,
    pub SensorSubCode: libc::c_int,
    pub CoatingCode: libc::c_int,
    pub uncropped: libc::c_int,
    pub CaptureSequenceInitiator: [libc::c_char; 32usize],
    pub SensorUnitConnector: [libc::c_char; 64usize],
    pub format: libc::c_int,
    pub nIFD_CM: [libc::c_int; 2usize],
    pub RecommendedCrop: [libc::c_int; 2usize],
    pub mnColorMatrix: [[f64; 3usize]; 4usize],
}
#[test]
fn bindgen_test_layout_libraw_hasselblad_makernotes_t() {
    const UNINIT: ::core::mem::MaybeUninit<libraw_hasselblad_makernotes_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<libraw_hasselblad_makernotes_t>(),
        384usize,
        concat!("Size of: ", stringify!(libraw_hasselblad_makernotes_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libraw_hasselblad_makernotes_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_hasselblad_makernotes_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BaseISO) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_hasselblad_makernotes_t),
            "::",
            stringify!(BaseISO)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Gain) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_hasselblad_makernotes_t),
            "::",
            stringify!(Gain)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Sensor) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_hasselblad_makernotes_t),
            "::",
            stringify!(Sensor)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SensorUnit) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_hasselblad_makernotes_t),
            "::",
            stringify!(SensorUnit)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).HostBody) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_hasselblad_makernotes_t),
            "::",
            stringify!(HostBody)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SensorCode) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_hasselblad_makernotes_t),
            "::",
            stringify!(SensorCode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SensorSubCode) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_hasselblad_makernotes_t),
            "::",
            stringify!(SensorSubCode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CoatingCode) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_hasselblad_makernotes_t),
            "::",
            stringify!(CoatingCode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).uncropped) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_hasselblad_makernotes_t),
            "::",
            stringify!(uncropped)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CaptureSequenceInitiator) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_hasselblad_makernotes_t),
            "::",
            stringify!(CaptureSequenceInitiator)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SensorUnitConnector) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_hasselblad_makernotes_t),
            "::",
            stringify!(SensorUnitConnector)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_hasselblad_makernotes_t),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nIFD_CM) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_hasselblad_makernotes_t),
            "::",
            stringify!(nIFD_CM)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RecommendedCrop) as usize - ptr as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_hasselblad_makernotes_t),
            "::",
            stringify!(RecommendedCrop)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mnColorMatrix) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_hasselblad_makernotes_t),
            "::",
            stringify!(mnColorMatrix)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct libraw_fuji_info_t {
    pub ExpoMidPointShift: f32,
    pub DynamicRange: ushort,
    pub FilmMode: ushort,
    pub DynamicRangeSetting: ushort,
    pub DevelopmentDynamicRange: ushort,
    pub AutoDynamicRange: ushort,
    pub DRangePriority: ushort,
    pub DRangePriorityAuto: ushort,
    pub DRangePriorityFixed: ushort,
    pub FujiModel: [libc::c_char; 33usize],
    pub FujiModel2: [libc::c_char; 33usize],
    pub BrightnessCompensation: f32,
    pub FocusMode: ushort,
    pub AFMode: ushort,
    pub FocusPixel: [ushort; 2usize],
    pub PrioritySettings: ushort,
    pub FocusSettings: libc::c_uint,
    pub AF_C_Settings: libc::c_uint,
    pub FocusWarning: ushort,
    pub ImageStabilization: [ushort; 3usize],
    pub FlashMode: ushort,
    pub WB_Preset: ushort,
    pub ShutterType: ushort,
    pub ExrMode: ushort,
    pub Macro: ushort,
    pub Rating: libc::c_uint,
    pub CropMode: ushort,
    pub SerialSignature: [libc::c_char; 13usize],
    pub SensorID: [libc::c_char; 5usize],
    pub RAFVersion: [libc::c_char; 5usize],
    pub RAFDataGeneration: libc::c_int,
    pub RAFDataVersion: ushort,
    pub isTSNERDTS: libc::c_int,
    pub DriveMode: libc::c_short,
    pub BlackLevel: [ushort; 9usize],
    pub RAFData_ImageSizeTable: [libc::c_uint; 32usize],
    pub AutoBracketing: libc::c_int,
    pub SequenceNumber: libc::c_int,
    pub SeriesLength: libc::c_int,
    pub PixelShiftOffset: [f32; 2usize],
    pub ImageCount: libc::c_int,
}
#[test]
fn bindgen_test_layout_libraw_fuji_info_t() {
    const UNINIT: ::core::mem::MaybeUninit<libraw_fuji_info_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<libraw_fuji_info_t>(),
        348usize,
        concat!("Size of: ", stringify!(libraw_fuji_info_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libraw_fuji_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(libraw_fuji_info_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ExpoMidPointShift) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(ExpoMidPointShift)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DynamicRange) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(DynamicRange)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FilmMode) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(FilmMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DynamicRangeSetting) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(DynamicRangeSetting)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DevelopmentDynamicRange) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(DevelopmentDynamicRange)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AutoDynamicRange) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(AutoDynamicRange)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DRangePriority) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(DRangePriority)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DRangePriorityAuto) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(DRangePriorityAuto)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DRangePriorityFixed) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(DRangePriorityFixed)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FujiModel) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(FujiModel)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FujiModel2) as usize - ptr as usize },
        53usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(FujiModel2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BrightnessCompensation) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(BrightnessCompensation)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FocusMode) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(FocusMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AFMode) as usize - ptr as usize },
        94usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(AFMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FocusPixel) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(FocusPixel)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PrioritySettings) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(PrioritySettings)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FocusSettings) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(FocusSettings)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AF_C_Settings) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(AF_C_Settings)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FocusWarning) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(FocusWarning)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ImageStabilization) as usize - ptr as usize },
        114usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(ImageStabilization)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FlashMode) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(FlashMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).WB_Preset) as usize - ptr as usize },
        122usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(WB_Preset)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ShutterType) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(ShutterType)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ExrMode) as usize - ptr as usize },
        126usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(ExrMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Macro) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(Macro)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Rating) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(Rating)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CropMode) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(CropMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SerialSignature) as usize - ptr as usize },
        138usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(SerialSignature)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SensorID) as usize - ptr as usize },
        151usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(SensorID)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RAFVersion) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(RAFVersion)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RAFDataGeneration) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(RAFDataGeneration)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RAFDataVersion) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(RAFDataVersion)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).isTSNERDTS) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(isTSNERDTS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DriveMode) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(DriveMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BlackLevel) as usize - ptr as usize },
        178usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(BlackLevel)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RAFData_ImageSizeTable) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(RAFData_ImageSizeTable)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AutoBracketing) as usize - ptr as usize },
        324usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(AutoBracketing)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SequenceNumber) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(SequenceNumber)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SeriesLength) as usize - ptr as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(SeriesLength)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PixelShiftOffset) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(PixelShiftOffset)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ImageCount) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(ImageCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct libraw_sensor_highspeed_crop_t {
    pub cleft: ushort,
    pub ctop: ushort,
    pub cwidth: ushort,
    pub cheight: ushort,
}
#[test]
fn bindgen_test_layout_libraw_sensor_highspeed_crop_t() {
    const UNINIT: ::core::mem::MaybeUninit<libraw_sensor_highspeed_crop_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<libraw_sensor_highspeed_crop_t>(),
        8usize,
        concat!("Size of: ", stringify!(libraw_sensor_highspeed_crop_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libraw_sensor_highspeed_crop_t>(),
        2usize,
        concat!("Alignment of ", stringify!(libraw_sensor_highspeed_crop_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cleft) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sensor_highspeed_crop_t),
            "::",
            stringify!(cleft)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ctop) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sensor_highspeed_crop_t),
            "::",
            stringify!(ctop)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cwidth) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sensor_highspeed_crop_t),
            "::",
            stringify!(cwidth)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cheight) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sensor_highspeed_crop_t),
            "::",
            stringify!(cheight)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct libraw_nikon_makernotes_t {
    pub ExposureBracketValue: f64,
    pub ActiveDLighting: ushort,
    pub ShootingMode: ushort,
    pub ImageStabilization: [uchar; 7usize],
    pub VibrationReduction: uchar,
    pub VRMode: uchar,
    pub FlashSetting: [libc::c_char; 13usize],
    pub FlashType: [libc::c_char; 20usize],
    pub FlashExposureCompensation: [uchar; 4usize],
    pub ExternalFlashExposureComp: [uchar; 4usize],
    pub FlashExposureBracketValue: [uchar; 4usize],
    pub FlashMode: uchar,
    pub FlashExposureCompensation2: libc::c_schar,
    pub FlashExposureCompensation3: libc::c_schar,
    pub FlashExposureCompensation4: libc::c_schar,
    pub FlashSource: uchar,
    pub FlashFirmware: [uchar; 2usize],
    pub ExternalFlashFlags: uchar,
    pub FlashControlCommanderMode: uchar,
    pub FlashOutputAndCompensation: uchar,
    pub FlashFocalLength: uchar,
    pub FlashGNDistance: uchar,
    pub FlashGroupControlMode: [uchar; 4usize],
    pub FlashGroupOutputAndCompensation: [uchar; 4usize],
    pub FlashColorFilter: uchar,
    pub NEFCompression: ushort,
    pub ExposureMode: libc::c_int,
    pub ExposureProgram: libc::c_int,
    pub nMEshots: libc::c_int,
    pub MEgainOn: libc::c_int,
    pub ME_WB: [f64; 4usize],
    pub AFFineTune: uchar,
    pub AFFineTuneIndex: uchar,
    pub AFFineTuneAdj: i8,
    pub LensDataVersion: libc::c_uint,
    pub FlashInfoVersion: libc::c_uint,
    pub ColorBalanceVersion: libc::c_uint,
    pub key: uchar,
    pub NEFBitDepth: [ushort; 4usize],
    pub HighSpeedCropFormat: ushort,
    pub SensorHighSpeedCrop: libraw_sensor_highspeed_crop_t,
    pub SensorWidth: ushort,
    pub SensorHeight: ushort,
    pub Active_D_Lighting: ushort,
    pub ShotInfoVersion: libc::c_uint,
    pub MakernotesFlip: libc::c_short,
    pub RollAngle: f64,
    pub PitchAngle: f64,
    pub YawAngle: f64,
}
#[test]
fn bindgen_test_layout_libraw_nikon_makernotes_t() {
    const UNINIT: ::core::mem::MaybeUninit<libraw_nikon_makernotes_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<libraw_nikon_makernotes_t>(),
        224usize,
        concat!("Size of: ", stringify!(libraw_nikon_makernotes_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libraw_nikon_makernotes_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_nikon_makernotes_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ExposureBracketValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(ExposureBracketValue)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ActiveDLighting) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(ActiveDLighting)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ShootingMode) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(ShootingMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ImageStabilization) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(ImageStabilization)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).VibrationReduction) as usize - ptr as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(VibrationReduction)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).VRMode) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(VRMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FlashSetting) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashSetting)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FlashType) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashType)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FlashExposureCompensation) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashExposureCompensation)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ExternalFlashExposureComp) as usize - ptr as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(ExternalFlashExposureComp)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FlashExposureBracketValue) as usize - ptr as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashExposureBracketValue)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FlashMode) as usize - ptr as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FlashExposureCompensation2) as usize - ptr as usize },
        67usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashExposureCompensation2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FlashExposureCompensation3) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashExposureCompensation3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FlashExposureCompensation4) as usize - ptr as usize },
        69usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashExposureCompensation4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FlashSource) as usize - ptr as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashSource)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FlashFirmware) as usize - ptr as usize },
        71usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashFirmware)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ExternalFlashFlags) as usize - ptr as usize },
        73usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(ExternalFlashFlags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FlashControlCommanderMode) as usize - ptr as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashControlCommanderMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FlashOutputAndCompensation) as usize - ptr as usize },
        75usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashOutputAndCompensation)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FlashFocalLength) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashFocalLength)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FlashGNDistance) as usize - ptr as usize },
        77usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashGNDistance)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FlashGroupControlMode) as usize - ptr as usize },
        78usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashGroupControlMode)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).FlashGroupOutputAndCompensation) as usize - ptr as usize
        },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashGroupOutputAndCompensation)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FlashColorFilter) as usize - ptr as usize },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashColorFilter)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).NEFCompression) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(NEFCompression)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ExposureMode) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(ExposureMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ExposureProgram) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(ExposureProgram)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nMEshots) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(nMEshots)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MEgainOn) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(MEgainOn)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ME_WB) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(ME_WB)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AFFineTune) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(AFFineTune)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AFFineTuneIndex) as usize - ptr as usize },
        145usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(AFFineTuneIndex)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AFFineTuneAdj) as usize - ptr as usize },
        146usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(AFFineTuneAdj)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LensDataVersion) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(LensDataVersion)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FlashInfoVersion) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashInfoVersion)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ColorBalanceVersion) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(ColorBalanceVersion)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).NEFBitDepth) as usize - ptr as usize },
        162usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(NEFBitDepth)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).HighSpeedCropFormat) as usize - ptr as usize },
        170usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(HighSpeedCropFormat)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SensorHighSpeedCrop) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(SensorHighSpeedCrop)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SensorWidth) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(SensorWidth)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SensorHeight) as usize - ptr as usize },
        182usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(SensorHeight)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Active_D_Lighting) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(Active_D_Lighting)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ShotInfoVersion) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(ShotInfoVersion)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MakernotesFlip) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(MakernotesFlip)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RollAngle) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(RollAngle)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PitchAngle) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(PitchAngle)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).YawAngle) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(YawAngle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct libraw_olympus_makernotes_t {
    pub CameraType2: [libc::c_char; 6usize],
    pub ValidBits: ushort,
    pub SensorCalibration: [libc::c_int; 2usize],
    pub DriveMode: [ushort; 5usize],
    pub ColorSpace: ushort,
    pub FocusMode: [ushort; 2usize],
    pub AutoFocus: ushort,
    pub AFPoint: ushort,
    pub AFAreas: [libc::c_uint; 64usize],
    pub AFPointSelected: [f64; 5usize],
    pub AFResult: ushort,
    pub AFFineTune: uchar,
    pub AFFineTuneAdj: [libc::c_short; 3usize],
    pub SpecialMode: [libc::c_uint; 3usize],
    pub ZoomStepCount: ushort,
    pub FocusStepCount: ushort,
    pub FocusStepInfinity: ushort,
    pub FocusStepNear: ushort,
    pub FocusDistance: f64,
    pub AspectFrame: [ushort; 4usize],
    pub StackedImage: [libc::c_uint; 2usize],
    pub isLiveND: uchar,
    pub LiveNDfactor: libc::c_uint,
    pub Panorama_mode: ushort,
    pub Panorama_frameNum: ushort,
}
#[test]
fn bindgen_test_layout_libraw_olympus_makernotes_t() {
    const UNINIT: ::core::mem::MaybeUninit<libraw_olympus_makernotes_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<libraw_olympus_makernotes_t>(),
        408usize,
        concat!("Size of: ", stringify!(libraw_olympus_makernotes_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libraw_olympus_makernotes_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_olympus_makernotes_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CameraType2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(CameraType2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ValidBits) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(ValidBits)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SensorCalibration) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(SensorCalibration)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DriveMode) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(DriveMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ColorSpace) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(ColorSpace)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FocusMode) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(FocusMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AutoFocus) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(AutoFocus)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AFPoint) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(AFPoint)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AFAreas) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(AFAreas)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AFPointSelected) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(AFPointSelected)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AFResult) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(AFResult)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AFFineTune) as usize - ptr as usize },
        338usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(AFFineTune)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AFFineTuneAdj) as usize - ptr as usize },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(AFFineTuneAdj)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SpecialMode) as usize - ptr as usize },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(SpecialMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ZoomStepCount) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(ZoomStepCount)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FocusStepCount) as usize - ptr as usize },
        362usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(FocusStepCount)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FocusStepInfinity) as usize - ptr as usize },
        364usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(FocusStepInfinity)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FocusStepNear) as usize - ptr as usize },
        366usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(FocusStepNear)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FocusDistance) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(FocusDistance)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AspectFrame) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(AspectFrame)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).StackedImage) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(StackedImage)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).isLiveND) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(isLiveND)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LiveNDfactor) as usize - ptr as usize },
        396usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(LiveNDfactor)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Panorama_mode) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(Panorama_mode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Panorama_frameNum) as usize - ptr as usize },
        402usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(Panorama_frameNum)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct libraw_panasonic_makernotes_t {
    pub Compression: ushort,
    pub BlackLevelDim: ushort,
    pub BlackLevel: [f32; 8usize],
    pub Multishot: libc::c_uint,
    pub gamma: f32,
    pub HighISOMultiplier: [libc::c_int; 3usize],
    pub FocusStepNear: libc::c_short,
    pub FocusStepCount: libc::c_short,
    pub ZoomPosition: libc::c_uint,
    pub LensManufacturer: libc::c_uint,
}
#[test]
fn bindgen_test_layout_libraw_panasonic_makernotes_t() {
    const UNINIT: ::core::mem::MaybeUninit<libraw_panasonic_makernotes_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<libraw_panasonic_makernotes_t>(),
        68usize,
        concat!("Size of: ", stringify!(libraw_panasonic_makernotes_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libraw_panasonic_makernotes_t>(),
        4usize,
        concat!("Alignment of ", stringify!(libraw_panasonic_makernotes_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Compression) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_panasonic_makernotes_t),
            "::",
            stringify!(Compression)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BlackLevelDim) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_panasonic_makernotes_t),
            "::",
            stringify!(BlackLevelDim)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BlackLevel) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_panasonic_makernotes_t),
            "::",
            stringify!(BlackLevel)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Multishot) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_panasonic_makernotes_t),
            "::",
            stringify!(Multishot)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).gamma) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_panasonic_makernotes_t),
            "::",
            stringify!(gamma)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).HighISOMultiplier) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_panasonic_makernotes_t),
            "::",
            stringify!(HighISOMultiplier)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FocusStepNear) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_panasonic_makernotes_t),
            "::",
            stringify!(FocusStepNear)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FocusStepCount) as usize - ptr as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_panasonic_makernotes_t),
            "::",
            stringify!(FocusStepCount)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ZoomPosition) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_panasonic_makernotes_t),
            "::",
            stringify!(ZoomPosition)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LensManufacturer) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_panasonic_makernotes_t),
            "::",
            stringify!(LensManufacturer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct libraw_pentax_makernotes_t {
    pub DriveMode: [uchar; 4usize],
    pub FocusMode: [ushort; 2usize],
    pub AFPointSelected: [ushort; 2usize],
    pub AFPointSelected_Area: ushort,
    pub AFPointsInFocus_version: libc::c_int,
    pub AFPointsInFocus: libc::c_uint,
    pub FocusPosition: ushort,
    pub AFAdjustment: libc::c_short,
    pub AFPointMode: uchar,
    pub MultiExposure: uchar,
    pub Quality: ushort,
}
#[test]
fn bindgen_test_layout_libraw_pentax_makernotes_t() {
    const UNINIT: ::core::mem::MaybeUninit<libraw_pentax_makernotes_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<libraw_pentax_makernotes_t>(),
        32usize,
        concat!("Size of: ", stringify!(libraw_pentax_makernotes_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libraw_pentax_makernotes_t>(),
        4usize,
        concat!("Alignment of ", stringify!(libraw_pentax_makernotes_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DriveMode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_pentax_makernotes_t),
            "::",
            stringify!(DriveMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FocusMode) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_pentax_makernotes_t),
            "::",
            stringify!(FocusMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AFPointSelected) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_pentax_makernotes_t),
            "::",
            stringify!(AFPointSelected)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AFPointSelected_Area) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_pentax_makernotes_t),
            "::",
            stringify!(AFPointSelected_Area)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AFPointsInFocus_version) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_pentax_makernotes_t),
            "::",
            stringify!(AFPointsInFocus_version)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AFPointsInFocus) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_pentax_makernotes_t),
            "::",
            stringify!(AFPointsInFocus)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FocusPosition) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_pentax_makernotes_t),
            "::",
            stringify!(FocusPosition)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AFAdjustment) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_pentax_makernotes_t),
            "::",
            stringify!(AFAdjustment)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AFPointMode) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_pentax_makernotes_t),
            "::",
            stringify!(AFPointMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MultiExposure) as usize - ptr as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_pentax_makernotes_t),
            "::",
            stringify!(MultiExposure)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Quality) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_pentax_makernotes_t),
            "::",
            stringify!(Quality)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct libraw_ricoh_makernotes_t {
    pub AFStatus: ushort,
    pub AFAreaXPosition: [libc::c_uint; 2usize],
    pub AFAreaYPosition: [libc::c_uint; 2usize],
    pub AFAreaMode: ushort,
    pub SensorWidth: libc::c_uint,
    pub SensorHeight: libc::c_uint,
    pub CroppedImageWidth: libc::c_uint,
    pub CroppedImageHeight: libc::c_uint,
    pub WideAdapter: ushort,
    pub CropMode: ushort,
    pub NDFilter: ushort,
    pub AutoBracketing: ushort,
    pub MacroMode: ushort,
    pub FlashMode: ushort,
    pub FlashExposureComp: f64,
    pub ManualFlashOutput: f64,
}
#[test]
fn bindgen_test_layout_libraw_ricoh_makernotes_t() {
    const UNINIT: ::core::mem::MaybeUninit<libraw_ricoh_makernotes_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<libraw_ricoh_makernotes_t>(),
        72usize,
        concat!("Size of: ", stringify!(libraw_ricoh_makernotes_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libraw_ricoh_makernotes_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_ricoh_makernotes_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AFStatus) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_ricoh_makernotes_t),
            "::",
            stringify!(AFStatus)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AFAreaXPosition) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_ricoh_makernotes_t),
            "::",
            stringify!(AFAreaXPosition)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AFAreaYPosition) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_ricoh_makernotes_t),
            "::",
            stringify!(AFAreaYPosition)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AFAreaMode) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_ricoh_makernotes_t),
            "::",
            stringify!(AFAreaMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SensorWidth) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_ricoh_makernotes_t),
            "::",
            stringify!(SensorWidth)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SensorHeight) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_ricoh_makernotes_t),
            "::",
            stringify!(SensorHeight)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CroppedImageWidth) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_ricoh_makernotes_t),
            "::",
            stringify!(CroppedImageWidth)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CroppedImageHeight) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_ricoh_makernotes_t),
            "::",
            stringify!(CroppedImageHeight)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).WideAdapter) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_ricoh_makernotes_t),
            "::",
            stringify!(WideAdapter)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CropMode) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_ricoh_makernotes_t),
            "::",
            stringify!(CropMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).NDFilter) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_ricoh_makernotes_t),
            "::",
            stringify!(NDFilter)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AutoBracketing) as usize - ptr as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_ricoh_makernotes_t),
            "::",
            stringify!(AutoBracketing)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MacroMode) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_ricoh_makernotes_t),
            "::",
            stringify!(MacroMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FlashMode) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_ricoh_makernotes_t),
            "::",
            stringify!(FlashMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FlashExposureComp) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_ricoh_makernotes_t),
            "::",
            stringify!(FlashExposureComp)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ManualFlashOutput) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_ricoh_makernotes_t),
            "::",
            stringify!(ManualFlashOutput)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct libraw_samsung_makernotes_t {
    pub ImageSizeFull: [libc::c_uint; 4usize],
    pub ImageSizeCrop: [libc::c_uint; 4usize],
    pub ColorSpace: [libc::c_int; 2usize],
    pub key: [libc::c_uint; 11usize],
    pub DigitalGain: f64,
    pub DeviceType: libc::c_int,
    pub LensFirmware: [libc::c_char; 32usize],
}
#[test]
fn bindgen_test_layout_libraw_samsung_makernotes_t() {
    const UNINIT: ::core::mem::MaybeUninit<libraw_samsung_makernotes_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<libraw_samsung_makernotes_t>(),
        136usize,
        concat!("Size of: ", stringify!(libraw_samsung_makernotes_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libraw_samsung_makernotes_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_samsung_makernotes_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ImageSizeFull) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_samsung_makernotes_t),
            "::",
            stringify!(ImageSizeFull)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ImageSizeCrop) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_samsung_makernotes_t),
            "::",
            stringify!(ImageSizeCrop)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ColorSpace) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_samsung_makernotes_t),
            "::",
            stringify!(ColorSpace)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_samsung_makernotes_t),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DigitalGain) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_samsung_makernotes_t),
            "::",
            stringify!(DigitalGain)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DeviceType) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_samsung_makernotes_t),
            "::",
            stringify!(DeviceType)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LensFirmware) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_samsung_makernotes_t),
            "::",
            stringify!(LensFirmware)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct libraw_kodak_makernotes_t {
    pub BlackLevelTop: ushort,
    pub BlackLevelBottom: ushort,
    pub offset_left: libc::c_short,
    pub offset_top: libc::c_short,
    pub clipBlack: ushort,
    pub clipWhite: ushort,
    pub romm_camDaylight: [[f32; 3usize]; 3usize],
    pub romm_camTungsten: [[f32; 3usize]; 3usize],
    pub romm_camFluorescent: [[f32; 3usize]; 3usize],
    pub romm_camFlash: [[f32; 3usize]; 3usize],
    pub romm_camCustom: [[f32; 3usize]; 3usize],
    pub romm_camAuto: [[f32; 3usize]; 3usize],
    pub val018percent: ushort,
    pub val100percent: ushort,
    pub val170percent: ushort,
    pub MakerNoteKodak8a: libc::c_short,
    pub ISOCalibrationGain: f32,
    pub AnalogISO: f32,
}
#[test]
fn bindgen_test_layout_libraw_kodak_makernotes_t() {
    const UNINIT: ::core::mem::MaybeUninit<libraw_kodak_makernotes_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<libraw_kodak_makernotes_t>(),
        244usize,
        concat!("Size of: ", stringify!(libraw_kodak_makernotes_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libraw_kodak_makernotes_t>(),
        4usize,
        concat!("Alignment of ", stringify!(libraw_kodak_makernotes_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BlackLevelTop) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(BlackLevelTop)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BlackLevelBottom) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(BlackLevelBottom)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).offset_left) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(offset_left)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).offset_top) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(offset_top)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).clipBlack) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(clipBlack)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).clipWhite) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(clipWhite)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).romm_camDaylight) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(romm_camDaylight)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).romm_camTungsten) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(romm_camTungsten)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).romm_camFluorescent) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(romm_camFluorescent)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).romm_camFlash) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(romm_camFlash)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).romm_camCustom) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(romm_camCustom)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).romm_camAuto) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(romm_camAuto)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).val018percent) as usize - ptr as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(val018percent)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).val100percent) as usize - ptr as usize },
        230usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(val100percent)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).val170percent) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(val170percent)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MakerNoteKodak8a) as usize - ptr as usize },
        234usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(MakerNoteKodak8a)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ISOCalibrationGain) as usize - ptr as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(ISOCalibrationGain)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AnalogISO) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(AnalogISO)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct libraw_p1_makernotes_t {
    pub Software: [libc::c_char; 64usize],
    pub SystemType: [libc::c_char; 64usize],
    pub FirmwareString: [libc::c_char; 256usize],
    pub SystemModel: [libc::c_char; 64usize],
}
#[test]
fn bindgen_test_layout_libraw_p1_makernotes_t() {
    const UNINIT: ::core::mem::MaybeUninit<libraw_p1_makernotes_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<libraw_p1_makernotes_t>(),
        448usize,
        concat!("Size of: ", stringify!(libraw_p1_makernotes_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libraw_p1_makernotes_t>(),
        1usize,
        concat!("Alignment of ", stringify!(libraw_p1_makernotes_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Software) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_p1_makernotes_t),
            "::",
            stringify!(Software)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SystemType) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_p1_makernotes_t),
            "::",
            stringify!(SystemType)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FirmwareString) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_p1_makernotes_t),
            "::",
            stringify!(FirmwareString)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SystemModel) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_p1_makernotes_t),
            "::",
            stringify!(SystemModel)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct libraw_sony_info_t {
    pub CameraType: ushort,
    pub Sony0x9400_version: uchar,
    pub Sony0x9400_ReleaseMode2: uchar,
    pub Sony0x9400_SequenceImageNumber: libc::c_uint,
    pub Sony0x9400_SequenceLength1: uchar,
    pub Sony0x9400_SequenceFileNumber: libc::c_uint,
    pub Sony0x9400_SequenceLength2: uchar,
    pub AFAreaModeSetting: u8,
    pub AFAreaMode: u16,
    pub FlexibleSpotPosition: [ushort; 2usize],
    pub AFPointSelected: u8,
    pub AFPointSelected_0x201e: u8,
    pub nAFPointsUsed: libc::c_short,
    pub AFPointsUsed: [u8; 10usize],
    pub AFTracking: u8,
    pub AFType: u8,
    pub FocusLocation: [ushort; 4usize],
    pub FocusPosition: ushort,
    pub AFMicroAdjValue: i8,
    pub AFMicroAdjOn: i8,
    pub AFMicroAdjRegisteredLenses: uchar,
    pub VariableLowPassFilter: ushort,
    pub LongExposureNoiseReduction: libc::c_uint,
    pub HighISONoiseReduction: ushort,
    pub HDR: [ushort; 2usize],
    pub group2010: ushort,
    pub group9050: ushort,
    pub real_iso_offset: ushort,
    pub MeteringMode_offset: ushort,
    pub ExposureProgram_offset: ushort,
    pub ReleaseMode2_offset: ushort,
    pub MinoltaCamID: libc::c_uint,
    pub firmware: f32,
    pub ImageCount3_offset: ushort,
    pub ImageCount3: libc::c_uint,
    pub ElectronicFrontCurtainShutter: libc::c_uint,
    pub MeteringMode2: ushort,
    pub SonyDateTime: [libc::c_char; 20usize],
    pub ShotNumberSincePowerUp: libc::c_uint,
    pub PixelShiftGroupPrefix: ushort,
    pub PixelShiftGroupID: libc::c_uint,
    pub nShotsInPixelShiftGroup: libc::c_char,
    pub numInPixelShiftGroup: libc::c_char,
    pub prd_ImageHeight: ushort,
    pub prd_ImageWidth: ushort,
    pub prd_Total_bps: ushort,
    pub prd_Active_bps: ushort,
    pub prd_StorageMethod: ushort,
    pub prd_BayerPattern: ushort,
    pub SonyRawFileType: ushort,
    pub RAWFileType: ushort,
    pub RawSizeType: ushort,
    pub Quality: libc::c_uint,
    pub FileFormat: ushort,
    pub MetaVersion: [libc::c_char; 16usize],
}
#[test]
fn bindgen_test_layout_libraw_sony_info_t() {
    const UNINIT: ::core::mem::MaybeUninit<libraw_sony_info_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<libraw_sony_info_t>(),
        180usize,
        concat!("Size of: ", stringify!(libraw_sony_info_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libraw_sony_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(libraw_sony_info_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CameraType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(CameraType)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Sony0x9400_version) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(Sony0x9400_version)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Sony0x9400_ReleaseMode2) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(Sony0x9400_ReleaseMode2)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Sony0x9400_SequenceImageNumber) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(Sony0x9400_SequenceImageNumber)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Sony0x9400_SequenceLength1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(Sony0x9400_SequenceLength1)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).Sony0x9400_SequenceFileNumber) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(Sony0x9400_SequenceFileNumber)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Sony0x9400_SequenceLength2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(Sony0x9400_SequenceLength2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AFAreaModeSetting) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(AFAreaModeSetting)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AFAreaMode) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(AFAreaMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FlexibleSpotPosition) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(FlexibleSpotPosition)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AFPointSelected) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(AFPointSelected)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AFPointSelected_0x201e) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(AFPointSelected_0x201e)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nAFPointsUsed) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(nAFPointsUsed)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AFPointsUsed) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(AFPointsUsed)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AFTracking) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(AFTracking)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AFType) as usize - ptr as usize },
        39usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(AFType)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FocusLocation) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(FocusLocation)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FocusPosition) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(FocusPosition)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AFMicroAdjValue) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(AFMicroAdjValue)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AFMicroAdjOn) as usize - ptr as usize },
        51usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(AFMicroAdjOn)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AFMicroAdjRegisteredLenses) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(AFMicroAdjRegisteredLenses)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).VariableLowPassFilter) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(VariableLowPassFilter)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LongExposureNoiseReduction) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(LongExposureNoiseReduction)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).HighISONoiseReduction) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(HighISONoiseReduction)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).HDR) as usize - ptr as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(HDR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).group2010) as usize - ptr as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(group2010)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).group9050) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(group9050)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).real_iso_offset) as usize - ptr as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(real_iso_offset)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MeteringMode_offset) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(MeteringMode_offset)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ExposureProgram_offset) as usize - ptr as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(ExposureProgram_offset)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ReleaseMode2_offset) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(ReleaseMode2_offset)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MinoltaCamID) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(MinoltaCamID)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).firmware) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(firmware)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ImageCount3_offset) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(ImageCount3_offset)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ImageCount3) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(ImageCount3)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ElectronicFrontCurtainShutter) as usize - ptr as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(ElectronicFrontCurtainShutter)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MeteringMode2) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(MeteringMode2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SonyDateTime) as usize - ptr as usize },
        102usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(SonyDateTime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ShotNumberSincePowerUp) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(ShotNumberSincePowerUp)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PixelShiftGroupPrefix) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(PixelShiftGroupPrefix)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PixelShiftGroupID) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(PixelShiftGroupID)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nShotsInPixelShiftGroup) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(nShotsInPixelShiftGroup)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).numInPixelShiftGroup) as usize - ptr as usize },
        137usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(numInPixelShiftGroup)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).prd_ImageHeight) as usize - ptr as usize },
        138usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(prd_ImageHeight)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).prd_ImageWidth) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(prd_ImageWidth)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).prd_Total_bps) as usize - ptr as usize },
        142usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(prd_Total_bps)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).prd_Active_bps) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(prd_Active_bps)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).prd_StorageMethod) as usize - ptr as usize },
        146usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(prd_StorageMethod)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).prd_BayerPattern) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(prd_BayerPattern)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SonyRawFileType) as usize - ptr as usize },
        150usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(SonyRawFileType)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RAWFileType) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(RAWFileType)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RawSizeType) as usize - ptr as usize },
        154usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(RawSizeType)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Quality) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(Quality)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FileFormat) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(FileFormat)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MetaVersion) as usize - ptr as usize },
        162usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(MetaVersion)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct libraw_colordata_t {
    pub curve: [ushort; 65536usize],
    pub cblack: [libc::c_uint; 4104usize],
    pub black: libc::c_uint,
    pub data_maximum: libc::c_uint,
    pub maximum: libc::c_uint,
    pub linear_max: [libc::c_long; 4usize],
    pub fmaximum: f32,
    pub fnorm: f32,
    pub white: [[ushort; 8usize]; 8usize],
    pub cam_mul: [f32; 4usize],
    pub pre_mul: [f32; 4usize],
    pub cmatrix: [[f32; 4usize]; 3usize],
    pub ccm: [[f32; 4usize]; 3usize],
    pub rgb_cam: [[f32; 4usize]; 3usize],
    pub cam_xyz: [[f32; 3usize]; 4usize],
    pub phase_one_data: ph1_t,
    pub flash_used: f32,
    pub canon_ev: f32,
    pub model2: [libc::c_char; 64usize],
    pub UniqueCameraModel: [libc::c_char; 64usize],
    pub LocalizedCameraModel: [libc::c_char; 64usize],
    pub ImageUniqueID: [libc::c_char; 64usize],
    pub RawDataUniqueID: [libc::c_char; 17usize],
    pub OriginalRawFileName: [libc::c_char; 64usize],
    pub profile: *mut libc::c_void,
    pub profile_length: libc::c_uint,
    pub black_stat: [libc::c_uint; 8usize],
    pub dng_color: [libraw_dng_color_t; 2usize],
    pub dng_levels: libraw_dng_levels_t,
    pub WB_Coeffs: [[libc::c_int; 4usize]; 256usize],
    pub WBCT_Coeffs: [[f32; 5usize]; 64usize],
    pub as_shot_wb_applied: libc::c_int,
    pub P1_color: [libraw_P1_color_t; 2usize],
    pub raw_bps: libc::c_uint,
    pub ExifColorSpace: libc::c_int,
}
#[test]
fn bindgen_test_layout_libraw_colordata_t() {
    const UNINIT: ::core::mem::MaybeUninit<libraw_colordata_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<libraw_colordata_t>(),
        187032usize,
        concat!("Size of: ", stringify!(libraw_colordata_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libraw_colordata_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_colordata_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).curve) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(curve)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cblack) as usize - ptr as usize },
        131072usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(cblack)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).black) as usize - ptr as usize },
        147488usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(black)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).data_maximum) as usize - ptr as usize },
        147492usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(data_maximum)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).maximum) as usize - ptr as usize },
        147496usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(maximum)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).linear_max) as usize - ptr as usize },
        147500usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(linear_max)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fmaximum) as usize - ptr as usize },
        147516usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(fmaximum)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fnorm) as usize - ptr as usize },
        147520usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(fnorm)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).white) as usize - ptr as usize },
        147524usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(white)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cam_mul) as usize - ptr as usize },
        147652usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(cam_mul)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pre_mul) as usize - ptr as usize },
        147668usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(pre_mul)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cmatrix) as usize - ptr as usize },
        147684usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(cmatrix)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ccm) as usize - ptr as usize },
        147732usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(ccm)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rgb_cam) as usize - ptr as usize },
        147780usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(rgb_cam)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cam_xyz) as usize - ptr as usize },
        147828usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(cam_xyz)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).phase_one_data) as usize - ptr as usize },
        147876usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(phase_one_data)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).flash_used) as usize - ptr as usize },
        147912usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(flash_used)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).canon_ev) as usize - ptr as usize },
        147916usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(canon_ev)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).model2) as usize - ptr as usize },
        147920usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(model2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).UniqueCameraModel) as usize - ptr as usize },
        147984usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(UniqueCameraModel)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LocalizedCameraModel) as usize - ptr as usize },
        148048usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(LocalizedCameraModel)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ImageUniqueID) as usize - ptr as usize },
        148112usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(ImageUniqueID)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RawDataUniqueID) as usize - ptr as usize },
        148176usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(RawDataUniqueID)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).OriginalRawFileName) as usize - ptr as usize },
        148193usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(OriginalRawFileName)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).profile) as usize - ptr as usize },
        148264usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(profile)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).profile_length) as usize - ptr as usize },
        148272usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(profile_length)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).black_stat) as usize - ptr as usize },
        148276usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(black_stat)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).dng_color) as usize - ptr as usize },
        148308usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(dng_color)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).dng_levels) as usize - ptr as usize },
        148644usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(dng_levels)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).WB_Coeffs) as usize - ptr as usize },
        181572usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(WB_Coeffs)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).WBCT_Coeffs) as usize - ptr as usize },
        185668usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(WBCT_Coeffs)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).as_shot_wb_applied) as usize - ptr as usize },
        186948usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(as_shot_wb_applied)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).P1_color) as usize - ptr as usize },
        186952usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(P1_color)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).raw_bps) as usize - ptr as usize },
        187024usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(raw_bps)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ExifColorSpace) as usize - ptr as usize },
        187028usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(ExifColorSpace)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct libraw_thumbnail_t {
    pub tformat: LibRaw_thumbnail_formats,
    pub twidth: ushort,
    pub theight: ushort,
    pub tlength: libc::c_uint,
    pub tcolors: libc::c_int,
    pub thumb: *mut libc::c_char,
}
#[test]
fn bindgen_test_layout_libraw_thumbnail_t() {
    const UNINIT: ::core::mem::MaybeUninit<libraw_thumbnail_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<libraw_thumbnail_t>(),
        24usize,
        concat!("Size of: ", stringify!(libraw_thumbnail_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libraw_thumbnail_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_thumbnail_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tformat) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_thumbnail_t),
            "::",
            stringify!(tformat)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).twidth) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_thumbnail_t),
            "::",
            stringify!(twidth)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).theight) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_thumbnail_t),
            "::",
            stringify!(theight)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tlength) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_thumbnail_t),
            "::",
            stringify!(tlength)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tcolors) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_thumbnail_t),
            "::",
            stringify!(tcolors)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).thumb) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_thumbnail_t),
            "::",
            stringify!(thumb)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct libraw_thumbnail_item_t {
    pub tformat: LibRaw_internal_thumbnail_formats,
    pub twidth: ushort,
    pub theight: ushort,
    pub tflip: ushort,
    pub tlength: libc::c_uint,
    pub tmisc: libc::c_uint,
    pub toffset: INT64,
}
#[test]
fn bindgen_test_layout_libraw_thumbnail_item_t() {
    const UNINIT: ::core::mem::MaybeUninit<libraw_thumbnail_item_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<libraw_thumbnail_item_t>(),
        32usize,
        concat!("Size of: ", stringify!(libraw_thumbnail_item_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libraw_thumbnail_item_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_thumbnail_item_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tformat) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_thumbnail_item_t),
            "::",
            stringify!(tformat)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).twidth) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_thumbnail_item_t),
            "::",
            stringify!(twidth)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).theight) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_thumbnail_item_t),
            "::",
            stringify!(theight)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tflip) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_thumbnail_item_t),
            "::",
            stringify!(tflip)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tlength) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_thumbnail_item_t),
            "::",
            stringify!(tlength)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tmisc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_thumbnail_item_t),
            "::",
            stringify!(tmisc)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).toffset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_thumbnail_item_t),
            "::",
            stringify!(toffset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct libraw_thumbnail_list_t {
    pub thumbcount: libc::c_int,
    pub thumblist: [libraw_thumbnail_item_t; 8usize],
}
#[test]
fn bindgen_test_layout_libraw_thumbnail_list_t() {
    const UNINIT: ::core::mem::MaybeUninit<libraw_thumbnail_list_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<libraw_thumbnail_list_t>(),
        264usize,
        concat!("Size of: ", stringify!(libraw_thumbnail_list_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libraw_thumbnail_list_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_thumbnail_list_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).thumbcount) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_thumbnail_list_t),
            "::",
            stringify!(thumbcount)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).thumblist) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_thumbnail_list_t),
            "::",
            stringify!(thumblist)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct libraw_gps_info_t {
    pub latitude: [f32; 3usize],
    pub longitude: [f32; 3usize],
    pub gpstimestamp: [f32; 3usize],
    pub altitude: f32,
    pub altref: libc::c_char,
    pub latref: libc::c_char,
    pub longref: libc::c_char,
    pub gpsstatus: libc::c_char,
    pub gpsparsed: libc::c_char,
}
#[test]
fn bindgen_test_layout_libraw_gps_info_t() {
    const UNINIT: ::core::mem::MaybeUninit<libraw_gps_info_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<libraw_gps_info_t>(),
        48usize,
        concat!("Size of: ", stringify!(libraw_gps_info_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libraw_gps_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(libraw_gps_info_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).latitude) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_gps_info_t),
            "::",
            stringify!(latitude)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).longitude) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_gps_info_t),
            "::",
            stringify!(longitude)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).gpstimestamp) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_gps_info_t),
            "::",
            stringify!(gpstimestamp)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).altitude) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_gps_info_t),
            "::",
            stringify!(altitude)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).altref) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_gps_info_t),
            "::",
            stringify!(altref)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).latref) as usize - ptr as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_gps_info_t),
            "::",
            stringify!(latref)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).longref) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_gps_info_t),
            "::",
            stringify!(longref)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).gpsstatus) as usize - ptr as usize },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_gps_info_t),
            "::",
            stringify!(gpsstatus)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).gpsparsed) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_gps_info_t),
            "::",
            stringify!(gpsparsed)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct libraw_imgother_t {
    pub iso_speed: f32,
    pub shutter: f32,
    pub aperture: f32,
    pub focal_len: f32,
    pub timestamp: time_t,
    pub shot_order: libc::c_uint,
    pub gpsdata: [libc::c_uint; 32usize],
    pub parsed_gps: libraw_gps_info_t,
    pub desc: [libc::c_char; 512usize],
    pub artist: [libc::c_char; 64usize],
    pub analogbalance: [f32; 4usize],
}
#[test]
fn bindgen_test_layout_libraw_imgother_t() {
    const UNINIT: ::core::mem::MaybeUninit<libraw_imgother_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<libraw_imgother_t>(),
        800usize,
        concat!("Size of: ", stringify!(libraw_imgother_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libraw_imgother_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_imgother_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).iso_speed) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_imgother_t),
            "::",
            stringify!(iso_speed)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).shutter) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_imgother_t),
            "::",
            stringify!(shutter)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).aperture) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_imgother_t),
            "::",
            stringify!(aperture)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).focal_len) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_imgother_t),
            "::",
            stringify!(focal_len)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_imgother_t),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).shot_order) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_imgother_t),
            "::",
            stringify!(shot_order)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).gpsdata) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_imgother_t),
            "::",
            stringify!(gpsdata)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).parsed_gps) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_imgother_t),
            "::",
            stringify!(parsed_gps)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).desc) as usize - ptr as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_imgother_t),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).artist) as usize - ptr as usize },
        716usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_imgother_t),
            "::",
            stringify!(artist)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).analogbalance) as usize - ptr as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_imgother_t),
            "::",
            stringify!(analogbalance)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct libraw_afinfo_item_t {
    pub AFInfoData_tag: libc::c_uint,
    pub AFInfoData_order: libc::c_short,
    pub AFInfoData_version: libc::c_uint,
    pub AFInfoData_length: libc::c_uint,
    pub AFInfoData: *mut uchar,
}
#[test]
fn bindgen_test_layout_libraw_afinfo_item_t() {
    const UNINIT: ::core::mem::MaybeUninit<libraw_afinfo_item_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<libraw_afinfo_item_t>(),
        24usize,
        concat!("Size of: ", stringify!(libraw_afinfo_item_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libraw_afinfo_item_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_afinfo_item_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AFInfoData_tag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_afinfo_item_t),
            "::",
            stringify!(AFInfoData_tag)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AFInfoData_order) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_afinfo_item_t),
            "::",
            stringify!(AFInfoData_order)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AFInfoData_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_afinfo_item_t),
            "::",
            stringify!(AFInfoData_version)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AFInfoData_length) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_afinfo_item_t),
            "::",
            stringify!(AFInfoData_length)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AFInfoData) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_afinfo_item_t),
            "::",
            stringify!(AFInfoData)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct libraw_metadata_common_t {
    pub FlashEC: f32,
    pub FlashGN: f32,
    pub CameraTemperature: f32,
    pub SensorTemperature: f32,
    pub SensorTemperature2: f32,
    pub LensTemperature: f32,
    pub AmbientTemperature: f32,
    pub BatteryTemperature: f32,
    pub exifAmbientTemperature: f32,
    pub exifHumidity: f32,
    pub exifPressure: f32,
    pub exifWaterDepth: f32,
    pub exifAcceleration: f32,
    pub exifCameraElevationAngle: f32,
    pub real_ISO: f32,
    pub exifExposureIndex: f32,
    pub ColorSpace: ushort,
    pub firmware: [libc::c_char; 128usize],
    pub ExposureCalibrationShift: f32,
    pub afdata: [libraw_afinfo_item_t; 4usize],
    pub afcount: libc::c_int,
}
#[test]
fn bindgen_test_layout_libraw_metadata_common_t() {
    const UNINIT: ::core::mem::MaybeUninit<libraw_metadata_common_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<libraw_metadata_common_t>(),
        304usize,
        concat!("Size of: ", stringify!(libraw_metadata_common_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libraw_metadata_common_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_metadata_common_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FlashEC) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(FlashEC)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FlashGN) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(FlashGN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CameraTemperature) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(CameraTemperature)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SensorTemperature) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(SensorTemperature)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SensorTemperature2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(SensorTemperature2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LensTemperature) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(LensTemperature)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AmbientTemperature) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(AmbientTemperature)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BatteryTemperature) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(BatteryTemperature)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).exifAmbientTemperature) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(exifAmbientTemperature)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).exifHumidity) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(exifHumidity)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).exifPressure) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(exifPressure)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).exifWaterDepth) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(exifWaterDepth)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).exifAcceleration) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(exifAcceleration)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).exifCameraElevationAngle) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(exifCameraElevationAngle)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).real_ISO) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(real_ISO)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).exifExposureIndex) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(exifExposureIndex)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ColorSpace) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(ColorSpace)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).firmware) as usize - ptr as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(firmware)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ExposureCalibrationShift) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(ExposureCalibrationShift)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).afdata) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(afdata)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).afcount) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(afcount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct libraw_output_params_t {
    pub greybox: [libc::c_uint; 4usize],
    pub cropbox: [libc::c_uint; 4usize],
    pub aber: [f64; 4usize],
    pub gamm: [f64; 6usize],
    pub user_mul: [f32; 4usize],
    pub bright: f32,
    pub threshold: f32,
    pub half_size: libc::c_int,
    pub four_color_rgb: libc::c_int,
    pub highlight: libc::c_int,
    pub use_auto_wb: libc::c_int,
    pub use_camera_wb: libc::c_int,
    pub use_camera_matrix: libc::c_int,
    pub output_color: libc::c_int,
    pub output_profile: *mut libc::c_char,
    pub camera_profile: *mut libc::c_char,
    pub bad_pixels: *mut libc::c_char,
    pub dark_frame: *mut libc::c_char,
    pub output_bps: libc::c_int,
    pub output_tiff: libc::c_int,
    pub output_flags: libc::c_int,
    pub user_flip: libc::c_int,
    pub user_qual: libc::c_int,
    pub user_black: libc::c_int,
    pub user_cblack: [libc::c_int; 4usize],
    pub user_sat: libc::c_int,
    pub med_passes: libc::c_int,
    pub auto_bright_thr: f32,
    pub adjust_maximum_thr: f32,
    pub no_auto_bright: libc::c_int,
    pub use_fuji_rotate: libc::c_int,
    pub green_matching: libc::c_int,
    pub dcb_iterations: libc::c_int,
    pub dcb_enhance_fl: libc::c_int,
    pub fbdd_noiserd: libc::c_int,
    pub exp_correc: libc::c_int,
    pub exp_shift: f32,
    pub exp_preser: f32,
    pub no_auto_scale: libc::c_int,
    pub no_interpolation: libc::c_int,
}
#[test]
fn bindgen_test_layout_libraw_output_params_t() {
    const UNINIT: ::core::mem::MaybeUninit<libraw_output_params_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<libraw_output_params_t>(),
        304usize,
        concat!("Size of: ", stringify!(libraw_output_params_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libraw_output_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_output_params_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).greybox) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(greybox)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cropbox) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(cropbox)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).aber) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(aber)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).gamm) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(gamm)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).user_mul) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(user_mul)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bright) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(bright)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).threshold) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(threshold)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).half_size) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(half_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).four_color_rgb) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(four_color_rgb)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).highlight) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(highlight)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).use_auto_wb) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(use_auto_wb)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).use_camera_wb) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(use_camera_wb)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).use_camera_matrix) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(use_camera_matrix)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).output_color) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(output_color)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).output_profile) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(output_profile)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).camera_profile) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(camera_profile)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bad_pixels) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(bad_pixels)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).dark_frame) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(dark_frame)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).output_bps) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(output_bps)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).output_tiff) as usize - ptr as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(output_tiff)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).output_flags) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(output_flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).user_flip) as usize - ptr as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(user_flip)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).user_qual) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(user_qual)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).user_black) as usize - ptr as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(user_black)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).user_cblack) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(user_cblack)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).user_sat) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(user_sat)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).med_passes) as usize - ptr as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(med_passes)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).auto_bright_thr) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(auto_bright_thr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).adjust_maximum_thr) as usize - ptr as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(adjust_maximum_thr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).no_auto_bright) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(no_auto_bright)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).use_fuji_rotate) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(use_fuji_rotate)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).green_matching) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(green_matching)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).dcb_iterations) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(dcb_iterations)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).dcb_enhance_fl) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(dcb_enhance_fl)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fbdd_noiserd) as usize - ptr as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(fbdd_noiserd)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).exp_correc) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(exp_correc)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).exp_shift) as usize - ptr as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(exp_shift)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).exp_preser) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(exp_preser)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).no_auto_scale) as usize - ptr as usize },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(no_auto_scale)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).no_interpolation) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(no_interpolation)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct libraw_raw_unpack_params_t {
    pub use_rawspeed: libc::c_int,
    pub use_dngsdk: libc::c_int,
    pub options: libc::c_uint,
    pub shot_select: libc::c_uint,
    pub specials: libc::c_uint,
    pub max_raw_memory_mb: libc::c_uint,
    pub sony_arw2_posterization_thr: libc::c_int,
    pub coolscan_nef_gamma: f32,
    pub p4shot_order: [libc::c_char; 5usize],
    pub custom_camera_strings: *mut *mut libc::c_char,
}
#[test]
fn bindgen_test_layout_libraw_raw_unpack_params_t() {
    const UNINIT: ::core::mem::MaybeUninit<libraw_raw_unpack_params_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<libraw_raw_unpack_params_t>(),
        48usize,
        concat!("Size of: ", stringify!(libraw_raw_unpack_params_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libraw_raw_unpack_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_raw_unpack_params_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).use_rawspeed) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_raw_unpack_params_t),
            "::",
            stringify!(use_rawspeed)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).use_dngsdk) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_raw_unpack_params_t),
            "::",
            stringify!(use_dngsdk)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).options) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_raw_unpack_params_t),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).shot_select) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_raw_unpack_params_t),
            "::",
            stringify!(shot_select)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).specials) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_raw_unpack_params_t),
            "::",
            stringify!(specials)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).max_raw_memory_mb) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_raw_unpack_params_t),
            "::",
            stringify!(max_raw_memory_mb)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).sony_arw2_posterization_thr) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_raw_unpack_params_t),
            "::",
            stringify!(sony_arw2_posterization_thr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).coolscan_nef_gamma) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_raw_unpack_params_t),
            "::",
            stringify!(coolscan_nef_gamma)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).p4shot_order) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_raw_unpack_params_t),
            "::",
            stringify!(p4shot_order)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).custom_camera_strings) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_raw_unpack_params_t),
            "::",
            stringify!(custom_camera_strings)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct libraw_rawdata_t {
    pub raw_alloc: *mut libc::c_void,
    pub raw_image: *mut ushort,
    pub color4_image: *mut [ushort; 4usize],
    pub color3_image: *mut [ushort; 3usize],
    pub float_image: *mut f32,
    pub float3_image: *mut [f32; 3usize],
    pub float4_image: *mut [f32; 4usize],
    pub ph1_cblack: *mut [libc::c_short; 2usize],
    pub ph1_rblack: *mut [libc::c_short; 2usize],
    pub iparams: libraw_iparams_t,
    pub sizes: libraw_image_sizes_t,
    pub ioparams: libraw_internal_output_params_t,
    pub color: libraw_colordata_t,
}
#[test]
fn bindgen_test_layout_libraw_rawdata_t() {
    const UNINIT: ::core::mem::MaybeUninit<libraw_rawdata_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<libraw_rawdata_t>(),
        187744usize,
        concat!("Size of: ", stringify!(libraw_rawdata_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libraw_rawdata_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_rawdata_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).raw_alloc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_rawdata_t),
            "::",
            stringify!(raw_alloc)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).raw_image) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_rawdata_t),
            "::",
            stringify!(raw_image)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).color4_image) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_rawdata_t),
            "::",
            stringify!(color4_image)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).color3_image) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_rawdata_t),
            "::",
            stringify!(color3_image)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).float_image) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_rawdata_t),
            "::",
            stringify!(float_image)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).float3_image) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_rawdata_t),
            "::",
            stringify!(float3_image)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).float4_image) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_rawdata_t),
            "::",
            stringify!(float4_image)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ph1_cblack) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_rawdata_t),
            "::",
            stringify!(ph1_cblack)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ph1_rblack) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_rawdata_t),
            "::",
            stringify!(ph1_rblack)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).iparams) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_rawdata_t),
            "::",
            stringify!(iparams)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sizes) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_rawdata_t),
            "::",
            stringify!(sizes)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ioparams) as usize - ptr as usize },
        696usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_rawdata_t),
            "::",
            stringify!(ioparams)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).color) as usize - ptr as usize },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_rawdata_t),
            "::",
            stringify!(color)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct libraw_makernotes_lens_t {
    pub LensID: libc::c_ulonglong,
    pub Lens: [libc::c_char; 128usize],
    pub LensFormat: ushort,
    pub LensMount: ushort,
    pub CamID: libc::c_ulonglong,
    pub CameraFormat: ushort,
    pub CameraMount: ushort,
    pub body: [libc::c_char; 64usize],
    pub FocalType: libc::c_short,
    pub LensFeatures_pre: [libc::c_char; 16usize],
    pub LensFeatures_suf: [libc::c_char; 16usize],
    pub MinFocal: f32,
    pub MaxFocal: f32,
    pub MaxAp4MinFocal: f32,
    pub MaxAp4MaxFocal: f32,
    pub MinAp4MinFocal: f32,
    pub MinAp4MaxFocal: f32,
    pub MaxAp: f32,
    pub MinAp: f32,
    pub CurFocal: f32,
    pub CurAp: f32,
    pub MaxAp4CurFocal: f32,
    pub MinAp4CurFocal: f32,
    pub MinFocusDistance: f32,
    pub FocusRangeIndex: f32,
    pub LensFStops: f32,
    pub TeleconverterID: libc::c_ulonglong,
    pub Teleconverter: [libc::c_char; 128usize],
    pub AdapterID: libc::c_ulonglong,
    pub Adapter: [libc::c_char; 128usize],
    pub AttachmentID: libc::c_ulonglong,
    pub Attachment: [libc::c_char; 128usize],
    pub FocalUnits: ushort,
    pub FocalLengthIn35mmFormat: f32,
}
#[test]
fn bindgen_test_layout_libraw_makernotes_lens_t() {
    const UNINIT: ::core::mem::MaybeUninit<libraw_makernotes_lens_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<libraw_makernotes_lens_t>(),
        736usize,
        concat!("Size of: ", stringify!(libraw_makernotes_lens_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libraw_makernotes_lens_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_makernotes_lens_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LensID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(LensID)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Lens) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(Lens)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LensFormat) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(LensFormat)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LensMount) as usize - ptr as usize },
        138usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(LensMount)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CamID) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(CamID)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CameraFormat) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(CameraFormat)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CameraMount) as usize - ptr as usize },
        154usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(CameraMount)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).body) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(body)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FocalType) as usize - ptr as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(FocalType)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LensFeatures_pre) as usize - ptr as usize },
        222usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(LensFeatures_pre)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LensFeatures_suf) as usize - ptr as usize },
        238usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(LensFeatures_suf)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MinFocal) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(MinFocal)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MaxFocal) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(MaxFocal)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MaxAp4MinFocal) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(MaxAp4MinFocal)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MaxAp4MaxFocal) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(MaxAp4MaxFocal)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MinAp4MinFocal) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(MinAp4MinFocal)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MinAp4MaxFocal) as usize - ptr as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(MinAp4MaxFocal)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MaxAp) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(MaxAp)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MinAp) as usize - ptr as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(MinAp)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CurFocal) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(CurFocal)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CurAp) as usize - ptr as usize },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(CurAp)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MaxAp4CurFocal) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(MaxAp4CurFocal)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MinAp4CurFocal) as usize - ptr as usize },
        300usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(MinAp4CurFocal)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MinFocusDistance) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(MinFocusDistance)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FocusRangeIndex) as usize - ptr as usize },
        308usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(FocusRangeIndex)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LensFStops) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(LensFStops)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TeleconverterID) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(TeleconverterID)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Teleconverter) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(Teleconverter)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AdapterID) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(AdapterID)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Adapter) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(Adapter)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AttachmentID) as usize - ptr as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(AttachmentID)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Attachment) as usize - ptr as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(Attachment)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FocalUnits) as usize - ptr as usize },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(FocalUnits)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FocalLengthIn35mmFormat) as usize - ptr as usize },
        732usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(FocalLengthIn35mmFormat)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct libraw_nikonlens_t {
    pub EffectiveMaxAp: f32,
    pub LensIDNumber: uchar,
    pub LensFStops: uchar,
    pub MCUVersion: uchar,
    pub LensType: uchar,
}
#[test]
fn bindgen_test_layout_libraw_nikonlens_t() {
    const UNINIT: ::core::mem::MaybeUninit<libraw_nikonlens_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<libraw_nikonlens_t>(),
        8usize,
        concat!("Size of: ", stringify!(libraw_nikonlens_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libraw_nikonlens_t>(),
        4usize,
        concat!("Alignment of ", stringify!(libraw_nikonlens_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EffectiveMaxAp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikonlens_t),
            "::",
            stringify!(EffectiveMaxAp)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LensIDNumber) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikonlens_t),
            "::",
            stringify!(LensIDNumber)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LensFStops) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikonlens_t),
            "::",
            stringify!(LensFStops)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MCUVersion) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikonlens_t),
            "::",
            stringify!(MCUVersion)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LensType) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikonlens_t),
            "::",
            stringify!(LensType)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct libraw_dnglens_t {
    pub MinFocal: f32,
    pub MaxFocal: f32,
    pub MaxAp4MinFocal: f32,
    pub MaxAp4MaxFocal: f32,
}
#[test]
fn bindgen_test_layout_libraw_dnglens_t() {
    const UNINIT: ::core::mem::MaybeUninit<libraw_dnglens_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<libraw_dnglens_t>(),
        16usize,
        concat!("Size of: ", stringify!(libraw_dnglens_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libraw_dnglens_t>(),
        4usize,
        concat!("Alignment of ", stringify!(libraw_dnglens_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MinFocal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dnglens_t),
            "::",
            stringify!(MinFocal)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MaxFocal) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dnglens_t),
            "::",
            stringify!(MaxFocal)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MaxAp4MinFocal) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dnglens_t),
            "::",
            stringify!(MaxAp4MinFocal)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MaxAp4MaxFocal) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dnglens_t),
            "::",
            stringify!(MaxAp4MaxFocal)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct libraw_lensinfo_t {
    pub MinFocal: f32,
    pub MaxFocal: f32,
    pub MaxAp4MinFocal: f32,
    pub MaxAp4MaxFocal: f32,
    pub EXIF_MaxAp: f32,
    pub LensMake: [libc::c_char; 128usize],
    pub Lens: [libc::c_char; 128usize],
    pub LensSerial: [libc::c_char; 128usize],
    pub InternalLensSerial: [libc::c_char; 128usize],
    pub FocalLengthIn35mmFormat: ushort,
    pub nikon: libraw_nikonlens_t,
    pub dng: libraw_dnglens_t,
    pub makernotes: libraw_makernotes_lens_t,
}
#[test]
fn bindgen_test_layout_libraw_lensinfo_t() {
    const UNINIT: ::core::mem::MaybeUninit<libraw_lensinfo_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<libraw_lensinfo_t>(),
        1296usize,
        concat!("Size of: ", stringify!(libraw_lensinfo_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libraw_lensinfo_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_lensinfo_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MinFocal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_lensinfo_t),
            "::",
            stringify!(MinFocal)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MaxFocal) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_lensinfo_t),
            "::",
            stringify!(MaxFocal)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MaxAp4MinFocal) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_lensinfo_t),
            "::",
            stringify!(MaxAp4MinFocal)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MaxAp4MaxFocal) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_lensinfo_t),
            "::",
            stringify!(MaxAp4MaxFocal)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EXIF_MaxAp) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_lensinfo_t),
            "::",
            stringify!(EXIF_MaxAp)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LensMake) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_lensinfo_t),
            "::",
            stringify!(LensMake)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Lens) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_lensinfo_t),
            "::",
            stringify!(Lens)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LensSerial) as usize - ptr as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_lensinfo_t),
            "::",
            stringify!(LensSerial)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).InternalLensSerial) as usize - ptr as usize },
        404usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_lensinfo_t),
            "::",
            stringify!(InternalLensSerial)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FocalLengthIn35mmFormat) as usize - ptr as usize },
        532usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_lensinfo_t),
            "::",
            stringify!(FocalLengthIn35mmFormat)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nikon) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_lensinfo_t),
            "::",
            stringify!(nikon)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).dng) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_lensinfo_t),
            "::",
            stringify!(dng)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).makernotes) as usize - ptr as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_lensinfo_t),
            "::",
            stringify!(makernotes)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct libraw_makernotes_t {
    pub canon: libraw_canon_makernotes_t,
    pub nikon: libraw_nikon_makernotes_t,
    pub hasselblad: libraw_hasselblad_makernotes_t,
    pub fuji: libraw_fuji_info_t,
    pub olympus: libraw_olympus_makernotes_t,
    pub sony: libraw_sony_info_t,
    pub kodak: libraw_kodak_makernotes_t,
    pub panasonic: libraw_panasonic_makernotes_t,
    pub pentax: libraw_pentax_makernotes_t,
    pub phaseone: libraw_p1_makernotes_t,
    pub ricoh: libraw_ricoh_makernotes_t,
    pub samsung: libraw_samsung_makernotes_t,
    pub common: libraw_metadata_common_t,
}
#[test]
fn bindgen_test_layout_libraw_makernotes_t() {
    const UNINIT: ::core::mem::MaybeUninit<libraw_makernotes_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<libraw_makernotes_t>(),
        3024usize,
        concat!("Size of: ", stringify!(libraw_makernotes_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libraw_makernotes_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_makernotes_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).canon) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_t),
            "::",
            stringify!(canon)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nikon) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_t),
            "::",
            stringify!(nikon)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).hasselblad) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_t),
            "::",
            stringify!(hasselblad)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fuji) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_t),
            "::",
            stringify!(fuji)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).olympus) as usize - ptr as usize },
        1128usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_t),
            "::",
            stringify!(olympus)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sony) as usize - ptr as usize },
        1536usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_t),
            "::",
            stringify!(sony)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).kodak) as usize - ptr as usize },
        1716usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_t),
            "::",
            stringify!(kodak)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).panasonic) as usize - ptr as usize },
        1960usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_t),
            "::",
            stringify!(panasonic)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pentax) as usize - ptr as usize },
        2028usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_t),
            "::",
            stringify!(pentax)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).phaseone) as usize - ptr as usize },
        2060usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_t),
            "::",
            stringify!(phaseone)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ricoh) as usize - ptr as usize },
        2512usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_t),
            "::",
            stringify!(ricoh)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).samsung) as usize - ptr as usize },
        2584usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_t),
            "::",
            stringify!(samsung)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).common) as usize - ptr as usize },
        2720usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_t),
            "::",
            stringify!(common)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct libraw_shootinginfo_t {
    pub DriveMode: libc::c_short,
    pub FocusMode: libc::c_short,
    pub MeteringMode: libc::c_short,
    pub AFPoint: libc::c_short,
    pub ExposureMode: libc::c_short,
    pub ExposureProgram: libc::c_short,
    pub ImageStabilization: libc::c_short,
    pub BodySerial: [libc::c_char; 64usize],
    pub InternalBodySerial: [libc::c_char; 64usize],
}
#[test]
fn bindgen_test_layout_libraw_shootinginfo_t() {
    const UNINIT: ::core::mem::MaybeUninit<libraw_shootinginfo_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<libraw_shootinginfo_t>(),
        142usize,
        concat!("Size of: ", stringify!(libraw_shootinginfo_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libraw_shootinginfo_t>(),
        2usize,
        concat!("Alignment of ", stringify!(libraw_shootinginfo_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DriveMode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_shootinginfo_t),
            "::",
            stringify!(DriveMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FocusMode) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_shootinginfo_t),
            "::",
            stringify!(FocusMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MeteringMode) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_shootinginfo_t),
            "::",
            stringify!(MeteringMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AFPoint) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_shootinginfo_t),
            "::",
            stringify!(AFPoint)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ExposureMode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_shootinginfo_t),
            "::",
            stringify!(ExposureMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ExposureProgram) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_shootinginfo_t),
            "::",
            stringify!(ExposureProgram)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ImageStabilization) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_shootinginfo_t),
            "::",
            stringify!(ImageStabilization)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BodySerial) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_shootinginfo_t),
            "::",
            stringify!(BodySerial)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).InternalBodySerial) as usize - ptr as usize },
        78usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_shootinginfo_t),
            "::",
            stringify!(InternalBodySerial)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct libraw_custom_camera_t {
    pub fsize: libc::c_uint,
    pub rw: ushort,
    pub rh: ushort,
    pub lm: uchar,
    pub tm: uchar,
    pub rm: uchar,
    pub bm: uchar,
    pub lf: ushort,
    pub cf: uchar,
    pub max: uchar,
    pub flags: uchar,
    pub t_make: [libc::c_char; 10usize],
    pub t_model: [libc::c_char; 20usize],
    pub offset: ushort,
}
#[test]
fn bindgen_test_layout_libraw_custom_camera_t() {
    const UNINIT: ::core::mem::MaybeUninit<libraw_custom_camera_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<libraw_custom_camera_t>(),
        52usize,
        concat!("Size of: ", stringify!(libraw_custom_camera_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libraw_custom_camera_t>(),
        4usize,
        concat!("Alignment of ", stringify!(libraw_custom_camera_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fsize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_custom_camera_t),
            "::",
            stringify!(fsize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rw) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_custom_camera_t),
            "::",
            stringify!(rw)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rh) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_custom_camera_t),
            "::",
            stringify!(rh)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lm) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_custom_camera_t),
            "::",
            stringify!(lm)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tm) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_custom_camera_t),
            "::",
            stringify!(tm)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rm) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_custom_camera_t),
            "::",
            stringify!(rm)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bm) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_custom_camera_t),
            "::",
            stringify!(bm)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lf) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_custom_camera_t),
            "::",
            stringify!(lf)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cf) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_custom_camera_t),
            "::",
            stringify!(cf)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).max) as usize - ptr as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_custom_camera_t),
            "::",
            stringify!(max)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_custom_camera_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).t_make) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_custom_camera_t),
            "::",
            stringify!(t_make)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).t_model) as usize - ptr as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_custom_camera_t),
            "::",
            stringify!(t_model)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_custom_camera_t),
            "::",
            stringify!(offset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct libraw_data_t {
    pub image: *mut [ushort; 4usize],
    pub sizes: libraw_image_sizes_t,
    pub idata: libraw_iparams_t,
    pub lens: libraw_lensinfo_t,
    pub makernotes: libraw_makernotes_t,
    pub shootinginfo: libraw_shootinginfo_t,
    pub params: libraw_output_params_t,
    pub rawparams: libraw_raw_unpack_params_t,
    pub progress_flags: libc::c_uint,
    pub process_warnings: libc::c_uint,
    pub color: libraw_colordata_t,
    pub other: libraw_imgother_t,
    pub thumbnail: libraw_thumbnail_t,
    pub thumbs_list: libraw_thumbnail_list_t,
    pub rawdata: libraw_rawdata_t,
    pub parent_class: *mut libc::c_void,
}
#[test]
fn bindgen_test_layout_libraw_data_t() {
    const UNINIT: ::core::mem::MaybeUninit<libraw_data_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<libraw_data_t>(),
        381328usize,
        concat!("Size of: ", stringify!(libraw_data_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libraw_data_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_data_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).image) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_data_t),
            "::",
            stringify!(image)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sizes) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_data_t),
            "::",
            stringify!(sizes)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).idata) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_data_t),
            "::",
            stringify!(idata)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lens) as usize - ptr as usize },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_data_t),
            "::",
            stringify!(lens)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).makernotes) as usize - ptr as usize },
        1928usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_data_t),
            "::",
            stringify!(makernotes)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).shootinginfo) as usize - ptr as usize },
        4952usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_data_t),
            "::",
            stringify!(shootinginfo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).params) as usize - ptr as usize },
        5096usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_data_t),
            "::",
            stringify!(params)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rawparams) as usize - ptr as usize },
        5400usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_data_t),
            "::",
            stringify!(rawparams)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).progress_flags) as usize - ptr as usize },
        5448usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_data_t),
            "::",
            stringify!(progress_flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).process_warnings) as usize - ptr as usize },
        5452usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_data_t),
            "::",
            stringify!(process_warnings)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).color) as usize - ptr as usize },
        5456usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_data_t),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).other) as usize - ptr as usize },
        192488usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_data_t),
            "::",
            stringify!(other)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).thumbnail) as usize - ptr as usize },
        193288usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_data_t),
            "::",
            stringify!(thumbnail)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).thumbs_list) as usize - ptr as usize },
        193312usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_data_t),
            "::",
            stringify!(thumbs_list)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rawdata) as usize - ptr as usize },
        193576usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_data_t),
            "::",
            stringify!(rawdata)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).parent_class) as usize - ptr as usize },
        381320usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_data_t),
            "::",
            stringify!(parent_class)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct fuji_q_table {
    pub q_table: *mut i8,
    pub raw_bits: libc::c_int,
    pub total_values: libc::c_int,
    pub max_grad: libc::c_int,
    pub q_grad_mult: libc::c_int,
    pub q_base: libc::c_int,
}
#[test]
fn bindgen_test_layout_fuji_q_table() {
    const UNINIT: ::core::mem::MaybeUninit<fuji_q_table> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<fuji_q_table>(),
        32usize,
        concat!("Size of: ", stringify!(fuji_q_table))
    );
    assert_eq!(
        ::core::mem::align_of::<fuji_q_table>(),
        8usize,
        concat!("Alignment of ", stringify!(fuji_q_table))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).q_table) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuji_q_table),
            "::",
            stringify!(q_table)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).raw_bits) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuji_q_table),
            "::",
            stringify!(raw_bits)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).total_values) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(fuji_q_table),
            "::",
            stringify!(total_values)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).max_grad) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuji_q_table),
            "::",
            stringify!(max_grad)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).q_grad_mult) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(fuji_q_table),
            "::",
            stringify!(q_grad_mult)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).q_base) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fuji_q_table),
            "::",
            stringify!(q_base)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct fuji_compressed_params {
    pub qt: [fuji_q_table; 4usize],
    pub buf: *mut libc::c_void,
    pub max_bits: libc::c_int,
    pub min_value: libc::c_int,
    pub max_value: libc::c_int,
    pub line_width: ushort,
}
#[test]
fn bindgen_test_layout_fuji_compressed_params() {
    const UNINIT: ::core::mem::MaybeUninit<fuji_compressed_params> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<fuji_compressed_params>(),
        152usize,
        concat!("Size of: ", stringify!(fuji_compressed_params))
    );
    assert_eq!(
        ::core::mem::align_of::<fuji_compressed_params>(),
        8usize,
        concat!("Alignment of ", stringify!(fuji_compressed_params))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).qt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuji_compressed_params),
            "::",
            stringify!(qt)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(fuji_compressed_params),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).max_bits) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(fuji_compressed_params),
            "::",
            stringify!(max_bits)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).min_value) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(fuji_compressed_params),
            "::",
            stringify!(min_value)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).max_value) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(fuji_compressed_params),
            "::",
            stringify!(max_value)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).line_width) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(fuji_compressed_params),
            "::",
            stringify!(line_width)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct internal_data_t {
    pub input: *mut LibRaw_abstract_datastream,
    pub output: *mut FILE,
    pub input_internal: libc::c_int,
    pub meta_data: *mut libc::c_char,
    pub profile_offset: INT64,
    pub toffset: INT64,
    pub pana_black: [libc::c_uint; 4usize],
}
#[test]
fn bindgen_test_layout_internal_data_t() {
    const UNINIT: ::core::mem::MaybeUninit<internal_data_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<internal_data_t>(),
        64usize,
        concat!("Size of: ", stringify!(internal_data_t))
    );
    assert_eq!(
        ::core::mem::align_of::<internal_data_t>(),
        8usize,
        concat!("Alignment of ", stringify!(internal_data_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).input) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(internal_data_t),
            "::",
            stringify!(input)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).output) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(internal_data_t),
            "::",
            stringify!(output)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).input_internal) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(internal_data_t),
            "::",
            stringify!(input_internal)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).meta_data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(internal_data_t),
            "::",
            stringify!(meta_data)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).profile_offset) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(internal_data_t),
            "::",
            stringify!(profile_offset)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).toffset) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(internal_data_t),
            "::",
            stringify!(toffset)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pana_black) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(internal_data_t),
            "::",
            stringify!(pana_black)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct output_data_t {
    pub histogram: *mut [libc::c_int; 8192usize],
    pub oprof: *mut libc::c_uint,
}
#[test]
fn bindgen_test_layout_output_data_t() {
    const UNINIT: ::core::mem::MaybeUninit<output_data_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<output_data_t>(),
        16usize,
        concat!("Size of: ", stringify!(output_data_t))
    );
    assert_eq!(
        ::core::mem::align_of::<output_data_t>(),
        8usize,
        concat!("Alignment of ", stringify!(output_data_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).histogram) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(output_data_t),
            "::",
            stringify!(histogram)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).oprof) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(output_data_t),
            "::",
            stringify!(oprof)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct identify_data_t {
    pub olympus_exif_cfa: libc::c_uint,
    pub unique_id: libc::c_ulonglong,
    pub OlyID: libc::c_ulonglong,
    pub tiff_nifds: libc::c_uint,
    pub tiff_flip: libc::c_int,
    pub metadata_blocks: libc::c_int,
}
#[test]
fn bindgen_test_layout_identify_data_t() {
    const UNINIT: ::core::mem::MaybeUninit<identify_data_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<identify_data_t>(),
        40usize,
        concat!("Size of: ", stringify!(identify_data_t))
    );
    assert_eq!(
        ::core::mem::align_of::<identify_data_t>(),
        8usize,
        concat!("Alignment of ", stringify!(identify_data_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).olympus_exif_cfa) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(identify_data_t),
            "::",
            stringify!(olympus_exif_cfa)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).unique_id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(identify_data_t),
            "::",
            stringify!(unique_id)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).OlyID) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(identify_data_t),
            "::",
            stringify!(OlyID)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tiff_nifds) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(identify_data_t),
            "::",
            stringify!(tiff_nifds)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tiff_flip) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(identify_data_t),
            "::",
            stringify!(tiff_flip)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).metadata_blocks) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(identify_data_t),
            "::",
            stringify!(metadata_blocks)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct crx_sample_to_chunk_t {
    pub first: u32,
    pub count: u32,
    pub id: u32,
}
#[test]
fn bindgen_test_layout_crx_sample_to_chunk_t() {
    const UNINIT: ::core::mem::MaybeUninit<crx_sample_to_chunk_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<crx_sample_to_chunk_t>(),
        12usize,
        concat!("Size of: ", stringify!(crx_sample_to_chunk_t))
    );
    assert_eq!(
        ::core::mem::align_of::<crx_sample_to_chunk_t>(),
        4usize,
        concat!("Alignment of ", stringify!(crx_sample_to_chunk_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).first) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(crx_sample_to_chunk_t),
            "::",
            stringify!(first)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(crx_sample_to_chunk_t),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(crx_sample_to_chunk_t),
            "::",
            stringify!(id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct crx_data_header_t {
    pub version: i32,
    pub f_width: i32,
    pub f_height: i32,
    pub tileWidth: i32,
    pub tileHeight: i32,
    pub nBits: i32,
    pub nPlanes: i32,
    pub cfaLayout: i32,
    pub encType: i32,
    pub imageLevels: i32,
    pub hasTileCols: i32,
    pub hasTileRows: i32,
    pub mdatHdrSize: i32,
    pub medianBits: i32,
    pub MediaSize: u32,
    pub MediaOffset: INT64,
    pub MediaType: u32,
    pub stsc_data: *mut crx_sample_to_chunk_t,
    pub stsc_count: u32,
    pub sample_count: u32,
    pub sample_size: u32,
    pub sample_sizes: *mut i32,
    pub chunk_count: u32,
    pub chunk_offsets: *mut INT64,
}
#[test]
fn bindgen_test_layout_crx_data_header_t() {
    const UNINIT: ::core::mem::MaybeUninit<crx_data_header_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<crx_data_header_t>(),
        128usize,
        concat!("Size of: ", stringify!(crx_data_header_t))
    );
    assert_eq!(
        ::core::mem::align_of::<crx_data_header_t>(),
        8usize,
        concat!("Alignment of ", stringify!(crx_data_header_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(crx_data_header_t),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).f_width) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(crx_data_header_t),
            "::",
            stringify!(f_width)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).f_height) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(crx_data_header_t),
            "::",
            stringify!(f_height)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tileWidth) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(crx_data_header_t),
            "::",
            stringify!(tileWidth)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tileHeight) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(crx_data_header_t),
            "::",
            stringify!(tileHeight)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nBits) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(crx_data_header_t),
            "::",
            stringify!(nBits)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nPlanes) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(crx_data_header_t),
            "::",
            stringify!(nPlanes)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cfaLayout) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(crx_data_header_t),
            "::",
            stringify!(cfaLayout)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).encType) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(crx_data_header_t),
            "::",
            stringify!(encType)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).imageLevels) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(crx_data_header_t),
            "::",
            stringify!(imageLevels)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).hasTileCols) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(crx_data_header_t),
            "::",
            stringify!(hasTileCols)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).hasTileRows) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(crx_data_header_t),
            "::",
            stringify!(hasTileRows)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mdatHdrSize) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(crx_data_header_t),
            "::",
            stringify!(mdatHdrSize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).medianBits) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(crx_data_header_t),
            "::",
            stringify!(medianBits)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MediaSize) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(crx_data_header_t),
            "::",
            stringify!(MediaSize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MediaOffset) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(crx_data_header_t),
            "::",
            stringify!(MediaOffset)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MediaType) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(crx_data_header_t),
            "::",
            stringify!(MediaType)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).stsc_data) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(crx_data_header_t),
            "::",
            stringify!(stsc_data)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).stsc_count) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(crx_data_header_t),
            "::",
            stringify!(stsc_count)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sample_count) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(crx_data_header_t),
            "::",
            stringify!(sample_count)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sample_size) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(crx_data_header_t),
            "::",
            stringify!(sample_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sample_sizes) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(crx_data_header_t),
            "::",
            stringify!(sample_sizes)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).chunk_count) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(crx_data_header_t),
            "::",
            stringify!(chunk_count)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).chunk_offsets) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(crx_data_header_t),
            "::",
            stringify!(chunk_offsets)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct pana8_tags_t {
    pub tag39: [u32; 6usize],
    pub tag3A: [u16; 6usize],
    pub tag3B: u16,
    pub initial: [u16; 4usize],
    pub tag40a: [u16; 17usize],
    pub tag40b: [u16; 17usize],
    pub tag41: [u16; 17usize],
    pub stripe_count: u16,
    pub tag43: u16,
    pub stripe_offsets: [INT64; 5usize],
    pub stripe_left: [u16; 5usize],
    pub stripe_compressed_size: [u32; 5usize],
    pub stripe_width: [u16; 5usize],
    pub stripe_height: [u16; 5usize],
}
#[test]
fn bindgen_test_layout_pana8_tags_t() {
    const UNINIT: ::core::mem::MaybeUninit<pana8_tags_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<pana8_tags_t>(),
        248usize,
        concat!("Size of: ", stringify!(pana8_tags_t))
    );
    assert_eq!(
        ::core::mem::align_of::<pana8_tags_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pana8_tags_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tag39) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pana8_tags_t),
            "::",
            stringify!(tag39)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tag3A) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pana8_tags_t),
            "::",
            stringify!(tag3A)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tag3B) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(pana8_tags_t),
            "::",
            stringify!(tag3B)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).initial) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(pana8_tags_t),
            "::",
            stringify!(initial)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tag40a) as usize - ptr as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(pana8_tags_t),
            "::",
            stringify!(tag40a)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tag40b) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pana8_tags_t),
            "::",
            stringify!(tag40b)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tag41) as usize - ptr as usize },
        114usize,
        concat!(
            "Offset of field: ",
            stringify!(pana8_tags_t),
            "::",
            stringify!(tag41)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).stripe_count) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(pana8_tags_t),
            "::",
            stringify!(stripe_count)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tag43) as usize - ptr as usize },
        150usize,
        concat!(
            "Offset of field: ",
            stringify!(pana8_tags_t),
            "::",
            stringify!(tag43)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).stripe_offsets) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(pana8_tags_t),
            "::",
            stringify!(stripe_offsets)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).stripe_left) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(pana8_tags_t),
            "::",
            stringify!(stripe_left)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).stripe_compressed_size) as usize - ptr as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(pana8_tags_t),
            "::",
            stringify!(stripe_compressed_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).stripe_width) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(pana8_tags_t),
            "::",
            stringify!(stripe_width)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).stripe_height) as usize - ptr as usize },
        234usize,
        concat!(
            "Offset of field: ",
            stringify!(pana8_tags_t),
            "::",
            stringify!(stripe_height)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct unpacker_data_t {
    pub order: libc::c_short,
    pub sraw_mul: [ushort; 4usize],
    pub cr2_slice: [ushort; 3usize],
    pub kodak_cbpp: libc::c_uint,
    pub strip_offset: INT64,
    pub data_offset: INT64,
    pub meta_offset: INT64,
    pub exif_offset: INT64,
    pub exif_subdir_offset: INT64,
    pub ifd0_offset: INT64,
    pub data_size: libc::c_uint,
    pub meta_length: libc::c_uint,
    pub cr3_exif_length: libc::c_uint,
    pub cr3_ifd0_length: libc::c_uint,
    pub thumb_misc: libc::c_uint,
    pub thumb_format: LibRaw_internal_thumbnail_formats,
    pub fuji_layout: libc::c_uint,
    pub tiff_samples: libc::c_uint,
    pub tiff_bps: libc::c_uint,
    pub tiff_compress: libc::c_uint,
    pub tiff_sampleformat: libc::c_uint,
    pub zero_after_ff: libc::c_uint,
    pub tile_width: libc::c_uint,
    pub tile_length: libc::c_uint,
    pub load_flags: libc::c_uint,
    pub data_error: libc::c_uint,
    pub hasselblad_parser_flag: libc::c_int,
    pub posRAFData: libc::c_longlong,
    pub lenRAFData: libc::c_uint,
    pub fuji_total_lines: libc::c_int,
    pub fuji_total_blocks: libc::c_int,
    pub fuji_block_width: libc::c_int,
    pub fuji_bits: libc::c_int,
    pub fuji_raw_type: libc::c_int,
    pub fuji_lossless: libc::c_int,
    pub pana_encoding: libc::c_int,
    pub pana_bpp: libc::c_int,
    pub pana8: pana8_tags_t,
    pub crx_header: [crx_data_header_t; 16usize],
    pub crx_track_selected: libc::c_int,
    pub crx_track_count: libc::c_int,
    pub CR3_CTMDtag: libc::c_short,
    pub CR3_Version: libc::c_short,
    pub CM_found: libc::c_int,
    pub is_NikonTransfer: libc::c_uint,
    pub is_Olympus: libc::c_uint,
    pub OlympusDNG_SubDirOffsetValid: libc::c_int,
    pub is_Sony: libc::c_uint,
    pub is_pana_raw: libc::c_uint,
    pub is_PentaxRicohMakernotes: libc::c_uint,
    pub dng_frames: [libc::c_uint; 20usize],
    pub raw_stride: libc::c_ushort,
}
#[test]
fn bindgen_test_layout_unpacker_data_t() {
    const UNINIT: ::core::mem::MaybeUninit<unpacker_data_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<unpacker_data_t>(),
        2616usize,
        concat!("Size of: ", stringify!(unpacker_data_t))
    );
    assert_eq!(
        ::core::mem::align_of::<unpacker_data_t>(),
        8usize,
        concat!("Alignment of ", stringify!(unpacker_data_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).order) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(order)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sraw_mul) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(sraw_mul)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cr2_slice) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(cr2_slice)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).kodak_cbpp) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(kodak_cbpp)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).strip_offset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(strip_offset)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).data_offset) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(data_offset)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).meta_offset) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(meta_offset)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).exif_offset) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(exif_offset)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).exif_subdir_offset) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(exif_subdir_offset)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ifd0_offset) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(ifd0_offset)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).data_size) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(data_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).meta_length) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(meta_length)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cr3_exif_length) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(cr3_exif_length)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cr3_ifd0_length) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(cr3_ifd0_length)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).thumb_misc) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(thumb_misc)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).thumb_format) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(thumb_format)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fuji_layout) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(fuji_layout)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tiff_samples) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(tiff_samples)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tiff_bps) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(tiff_bps)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tiff_compress) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(tiff_compress)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tiff_sampleformat) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(tiff_sampleformat)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).zero_after_ff) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(zero_after_ff)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tile_width) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(tile_width)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tile_length) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(tile_length)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).load_flags) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(load_flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).data_error) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(data_error)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).hasselblad_parser_flag) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(hasselblad_parser_flag)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).posRAFData) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(posRAFData)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lenRAFData) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(lenRAFData)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fuji_total_lines) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(fuji_total_lines)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fuji_total_blocks) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(fuji_total_blocks)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fuji_block_width) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(fuji_block_width)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fuji_bits) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(fuji_bits)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fuji_raw_type) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(fuji_raw_type)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fuji_lossless) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(fuji_lossless)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pana_encoding) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(pana_encoding)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pana_bpp) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(pana_bpp)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pana8) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(pana8)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).crx_header) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(crx_header)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).crx_track_selected) as usize - ptr as usize },
        2488usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(crx_track_selected)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).crx_track_count) as usize - ptr as usize },
        2492usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(crx_track_count)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR3_CTMDtag) as usize - ptr as usize },
        2496usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(CR3_CTMDtag)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR3_Version) as usize - ptr as usize },
        2498usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(CR3_Version)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CM_found) as usize - ptr as usize },
        2500usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(CM_found)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).is_NikonTransfer) as usize - ptr as usize },
        2504usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(is_NikonTransfer)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).is_Olympus) as usize - ptr as usize },
        2508usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(is_Olympus)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).OlympusDNG_SubDirOffsetValid) as usize - ptr as usize
        },
        2512usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(OlympusDNG_SubDirOffsetValid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).is_Sony) as usize - ptr as usize },
        2516usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(is_Sony)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).is_pana_raw) as usize - ptr as usize },
        2520usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(is_pana_raw)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).is_PentaxRicohMakernotes) as usize - ptr as usize },
        2524usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(is_PentaxRicohMakernotes)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).dng_frames) as usize - ptr as usize },
        2528usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(dng_frames)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).raw_stride) as usize - ptr as usize },
        2608usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(raw_stride)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct libraw_internal_data_t {
    pub internal_data: internal_data_t,
    pub internal_output_params: libraw_internal_output_params_t,
    pub output_data: output_data_t,
    pub identify_data: identify_data_t,
    pub unpacker_data: unpacker_data_t,
}
#[test]
fn bindgen_test_layout_libraw_internal_data_t() {
    const UNINIT: ::core::mem::MaybeUninit<libraw_internal_data_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<libraw_internal_data_t>(),
        2752usize,
        concat!("Size of: ", stringify!(libraw_internal_data_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libraw_internal_data_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_internal_data_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).internal_data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_internal_data_t),
            "::",
            stringify!(internal_data)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).internal_output_params) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_internal_data_t),
            "::",
            stringify!(internal_output_params)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).output_data) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_internal_data_t),
            "::",
            stringify!(output_data)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).identify_data) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_internal_data_t),
            "::",
            stringify!(identify_data)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).unpacker_data) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_internal_data_t),
            "::",
            stringify!(unpacker_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct decode {
    pub branch: [*mut decode; 2usize],
    pub leaf: libc::c_int,
}
#[test]
fn bindgen_test_layout_decode() {
    const UNINIT: ::core::mem::MaybeUninit<decode> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<decode>(),
        24usize,
        concat!("Size of: ", stringify!(decode))
    );
    assert_eq!(
        ::core::mem::align_of::<decode>(),
        8usize,
        concat!("Alignment of ", stringify!(decode))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).branch) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(decode),
            "::",
            stringify!(branch)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).leaf) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(decode),
            "::",
            stringify!(leaf)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct tiff_ifd_t {
    pub t_width: libc::c_int,
    pub t_height: libc::c_int,
    pub bps: libc::c_int,
    pub comp: libc::c_int,
    pub phint: libc::c_int,
    pub offset: libc::c_int,
    pub t_flip: libc::c_int,
    pub samples: libc::c_int,
    pub bytes: libc::c_int,
    pub extrasamples: libc::c_int,
    pub t_tile_width: libc::c_int,
    pub t_tile_length: libc::c_int,
    pub sample_format: libc::c_int,
    pub predictor: libc::c_int,
    pub rows_per_strip: libc::c_int,
    pub strip_offsets: *mut libc::c_int,
    pub strip_offsets_count: libc::c_int,
    pub strip_byte_counts: *mut libc::c_int,
    pub strip_byte_counts_count: libc::c_int,
    pub t_filters: libc::c_uint,
    pub t_vwidth: libc::c_int,
    pub t_vheight: libc::c_int,
    pub t_lm: libc::c_int,
    pub t_tm: libc::c_int,
    pub t_fuji_width: libc::c_int,
    pub t_shutter: f32,
    pub opcode2_offset: INT64,
    pub lineartable_offset: INT64,
    pub lineartable_len: libc::c_int,
    pub dng_color: [libraw_dng_color_t; 2usize],
    pub dng_levels: libraw_dng_levels_t,
    pub newsubfiletype: libc::c_int,
}
#[test]
fn bindgen_test_layout_tiff_ifd_t() {
    const UNINIT: ::core::mem::MaybeUninit<tiff_ifd_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<tiff_ifd_t>(),
        33408usize,
        concat!("Size of: ", stringify!(tiff_ifd_t))
    );
    assert_eq!(
        ::core::mem::align_of::<tiff_ifd_t>(),
        8usize,
        concat!("Alignment of ", stringify!(tiff_ifd_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).t_width) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_ifd_t),
            "::",
            stringify!(t_width)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).t_height) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_ifd_t),
            "::",
            stringify!(t_height)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bps) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_ifd_t),
            "::",
            stringify!(bps)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).comp) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_ifd_t),
            "::",
            stringify!(comp)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).phint) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_ifd_t),
            "::",
            stringify!(phint)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_ifd_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).t_flip) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_ifd_t),
            "::",
            stringify!(t_flip)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).samples) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_ifd_t),
            "::",
            stringify!(samples)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bytes) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_ifd_t),
            "::",
            stringify!(bytes)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).extrasamples) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_ifd_t),
            "::",
            stringify!(extrasamples)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).t_tile_width) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_ifd_t),
            "::",
            stringify!(t_tile_width)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).t_tile_length) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_ifd_t),
            "::",
            stringify!(t_tile_length)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sample_format) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_ifd_t),
            "::",
            stringify!(sample_format)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).predictor) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_ifd_t),
            "::",
            stringify!(predictor)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rows_per_strip) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_ifd_t),
            "::",
            stringify!(rows_per_strip)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).strip_offsets) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_ifd_t),
            "::",
            stringify!(strip_offsets)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).strip_offsets_count) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_ifd_t),
            "::",
            stringify!(strip_offsets_count)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).strip_byte_counts) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_ifd_t),
            "::",
            stringify!(strip_byte_counts)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).strip_byte_counts_count) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_ifd_t),
            "::",
            stringify!(strip_byte_counts_count)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).t_filters) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_ifd_t),
            "::",
            stringify!(t_filters)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).t_vwidth) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_ifd_t),
            "::",
            stringify!(t_vwidth)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).t_vheight) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_ifd_t),
            "::",
            stringify!(t_vheight)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).t_lm) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_ifd_t),
            "::",
            stringify!(t_lm)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).t_tm) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_ifd_t),
            "::",
            stringify!(t_tm)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).t_fuji_width) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_ifd_t),
            "::",
            stringify!(t_fuji_width)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).t_shutter) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_ifd_t),
            "::",
            stringify!(t_shutter)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).opcode2_offset) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_ifd_t),
            "::",
            stringify!(opcode2_offset)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lineartable_offset) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_ifd_t),
            "::",
            stringify!(lineartable_offset)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lineartable_len) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_ifd_t),
            "::",
            stringify!(lineartable_len)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).dng_color) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_ifd_t),
            "::",
            stringify!(dng_color)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).dng_levels) as usize - ptr as usize },
        476usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_ifd_t),
            "::",
            stringify!(dng_levels)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).newsubfiletype) as usize - ptr as usize },
        33404usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_ifd_t),
            "::",
            stringify!(newsubfiletype)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct jhead {
    pub algo: libc::c_int,
    pub bits: libc::c_int,
    pub high: libc::c_int,
    pub wide: libc::c_int,
    pub clrs: libc::c_int,
    pub sraw: libc::c_int,
    pub psv: libc::c_int,
    pub restart: libc::c_int,
    pub vpred: [libc::c_int; 6usize],
    pub quant: [ushort; 64usize],
    pub idct: [ushort; 64usize],
    pub huff: [*mut ushort; 20usize],
    pub free: [*mut ushort; 20usize],
    pub row: *mut ushort,
}
#[test]
fn bindgen_test_layout_jhead() {
    const UNINIT: ::core::mem::MaybeUninit<jhead> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<jhead>(),
        640usize,
        concat!("Size of: ", stringify!(jhead))
    );
    assert_eq!(
        ::core::mem::align_of::<jhead>(),
        8usize,
        concat!("Alignment of ", stringify!(jhead))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).algo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jhead),
            "::",
            stringify!(algo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bits) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(jhead),
            "::",
            stringify!(bits)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).high) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jhead),
            "::",
            stringify!(high)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).wide) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(jhead),
            "::",
            stringify!(wide)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).clrs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jhead),
            "::",
            stringify!(clrs)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sraw) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(jhead),
            "::",
            stringify!(sraw)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).psv) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jhead),
            "::",
            stringify!(psv)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).restart) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(jhead),
            "::",
            stringify!(restart)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).vpred) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(jhead),
            "::",
            stringify!(vpred)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).quant) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(jhead),
            "::",
            stringify!(quant)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).idct) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(jhead),
            "::",
            stringify!(idct)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).huff) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(jhead),
            "::",
            stringify!(huff)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).free) as usize - ptr as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(jhead),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).row) as usize - ptr as usize },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(jhead),
            "::",
            stringify!(row)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct libraw_tiff_tag {
    pub tag: ushort,
    pub type_: ushort,
    pub count: libc::c_int,
    pub val: libraw_tiff_tag__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union libraw_tiff_tag__bindgen_ty_1 {
    pub c: [libc::c_char; 4usize],
    pub s: [libc::c_short; 2usize],
    pub i: libc::c_int,
}
#[test]
fn bindgen_test_layout_libraw_tiff_tag__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<libraw_tiff_tag__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<libraw_tiff_tag__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(libraw_tiff_tag__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<libraw_tiff_tag__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(libraw_tiff_tag__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).c) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_tiff_tag__bindgen_ty_1),
            "::",
            stringify!(c)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_tiff_tag__bindgen_ty_1),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).i) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_tiff_tag__bindgen_ty_1),
            "::",
            stringify!(i)
        )
    );
}
#[test]
fn bindgen_test_layout_libraw_tiff_tag() {
    const UNINIT: ::core::mem::MaybeUninit<libraw_tiff_tag> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<libraw_tiff_tag>(),
        12usize,
        concat!("Size of: ", stringify!(libraw_tiff_tag))
    );
    assert_eq!(
        ::core::mem::align_of::<libraw_tiff_tag>(),
        4usize,
        concat!("Alignment of ", stringify!(libraw_tiff_tag))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_tiff_tag),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_tiff_tag),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_tiff_tag),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_tiff_tag),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tiff_hdr {
    pub t_order: ushort,
    pub magic: ushort,
    pub ifd: libc::c_int,
    pub pad: ushort,
    pub ntag: ushort,
    pub tag: [libraw_tiff_tag; 23usize],
    pub nextifd: libc::c_int,
    pub pad2: ushort,
    pub nexif: ushort,
    pub exif: [libraw_tiff_tag; 4usize],
    pub pad3: ushort,
    pub ngps: ushort,
    pub gpst: [libraw_tiff_tag; 10usize],
    pub bps: [libc::c_short; 4usize],
    pub rat: [libc::c_int; 10usize],
    pub gps: [libc::c_uint; 26usize],
    pub t_desc: [libc::c_char; 512usize],
    pub t_make: [libc::c_char; 64usize],
    pub t_model: [libc::c_char; 64usize],
    pub soft: [libc::c_char; 32usize],
    pub date: [libc::c_char; 20usize],
    pub t_artist: [libc::c_char; 64usize],
}
#[test]
fn bindgen_test_layout_tiff_hdr() {
    const UNINIT: ::core::mem::MaybeUninit<tiff_hdr> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<tiff_hdr>(),
        1376usize,
        concat!("Size of: ", stringify!(tiff_hdr))
    );
    assert_eq!(
        ::core::mem::align_of::<tiff_hdr>(),
        4usize,
        concat!("Alignment of ", stringify!(tiff_hdr))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).t_order) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_hdr),
            "::",
            stringify!(t_order)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).magic) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_hdr),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ifd) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_hdr),
            "::",
            stringify!(ifd)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_hdr),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ntag) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_hdr),
            "::",
            stringify!(ntag)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tag) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_hdr),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nextifd) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_hdr),
            "::",
            stringify!(nextifd)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pad2) as usize - ptr as usize },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_hdr),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nexif) as usize - ptr as usize },
        294usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_hdr),
            "::",
            stringify!(nexif)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).exif) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_hdr),
            "::",
            stringify!(exif)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pad3) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_hdr),
            "::",
            stringify!(pad3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ngps) as usize - ptr as usize },
        346usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_hdr),
            "::",
            stringify!(ngps)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).gpst) as usize - ptr as usize },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_hdr),
            "::",
            stringify!(gpst)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bps) as usize - ptr as usize },
        468usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_hdr),
            "::",
            stringify!(bps)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rat) as usize - ptr as usize },
        476usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_hdr),
            "::",
            stringify!(rat)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).gps) as usize - ptr as usize },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_hdr),
            "::",
            stringify!(gps)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).t_desc) as usize - ptr as usize },
        620usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_hdr),
            "::",
            stringify!(t_desc)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).t_make) as usize - ptr as usize },
        1132usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_hdr),
            "::",
            stringify!(t_make)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).t_model) as usize - ptr as usize },
        1196usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_hdr),
            "::",
            stringify!(t_model)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).soft) as usize - ptr as usize },
        1260usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_hdr),
            "::",
            stringify!(soft)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).date) as usize - ptr as usize },
        1292usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_hdr),
            "::",
            stringify!(date)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).t_artist) as usize - ptr as usize },
        1312usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff_hdr),
            "::",
            stringify!(t_artist)
        )
    );
}
extern "C" {
    pub fn libraw_strerror(errorcode: libc::c_int) -> *const libc::c_char;
}
extern "C" {
    pub fn libraw_strprogress(arg1: LibRaw_progress) -> *const libc::c_char;
}
extern "C" {
    pub fn libraw_init(flags: libc::c_uint) -> *mut libraw_data_t;
}
extern "C" {
    pub fn libraw_open_file(arg1: *mut libraw_data_t, arg2: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn libraw_open_wfile(arg1: *mut libraw_data_t, arg2: *const wchar_t) -> libc::c_int;
}
extern "C" {
    pub fn libraw_open_buffer(
        arg1: *mut libraw_data_t,
        buffer: *const libc::c_void,
        size: usize,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libraw_open_bayer(
        lr: *mut libraw_data_t,
        data: *mut libc::c_uchar,
        datalen: libc::c_uint,
        _raw_width: ushort,
        _raw_height: ushort,
        _left_margin: ushort,
        _top_margin: ushort,
        _right_margin: ushort,
        _bottom_margin: ushort,
        procflags: libc::c_uchar,
        bayer_battern: libc::c_uchar,
        unused_bits: libc::c_uint,
        otherflags: libc::c_uint,
        black_level: libc::c_uint,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libraw_unpack(arg1: *mut libraw_data_t) -> libc::c_int;
}
extern "C" {
    pub fn libraw_unpack_thumb(arg1: *mut libraw_data_t) -> libc::c_int;
}
extern "C" {
    pub fn libraw_unpack_thumb_ex(arg1: *mut libraw_data_t, arg2: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn libraw_recycle_datastream(arg1: *mut libraw_data_t);
}
extern "C" {
    pub fn libraw_recycle(arg1: *mut libraw_data_t);
}
extern "C" {
    pub fn libraw_close(arg1: *mut libraw_data_t);
}
extern "C" {
    pub fn libraw_subtract_black(arg1: *mut libraw_data_t);
}
extern "C" {
    pub fn libraw_raw2image(arg1: *mut libraw_data_t) -> libc::c_int;
}
extern "C" {
    pub fn libraw_free_image(arg1: *mut libraw_data_t);
}
extern "C" {
    pub fn libraw_version() -> *const libc::c_char;
}
extern "C" {
    pub fn libraw_versionNumber() -> libc::c_int;
}
extern "C" {
    pub fn libraw_cameraList() -> *mut *const libc::c_char;
}
extern "C" {
    pub fn libraw_cameraCount() -> libc::c_int;
}
extern "C" {
    pub fn libraw_set_exifparser_handler(
        arg1: *mut libraw_data_t,
        cb: exif_parser_callback,
        datap: *mut libc::c_void,
    );
}
extern "C" {
    pub fn libraw_set_dataerror_handler(
        arg1: *mut libraw_data_t,
        func: data_callback,
        datap: *mut libc::c_void,
    );
}
extern "C" {
    pub fn libraw_set_progress_handler(
        arg1: *mut libraw_data_t,
        cb: progress_callback,
        datap: *mut libc::c_void,
    );
}
extern "C" {
    pub fn libraw_unpack_function_name(lr: *mut libraw_data_t) -> *const libc::c_char;
}
extern "C" {
    pub fn libraw_get_decoder_info(
        lr: *mut libraw_data_t,
        d: *mut libraw_decoder_info_t,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libraw_COLOR(
        arg1: *mut libraw_data_t,
        row: libc::c_int,
        col: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libraw_capabilities() -> libc::c_uint;
}
extern "C" {
    pub fn libraw_adjust_sizes_info_only(arg1: *mut libraw_data_t) -> libc::c_int;
}
extern "C" {
    pub fn libraw_dcraw_ppm_tiff_writer(
        lr: *mut libraw_data_t,
        filename: *const libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libraw_dcraw_thumb_writer(
        lr: *mut libraw_data_t,
        fname: *const libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libraw_dcraw_process(lr: *mut libraw_data_t) -> libc::c_int;
}
extern "C" {
    pub fn libraw_dcraw_make_mem_image(
        lr: *mut libraw_data_t,
        errc: *mut libc::c_int,
    ) -> *mut libraw_processed_image_t;
}
extern "C" {
    pub fn libraw_dcraw_make_mem_thumb(
        lr: *mut libraw_data_t,
        errc: *mut libc::c_int,
    ) -> *mut libraw_processed_image_t;
}
extern "C" {
    pub fn libraw_dcraw_clear_mem(arg1: *mut libraw_processed_image_t);
}
extern "C" {
    pub fn libraw_set_demosaic(lr: *mut libraw_data_t, value: libc::c_int);
}
extern "C" {
    pub fn libraw_set_output_color(lr: *mut libraw_data_t, value: libc::c_int);
}
extern "C" {
    pub fn libraw_set_adjust_maximum_thr(lr: *mut libraw_data_t, value: f32);
}
extern "C" {
    pub fn libraw_set_user_mul(lr: *mut libraw_data_t, index: libc::c_int, val: f32);
}
extern "C" {
    pub fn libraw_set_output_bps(lr: *mut libraw_data_t, value: libc::c_int);
}
extern "C" {
    pub fn libraw_set_gamma(lr: *mut libraw_data_t, index: libc::c_int, value: f32);
}
extern "C" {
    pub fn libraw_set_no_auto_bright(lr: *mut libraw_data_t, value: libc::c_int);
}
extern "C" {
    pub fn libraw_set_bright(lr: *mut libraw_data_t, value: f32);
}
extern "C" {
    pub fn libraw_set_highlight(lr: *mut libraw_data_t, value: libc::c_int);
}
extern "C" {
    pub fn libraw_set_fbdd_noiserd(lr: *mut libraw_data_t, value: libc::c_int);
}
extern "C" {
    pub fn libraw_get_raw_height(lr: *mut libraw_data_t) -> libc::c_int;
}
extern "C" {
    pub fn libraw_get_raw_width(lr: *mut libraw_data_t) -> libc::c_int;
}
extern "C" {
    pub fn libraw_get_iheight(lr: *mut libraw_data_t) -> libc::c_int;
}
extern "C" {
    pub fn libraw_get_iwidth(lr: *mut libraw_data_t) -> libc::c_int;
}
extern "C" {
    pub fn libraw_get_cam_mul(lr: *mut libraw_data_t, index: libc::c_int) -> f32;
}
extern "C" {
    pub fn libraw_get_pre_mul(lr: *mut libraw_data_t, index: libc::c_int) -> f32;
}
extern "C" {
    pub fn libraw_get_rgb_cam(
        lr: *mut libraw_data_t,
        index1: libc::c_int,
        index2: libc::c_int,
    ) -> f32;
}
extern "C" {
    pub fn libraw_get_color_maximum(lr: *mut libraw_data_t) -> libc::c_int;
}
extern "C" {
    pub fn libraw_set_output_tif(lr: *mut libraw_data_t, value: libc::c_int);
}
extern "C" {
    pub fn libraw_get_iparams(lr: *mut libraw_data_t) -> *mut libraw_iparams_t;
}
extern "C" {
    pub fn libraw_get_lensinfo(lr: *mut libraw_data_t) -> *mut libraw_lensinfo_t;
}
extern "C" {
    pub fn libraw_get_imgother(lr: *mut libraw_data_t) -> *mut libraw_imgother_t;
}
pub type __builtin_va_list = *mut libc::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct lconv {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct LibRaw_abstract_datastream {
    pub _address: u8,
}
