#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(deref_nullptr)]


/* automatically generated by rust-bindgen 0.59.2 */

pub const LIBRAW_DEFAULT_ADJUST_MAXIMUM_THRESHOLD: f64 = 0.75;
pub const LIBRAW_DEFAULT_AUTO_BRIGHTNESS_THRESHOLD: f64 = 0.01;
pub const LIBRAW_MAX_ALLOC_MB_DEFAULT: u32 = 2048;
pub const LIBRAW_MAX_NONDNG_RAW_FILE_SIZE: u32 = 2147483647;
pub const LIBRAW_MAX_DNG_RAW_FILE_SIZE: u32 = 2147483647;
pub const LIBRAW_MAX_THUMBNAIL_MB: u32 = 512;
pub const LIBRAW_MAX_METADATA_BLOCKS: u32 = 1024;
pub const LIBRAW_CBLACK_SIZE: u32 = 4104;
pub const LIBRAW_IFD_MAXCOUNT: u32 = 10;
pub const LIBRAW_CRXTRACKS_MAXCOUNT: u32 = 16;
pub const LIBRAW_AFDATA_MAXCOUNT: u32 = 4;
pub const LIBRAW_AHD_TILE: u32 = 512;
pub const LIBRAW_LENS_NOT_SET: i32 = -1;
pub const LIBRAW_XTRANS: u32 = 9;
pub const LIBRAW_PROGRESS_THUMB_MASK: u32 = 268435455;
pub const LIBRAW_MAJOR_VERSION: u32 = 0;
pub const LIBRAW_MINOR_VERSION: u32 = 21;
pub const LIBRAW_PATCH_VERSION: u32 = 0;
pub const LIBRAW_SHLIB_CURRENT: u32 = 22;
pub const LIBRAW_SHLIB_REVISION: u32 = 0;
pub const LIBRAW_SHLIB_AGE: u32 = 0;
pub const LibRawBigEndian: u32 = 0;
pub const LIBRAW_HISTOGRAM_SIZE: u32 = 8192;
pub type size_t = ::std::os::raw::c_ulonglong;
pub type wchar_t = ::std::os::raw::c_ushort;
pub type __time64_t = ::std::os::raw::c_longlong;
pub type time_t = __time64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _iobuf {
    pub _ptr: *mut ::std::os::raw::c_char,
    pub _cnt: ::std::os::raw::c_int,
    pub _base: *mut ::std::os::raw::c_char,
    pub _flag: ::std::os::raw::c_int,
    pub _file: ::std::os::raw::c_int,
    pub _charbuf: ::std::os::raw::c_int,
    pub _bufsiz: ::std::os::raw::c_int,
    pub _tmpfname: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__iobuf() {
    assert_eq!(
        ::std::mem::size_of::<_iobuf>(),
        48usize,
        concat!("Size of: ", stringify!(_iobuf))
    );
    assert_eq!(
        ::std::mem::align_of::<_iobuf>(),
        8usize,
        concat!("Alignment of ", stringify!(_iobuf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_iobuf>()))._ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_iobuf),
            "::",
            stringify!(_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_iobuf>()))._cnt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_iobuf),
            "::",
            stringify!(_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_iobuf>()))._base as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_iobuf),
            "::",
            stringify!(_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_iobuf>()))._flag as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_iobuf),
            "::",
            stringify!(_flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_iobuf>()))._file as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_iobuf),
            "::",
            stringify!(_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_iobuf>()))._charbuf as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_iobuf),
            "::",
            stringify!(_charbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_iobuf>()))._bufsiz as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_iobuf),
            "::",
            stringify!(_bufsiz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_iobuf>()))._tmpfname as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_iobuf),
            "::",
            stringify!(_tmpfname)
        )
    );
}
pub type FILE = _iobuf;
pub const LibRaw_openbayer_patterns_LIBRAW_OPENBAYER_RGGB: LibRaw_openbayer_patterns = 148;
pub const LibRaw_openbayer_patterns_LIBRAW_OPENBAYER_BGGR: LibRaw_openbayer_patterns = 22;
pub const LibRaw_openbayer_patterns_LIBRAW_OPENBAYER_GRBG: LibRaw_openbayer_patterns = 97;
pub const LibRaw_openbayer_patterns_LIBRAW_OPENBAYER_GBRG: LibRaw_openbayer_patterns = 73;
pub type LibRaw_openbayer_patterns = ::std::os::raw::c_uint;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_FORWARDMATRIX: LibRaw_dngfields_marks = 1;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_ILLUMINANT: LibRaw_dngfields_marks = 2;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_COLORMATRIX: LibRaw_dngfields_marks = 4;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_CALIBRATION: LibRaw_dngfields_marks = 8;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_ANALOGBALANCE: LibRaw_dngfields_marks = 16;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_BLACK: LibRaw_dngfields_marks = 32;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_WHITE: LibRaw_dngfields_marks = 64;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_OPCODE2: LibRaw_dngfields_marks = 128;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_LINTABLE: LibRaw_dngfields_marks = 256;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_CROPORIGIN: LibRaw_dngfields_marks = 512;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_CROPSIZE: LibRaw_dngfields_marks = 1024;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_PREVIEWCS: LibRaw_dngfields_marks = 2048;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_ASSHOTNEUTRAL: LibRaw_dngfields_marks = 4096;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_BASELINEEXPOSURE: LibRaw_dngfields_marks = 8192;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_LINEARRESPONSELIMIT: LibRaw_dngfields_marks = 16384;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_USERCROP: LibRaw_dngfields_marks = 32768;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_OPCODE1: LibRaw_dngfields_marks = 65536;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_OPCODE3: LibRaw_dngfields_marks = 131072;
pub type LibRaw_dngfields_marks = ::std::os::raw::c_uint;
pub const LibRaw_As_Shot_WB_Applied_codes_LIBRAW_ASWB_APPLIED: LibRaw_As_Shot_WB_Applied_codes = 1;
pub const LibRaw_As_Shot_WB_Applied_codes_LIBRAW_ASWB_CANON: LibRaw_As_Shot_WB_Applied_codes = 2;
pub const LibRaw_As_Shot_WB_Applied_codes_LIBRAW_ASWB_NIKON: LibRaw_As_Shot_WB_Applied_codes = 4;
pub const LibRaw_As_Shot_WB_Applied_codes_LIBRAW_ASWB_NIKON_SRAW: LibRaw_As_Shot_WB_Applied_codes =
    8;
pub const LibRaw_As_Shot_WB_Applied_codes_LIBRAW_ASWB_PENTAX: LibRaw_As_Shot_WB_Applied_codes = 16;
pub type LibRaw_As_Shot_WB_Applied_codes = ::std::os::raw::c_uint;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_UNKNOWN: LibRaw_ExifTagTypes = 0;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_BYTE: LibRaw_ExifTagTypes = 1;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_ASCII: LibRaw_ExifTagTypes = 2;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_SHORT: LibRaw_ExifTagTypes = 3;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_LONG: LibRaw_ExifTagTypes = 4;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_RATIONAL: LibRaw_ExifTagTypes = 5;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_SBYTE: LibRaw_ExifTagTypes = 6;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_UNDEFINED: LibRaw_ExifTagTypes = 7;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_SSHORT: LibRaw_ExifTagTypes = 8;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_SLONG: LibRaw_ExifTagTypes = 9;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_SRATIONAL: LibRaw_ExifTagTypes = 10;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_FLOAT: LibRaw_ExifTagTypes = 11;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_DOUBLE: LibRaw_ExifTagTypes = 12;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_IFD: LibRaw_ExifTagTypes = 13;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_UNICODE: LibRaw_ExifTagTypes = 14;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_COMPLEX: LibRaw_ExifTagTypes = 15;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_LONG8: LibRaw_ExifTagTypes = 16;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_SLONG8: LibRaw_ExifTagTypes = 17;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_IFD8: LibRaw_ExifTagTypes = 18;
pub type LibRaw_ExifTagTypes = ::std::os::raw::c_uint;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Unknown: LibRaw_whitebalance_code = 0;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Daylight: LibRaw_whitebalance_code = 1;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Fluorescent: LibRaw_whitebalance_code = 2;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Tungsten: LibRaw_whitebalance_code = 3;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Flash: LibRaw_whitebalance_code = 4;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_FineWeather: LibRaw_whitebalance_code = 9;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Cloudy: LibRaw_whitebalance_code = 10;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Shade: LibRaw_whitebalance_code = 11;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_FL_D: LibRaw_whitebalance_code = 12;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_FL_N: LibRaw_whitebalance_code = 13;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_FL_W: LibRaw_whitebalance_code = 14;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_FL_WW: LibRaw_whitebalance_code = 15;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_FL_L: LibRaw_whitebalance_code = 16;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Ill_A: LibRaw_whitebalance_code = 17;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Ill_B: LibRaw_whitebalance_code = 18;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Ill_C: LibRaw_whitebalance_code = 19;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_D55: LibRaw_whitebalance_code = 20;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_D65: LibRaw_whitebalance_code = 21;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_D75: LibRaw_whitebalance_code = 22;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_D50: LibRaw_whitebalance_code = 23;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_StudioTungsten: LibRaw_whitebalance_code = 24;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Sunset: LibRaw_whitebalance_code = 64;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Underwater: LibRaw_whitebalance_code = 65;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_FluorescentHigh: LibRaw_whitebalance_code = 66;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_HT_Mercury: LibRaw_whitebalance_code = 67;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_AsShot: LibRaw_whitebalance_code = 81;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Auto: LibRaw_whitebalance_code = 82;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Custom: LibRaw_whitebalance_code = 83;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Auto1: LibRaw_whitebalance_code = 85;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Auto2: LibRaw_whitebalance_code = 86;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Auto3: LibRaw_whitebalance_code = 87;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Auto4: LibRaw_whitebalance_code = 88;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Custom1: LibRaw_whitebalance_code = 90;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Custom2: LibRaw_whitebalance_code = 91;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Custom3: LibRaw_whitebalance_code = 92;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Custom4: LibRaw_whitebalance_code = 93;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Custom5: LibRaw_whitebalance_code = 94;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Custom6: LibRaw_whitebalance_code = 95;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_PC_Set1: LibRaw_whitebalance_code = 96;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_PC_Set2: LibRaw_whitebalance_code = 97;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_PC_Set3: LibRaw_whitebalance_code = 98;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_PC_Set4: LibRaw_whitebalance_code = 99;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_PC_Set5: LibRaw_whitebalance_code = 100;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Measured: LibRaw_whitebalance_code = 110;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_BW: LibRaw_whitebalance_code = 120;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Kelvin: LibRaw_whitebalance_code = 254;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Other: LibRaw_whitebalance_code = 255;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_None: LibRaw_whitebalance_code = 65535;
pub type LibRaw_whitebalance_code = ::std::os::raw::c_uint;
pub const LibRaw_MultiExposure_related_LIBRAW_ME_NONE: LibRaw_MultiExposure_related = 0;
pub const LibRaw_MultiExposure_related_LIBRAW_ME_SIMPLE: LibRaw_MultiExposure_related = 1;
pub const LibRaw_MultiExposure_related_LIBRAW_ME_OVERLAY: LibRaw_MultiExposure_related = 2;
pub const LibRaw_MultiExposure_related_LIBRAW_ME_HDR: LibRaw_MultiExposure_related = 3;
pub type LibRaw_MultiExposure_related = ::std::os::raw::c_uint;
pub const LibRaw_dng_processing_LIBRAW_DNG_NONE: LibRaw_dng_processing = 0;
pub const LibRaw_dng_processing_LIBRAW_DNG_FLOAT: LibRaw_dng_processing = 1;
pub const LibRaw_dng_processing_LIBRAW_DNG_LINEAR: LibRaw_dng_processing = 2;
pub const LibRaw_dng_processing_LIBRAW_DNG_DEFLATE: LibRaw_dng_processing = 4;
pub const LibRaw_dng_processing_LIBRAW_DNG_XTRANS: LibRaw_dng_processing = 8;
pub const LibRaw_dng_processing_LIBRAW_DNG_OTHER: LibRaw_dng_processing = 16;
pub const LibRaw_dng_processing_LIBRAW_DNG_8BIT: LibRaw_dng_processing = 32;
pub const LibRaw_dng_processing_LIBRAW_DNG_ALL: LibRaw_dng_processing = 63;
pub const LibRaw_dng_processing_LIBRAW_DNG_DEFAULT: LibRaw_dng_processing = 39;
pub type LibRaw_dng_processing = ::std::os::raw::c_uint;
pub const LibRaw_output_flags_LIBRAW_OUTPUT_FLAGS_NONE: LibRaw_output_flags = 0;
pub const LibRaw_output_flags_LIBRAW_OUTPUT_FLAGS_PPMMETA: LibRaw_output_flags = 1;
pub type LibRaw_output_flags = ::std::os::raw::c_uint;
pub const LibRaw_runtime_capabilities_LIBRAW_CAPS_RAWSPEED: LibRaw_runtime_capabilities = 1;
pub const LibRaw_runtime_capabilities_LIBRAW_CAPS_DNGSDK: LibRaw_runtime_capabilities = 2;
pub const LibRaw_runtime_capabilities_LIBRAW_CAPS_GPRSDK: LibRaw_runtime_capabilities = 4;
pub const LibRaw_runtime_capabilities_LIBRAW_CAPS_UNICODEPATHS: LibRaw_runtime_capabilities = 8;
pub const LibRaw_runtime_capabilities_LIBRAW_CAPS_X3FTOOLS: LibRaw_runtime_capabilities = 16;
pub const LibRaw_runtime_capabilities_LIBRAW_CAPS_RPI6BY9: LibRaw_runtime_capabilities = 32;
pub const LibRaw_runtime_capabilities_LIBRAW_CAPS_ZLIB: LibRaw_runtime_capabilities = 64;
pub const LibRaw_runtime_capabilities_LIBRAW_CAPS_JPEG: LibRaw_runtime_capabilities = 128;
pub const LibRaw_runtime_capabilities_LIBRAW_CAPS_RAWSPEED3: LibRaw_runtime_capabilities = 256;
pub const LibRaw_runtime_capabilities_LIBRAW_CAPS_RAWSPEED_BITS: LibRaw_runtime_capabilities = 512;
pub type LibRaw_runtime_capabilities = ::std::os::raw::c_uint;
pub const LibRaw_colorspace_LIBRAW_COLORSPACE_NotFound: LibRaw_colorspace = 0;
pub const LibRaw_colorspace_LIBRAW_COLORSPACE_sRGB: LibRaw_colorspace = 1;
pub const LibRaw_colorspace_LIBRAW_COLORSPACE_AdobeRGB: LibRaw_colorspace = 2;
pub const LibRaw_colorspace_LIBRAW_COLORSPACE_WideGamutRGB: LibRaw_colorspace = 3;
pub const LibRaw_colorspace_LIBRAW_COLORSPACE_ProPhotoRGB: LibRaw_colorspace = 4;
pub const LibRaw_colorspace_LIBRAW_COLORSPACE_ICC: LibRaw_colorspace = 5;
pub const LibRaw_colorspace_LIBRAW_COLORSPACE_Uncalibrated: LibRaw_colorspace = 6;
pub const LibRaw_colorspace_LIBRAW_COLORSPACE_CameraLinearUniWB: LibRaw_colorspace = 7;
pub const LibRaw_colorspace_LIBRAW_COLORSPACE_CameraLinear: LibRaw_colorspace = 8;
pub const LibRaw_colorspace_LIBRAW_COLORSPACE_CameraGammaUniWB: LibRaw_colorspace = 9;
pub const LibRaw_colorspace_LIBRAW_COLORSPACE_CameraGamma: LibRaw_colorspace = 10;
pub const LibRaw_colorspace_LIBRAW_COLORSPACE_MonochromeLinear: LibRaw_colorspace = 11;
pub const LibRaw_colorspace_LIBRAW_COLORSPACE_MonochromeGamma: LibRaw_colorspace = 12;
pub const LibRaw_colorspace_LIBRAW_COLORSPACE_Unknown: LibRaw_colorspace = 255;
pub type LibRaw_colorspace = ::std::os::raw::c_uint;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Unknown: LibRaw_cameramaker_index = 0;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Agfa: LibRaw_cameramaker_index = 1;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Alcatel: LibRaw_cameramaker_index = 2;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Apple: LibRaw_cameramaker_index = 3;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Aptina: LibRaw_cameramaker_index = 4;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_AVT: LibRaw_cameramaker_index = 5;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Baumer: LibRaw_cameramaker_index = 6;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Broadcom: LibRaw_cameramaker_index = 7;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Canon: LibRaw_cameramaker_index = 8;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Casio: LibRaw_cameramaker_index = 9;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_CINE: LibRaw_cameramaker_index = 10;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Clauss: LibRaw_cameramaker_index = 11;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Contax: LibRaw_cameramaker_index = 12;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Creative: LibRaw_cameramaker_index = 13;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_DJI: LibRaw_cameramaker_index = 14;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_DXO: LibRaw_cameramaker_index = 15;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Epson: LibRaw_cameramaker_index = 16;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Foculus: LibRaw_cameramaker_index = 17;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Fujifilm: LibRaw_cameramaker_index = 18;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Generic: LibRaw_cameramaker_index = 19;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Gione: LibRaw_cameramaker_index = 20;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_GITUP: LibRaw_cameramaker_index = 21;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Google: LibRaw_cameramaker_index = 22;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_GoPro: LibRaw_cameramaker_index = 23;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Hasselblad: LibRaw_cameramaker_index = 24;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_HTC: LibRaw_cameramaker_index = 25;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_I_Mobile: LibRaw_cameramaker_index = 26;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Imacon: LibRaw_cameramaker_index = 27;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_JK_Imaging: LibRaw_cameramaker_index = 28;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Kodak: LibRaw_cameramaker_index = 29;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Konica: LibRaw_cameramaker_index = 30;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Leaf: LibRaw_cameramaker_index = 31;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Leica: LibRaw_cameramaker_index = 32;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Lenovo: LibRaw_cameramaker_index = 33;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_LG: LibRaw_cameramaker_index = 34;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Logitech: LibRaw_cameramaker_index = 35;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Mamiya: LibRaw_cameramaker_index = 36;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Matrix: LibRaw_cameramaker_index = 37;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Meizu: LibRaw_cameramaker_index = 38;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Micron: LibRaw_cameramaker_index = 39;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Minolta: LibRaw_cameramaker_index = 40;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Motorola: LibRaw_cameramaker_index = 41;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_NGM: LibRaw_cameramaker_index = 42;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Nikon: LibRaw_cameramaker_index = 43;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Nokia: LibRaw_cameramaker_index = 44;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Olympus: LibRaw_cameramaker_index = 45;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_OmniVison: LibRaw_cameramaker_index = 46;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Panasonic: LibRaw_cameramaker_index = 47;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Parrot: LibRaw_cameramaker_index = 48;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Pentax: LibRaw_cameramaker_index = 49;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_PhaseOne: LibRaw_cameramaker_index = 50;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_PhotoControl: LibRaw_cameramaker_index = 51;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Photron: LibRaw_cameramaker_index = 52;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Pixelink: LibRaw_cameramaker_index = 53;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Polaroid: LibRaw_cameramaker_index = 54;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_RED: LibRaw_cameramaker_index = 55;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Ricoh: LibRaw_cameramaker_index = 56;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Rollei: LibRaw_cameramaker_index = 57;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_RoverShot: LibRaw_cameramaker_index = 58;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Samsung: LibRaw_cameramaker_index = 59;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Sigma: LibRaw_cameramaker_index = 60;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Sinar: LibRaw_cameramaker_index = 61;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_SMaL: LibRaw_cameramaker_index = 62;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Sony: LibRaw_cameramaker_index = 63;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_ST_Micro: LibRaw_cameramaker_index = 64;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_THL: LibRaw_cameramaker_index = 65;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_VLUU: LibRaw_cameramaker_index = 66;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Xiaomi: LibRaw_cameramaker_index = 67;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_XIAOYI: LibRaw_cameramaker_index = 68;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_YI: LibRaw_cameramaker_index = 69;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Yuneec: LibRaw_cameramaker_index = 70;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Zeiss: LibRaw_cameramaker_index = 71;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_OnePlus: LibRaw_cameramaker_index = 72;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_ISG: LibRaw_cameramaker_index = 73;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_VIVO: LibRaw_cameramaker_index = 74;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_HMD_Global: LibRaw_cameramaker_index = 75;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_HUAWEI: LibRaw_cameramaker_index = 76;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_RaspberryPi: LibRaw_cameramaker_index = 77;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_TheLastOne: LibRaw_cameramaker_index = 78;
pub type LibRaw_cameramaker_index = ::std::os::raw::c_uint;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Unknown: LibRaw_camera_mounts = 0;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Alpa: LibRaw_camera_mounts = 1;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_C: LibRaw_camera_mounts = 2;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Canon_EF_M: LibRaw_camera_mounts = 3;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Canon_EF_S: LibRaw_camera_mounts = 4;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Canon_EF: LibRaw_camera_mounts = 5;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Canon_RF: LibRaw_camera_mounts = 6;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Contax_N: LibRaw_camera_mounts = 7;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Contax645: LibRaw_camera_mounts = 8;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_FT: LibRaw_camera_mounts = 9;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_mFT: LibRaw_camera_mounts = 10;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Fuji_GF: LibRaw_camera_mounts = 11;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Fuji_GX: LibRaw_camera_mounts = 12;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Fuji_X: LibRaw_camera_mounts = 13;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Hasselblad_H: LibRaw_camera_mounts = 14;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Hasselblad_V: LibRaw_camera_mounts = 15;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Hasselblad_XCD: LibRaw_camera_mounts = 16;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Leica_M: LibRaw_camera_mounts = 17;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Leica_R: LibRaw_camera_mounts = 18;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Leica_S: LibRaw_camera_mounts = 19;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Leica_SL: LibRaw_camera_mounts = 20;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Leica_TL: LibRaw_camera_mounts = 21;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_LPS_L: LibRaw_camera_mounts = 22;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Mamiya67: LibRaw_camera_mounts = 23;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Mamiya645: LibRaw_camera_mounts = 24;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Minolta_A: LibRaw_camera_mounts = 25;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Nikon_CX: LibRaw_camera_mounts = 26;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Nikon_F: LibRaw_camera_mounts = 27;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Nikon_Z: LibRaw_camera_mounts = 28;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_PhaseOne_iXM_MV: LibRaw_camera_mounts = 29;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_PhaseOne_iXM_RS: LibRaw_camera_mounts = 30;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_PhaseOne_iXM: LibRaw_camera_mounts = 31;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Pentax_645: LibRaw_camera_mounts = 32;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Pentax_K: LibRaw_camera_mounts = 33;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Pentax_Q: LibRaw_camera_mounts = 34;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_RicohModule: LibRaw_camera_mounts = 35;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Rollei_bayonet: LibRaw_camera_mounts = 36;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Samsung_NX_M: LibRaw_camera_mounts = 37;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Samsung_NX: LibRaw_camera_mounts = 38;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Sigma_X3F: LibRaw_camera_mounts = 39;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Sony_E: LibRaw_camera_mounts = 40;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_LF: LibRaw_camera_mounts = 41;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_DigitalBack: LibRaw_camera_mounts = 42;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_FixedLens: LibRaw_camera_mounts = 43;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_IL_UM: LibRaw_camera_mounts = 44;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_TheLastOne: LibRaw_camera_mounts = 45;
pub type LibRaw_camera_mounts = ::std::os::raw::c_uint;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_Unknown: LibRaw_camera_formats = 0;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_APSC: LibRaw_camera_formats = 1;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_FF: LibRaw_camera_formats = 2;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_MF: LibRaw_camera_formats = 3;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_APSH: LibRaw_camera_formats = 4;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_1INCH: LibRaw_camera_formats = 5;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_1div2p3INCH: LibRaw_camera_formats = 6;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_1div1p7INCH: LibRaw_camera_formats = 7;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_FT: LibRaw_camera_formats = 8;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_CROP645: LibRaw_camera_formats = 9;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_LeicaS: LibRaw_camera_formats = 10;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_645: LibRaw_camera_formats = 11;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_66: LibRaw_camera_formats = 12;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_69: LibRaw_camera_formats = 13;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_LF: LibRaw_camera_formats = 14;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_Leica_DMR: LibRaw_camera_formats = 15;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_67: LibRaw_camera_formats = 16;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_SigmaAPSC: LibRaw_camera_formats = 17;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_SigmaMerrill: LibRaw_camera_formats = 18;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_SigmaAPSH: LibRaw_camera_formats = 19;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_3648: LibRaw_camera_formats = 20;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_68: LibRaw_camera_formats = 21;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_TheLastOne: LibRaw_camera_formats = 22;
pub type LibRaw_camera_formats = ::std::os::raw::c_uint;
pub const LibRawImageAspects_LIBRAW_IMAGE_ASPECT_UNKNOWN: LibRawImageAspects = 0;
pub const LibRawImageAspects_LIBRAW_IMAGE_ASPECT_OTHER: LibRawImageAspects = 1;
pub const LibRawImageAspects_LIBRAW_IMAGE_ASPECT_MINIMAL_REAL_ASPECT_VALUE: LibRawImageAspects = 99;
pub const LibRawImageAspects_LIBRAW_IMAGE_ASPECT_MAXIMAL_REAL_ASPECT_VALUE: LibRawImageAspects =
    10000;
pub const LibRawImageAspects_LIBRAW_IMAGE_ASPECT_3to2: LibRawImageAspects = 1500;
pub const LibRawImageAspects_LIBRAW_IMAGE_ASPECT_1to1: LibRawImageAspects = 1000;
pub const LibRawImageAspects_LIBRAW_IMAGE_ASPECT_4to3: LibRawImageAspects = 1333;
pub const LibRawImageAspects_LIBRAW_IMAGE_ASPECT_16to9: LibRawImageAspects = 1777;
pub const LibRawImageAspects_LIBRAW_IMAGE_ASPECT_5to4: LibRawImageAspects = 1250;
pub const LibRawImageAspects_LIBRAW_IMAGE_ASPECT_7to6: LibRawImageAspects = 1166;
pub const LibRawImageAspects_LIBRAW_IMAGE_ASPECT_6to5: LibRawImageAspects = 1200;
pub const LibRawImageAspects_LIBRAW_IMAGE_ASPECT_7to5: LibRawImageAspects = 1400;
pub type LibRawImageAspects = ::std::os::raw::c_uint;
pub const LibRaw_lens_focal_types_LIBRAW_FT_UNDEFINED: LibRaw_lens_focal_types = 0;
pub const LibRaw_lens_focal_types_LIBRAW_FT_PRIME_LENS: LibRaw_lens_focal_types = 1;
pub const LibRaw_lens_focal_types_LIBRAW_FT_ZOOM_LENS: LibRaw_lens_focal_types = 2;
pub const LibRaw_lens_focal_types_LIBRAW_FT_ZOOM_LENS_CONSTANT_APERTURE: LibRaw_lens_focal_types =
    3;
pub const LibRaw_lens_focal_types_LIBRAW_FT_ZOOM_LENS_VARIABLE_APERTURE: LibRaw_lens_focal_types =
    4;
pub type LibRaw_lens_focal_types = ::std::os::raw::c_uint;
pub const LibRaw_Canon_RecordModes_LIBRAW_Canon_RecordMode_UNDEFINED: LibRaw_Canon_RecordModes = 0;
pub const LibRaw_Canon_RecordModes_LIBRAW_Canon_RecordMode_JPEG: LibRaw_Canon_RecordModes = 1;
pub const LibRaw_Canon_RecordModes_LIBRAW_Canon_RecordMode_CRW_THM: LibRaw_Canon_RecordModes = 2;
pub const LibRaw_Canon_RecordModes_LIBRAW_Canon_RecordMode_AVI_THM: LibRaw_Canon_RecordModes = 3;
pub const LibRaw_Canon_RecordModes_LIBRAW_Canon_RecordMode_TIF: LibRaw_Canon_RecordModes = 4;
pub const LibRaw_Canon_RecordModes_LIBRAW_Canon_RecordMode_TIF_JPEG: LibRaw_Canon_RecordModes = 5;
pub const LibRaw_Canon_RecordModes_LIBRAW_Canon_RecordMode_CR2: LibRaw_Canon_RecordModes = 6;
pub const LibRaw_Canon_RecordModes_LIBRAW_Canon_RecordMode_CR2_JPEG: LibRaw_Canon_RecordModes = 7;
pub const LibRaw_Canon_RecordModes_LIBRAW_Canon_RecordMode_UNKNOWN: LibRaw_Canon_RecordModes = 8;
pub const LibRaw_Canon_RecordModes_LIBRAW_Canon_RecordMode_MOV: LibRaw_Canon_RecordModes = 9;
pub const LibRaw_Canon_RecordModes_LIBRAW_Canon_RecordMode_MP4: LibRaw_Canon_RecordModes = 10;
pub const LibRaw_Canon_RecordModes_LIBRAW_Canon_RecordMode_CRM: LibRaw_Canon_RecordModes = 11;
pub const LibRaw_Canon_RecordModes_LIBRAW_Canon_RecordMode_CR3: LibRaw_Canon_RecordModes = 12;
pub const LibRaw_Canon_RecordModes_LIBRAW_Canon_RecordMode_CR3_JPEG: LibRaw_Canon_RecordModes = 13;
pub const LibRaw_Canon_RecordModes_LIBRAW_Canon_RecordMode_HEIF: LibRaw_Canon_RecordModes = 14;
pub const LibRaw_Canon_RecordModes_LIBRAW_Canon_RecordMode_CR3_HEIF: LibRaw_Canon_RecordModes = 15;
pub const LibRaw_Canon_RecordModes_LIBRAW_Canon_RecordMode_TheLastOne: LibRaw_Canon_RecordModes =
    16;
pub type LibRaw_Canon_RecordModes = ::std::os::raw::c_uint;
pub const LibRaw_minolta_storagemethods_LIBRAW_MINOLTA_UNPACKED: LibRaw_minolta_storagemethods = 82;
pub const LibRaw_minolta_storagemethods_LIBRAW_MINOLTA_PACKED: LibRaw_minolta_storagemethods = 89;
pub type LibRaw_minolta_storagemethods = ::std::os::raw::c_uint;
pub const LibRaw_minolta_bayerpatterns_LIBRAW_MINOLTA_RGGB: LibRaw_minolta_bayerpatterns = 1;
pub const LibRaw_minolta_bayerpatterns_LIBRAW_MINOLTA_G2BRG1: LibRaw_minolta_bayerpatterns = 4;
pub type LibRaw_minolta_bayerpatterns = ::std::os::raw::c_uint;
pub const LibRaw_sony_cameratypes_LIBRAW_SONY_DSC: LibRaw_sony_cameratypes = 1;
pub const LibRaw_sony_cameratypes_LIBRAW_SONY_DSLR: LibRaw_sony_cameratypes = 2;
pub const LibRaw_sony_cameratypes_LIBRAW_SONY_NEX: LibRaw_sony_cameratypes = 3;
pub const LibRaw_sony_cameratypes_LIBRAW_SONY_SLT: LibRaw_sony_cameratypes = 4;
pub const LibRaw_sony_cameratypes_LIBRAW_SONY_ILCE: LibRaw_sony_cameratypes = 5;
pub const LibRaw_sony_cameratypes_LIBRAW_SONY_ILCA: LibRaw_sony_cameratypes = 6;
pub const LibRaw_sony_cameratypes_LIBRAW_SONY_CameraType_UNKNOWN: LibRaw_sony_cameratypes = 65535;
pub type LibRaw_sony_cameratypes = ::std::os::raw::c_uint;
pub const LibRaw_Sony_0x2010_Type_LIBRAW_SONY_Tag2010None: LibRaw_Sony_0x2010_Type = 0;
pub const LibRaw_Sony_0x2010_Type_LIBRAW_SONY_Tag2010a: LibRaw_Sony_0x2010_Type = 1;
pub const LibRaw_Sony_0x2010_Type_LIBRAW_SONY_Tag2010b: LibRaw_Sony_0x2010_Type = 2;
pub const LibRaw_Sony_0x2010_Type_LIBRAW_SONY_Tag2010c: LibRaw_Sony_0x2010_Type = 3;
pub const LibRaw_Sony_0x2010_Type_LIBRAW_SONY_Tag2010d: LibRaw_Sony_0x2010_Type = 4;
pub const LibRaw_Sony_0x2010_Type_LIBRAW_SONY_Tag2010e: LibRaw_Sony_0x2010_Type = 5;
pub const LibRaw_Sony_0x2010_Type_LIBRAW_SONY_Tag2010f: LibRaw_Sony_0x2010_Type = 6;
pub const LibRaw_Sony_0x2010_Type_LIBRAW_SONY_Tag2010g: LibRaw_Sony_0x2010_Type = 7;
pub const LibRaw_Sony_0x2010_Type_LIBRAW_SONY_Tag2010h: LibRaw_Sony_0x2010_Type = 8;
pub const LibRaw_Sony_0x2010_Type_LIBRAW_SONY_Tag2010i: LibRaw_Sony_0x2010_Type = 9;
pub type LibRaw_Sony_0x2010_Type = ::std::os::raw::c_uint;
pub const LibRaw_Sony_0x9050_Type_LIBRAW_SONY_Tag9050None: LibRaw_Sony_0x9050_Type = 0;
pub const LibRaw_Sony_0x9050_Type_LIBRAW_SONY_Tag9050a: LibRaw_Sony_0x9050_Type = 1;
pub const LibRaw_Sony_0x9050_Type_LIBRAW_SONY_Tag9050b: LibRaw_Sony_0x9050_Type = 2;
pub const LibRaw_Sony_0x9050_Type_LIBRAW_SONY_Tag9050c: LibRaw_Sony_0x9050_Type = 3;
pub type LibRaw_Sony_0x9050_Type = ::std::os::raw::c_uint;
pub const LIBRAW_SONY_FOCUSMODEmodes_LIBRAW_SONY_FOCUSMODE_MF: LIBRAW_SONY_FOCUSMODEmodes = 0;
pub const LIBRAW_SONY_FOCUSMODEmodes_LIBRAW_SONY_FOCUSMODE_AF_S: LIBRAW_SONY_FOCUSMODEmodes = 2;
pub const LIBRAW_SONY_FOCUSMODEmodes_LIBRAW_SONY_FOCUSMODE_AF_C: LIBRAW_SONY_FOCUSMODEmodes = 3;
pub const LIBRAW_SONY_FOCUSMODEmodes_LIBRAW_SONY_FOCUSMODE_AF_A: LIBRAW_SONY_FOCUSMODEmodes = 4;
pub const LIBRAW_SONY_FOCUSMODEmodes_LIBRAW_SONY_FOCUSMODE_DMF: LIBRAW_SONY_FOCUSMODEmodes = 6;
pub const LIBRAW_SONY_FOCUSMODEmodes_LIBRAW_SONY_FOCUSMODE_AF_D: LIBRAW_SONY_FOCUSMODEmodes = 7;
pub const LIBRAW_SONY_FOCUSMODEmodes_LIBRAW_SONY_FOCUSMODE_AF: LIBRAW_SONY_FOCUSMODEmodes = 101;
pub const LIBRAW_SONY_FOCUSMODEmodes_LIBRAW_SONY_FOCUSMODE_PERMANENT_AF:
    LIBRAW_SONY_FOCUSMODEmodes = 104;
pub const LIBRAW_SONY_FOCUSMODEmodes_LIBRAW_SONY_FOCUSMODE_SEMI_MF: LIBRAW_SONY_FOCUSMODEmodes =
    105;
pub const LIBRAW_SONY_FOCUSMODEmodes_LIBRAW_SONY_FOCUSMODE_UNKNOWN: LIBRAW_SONY_FOCUSMODEmodes = -1;
pub type LIBRAW_SONY_FOCUSMODEmodes = ::std::os::raw::c_int;
pub const LibRaw_KodakSensors_LIBRAW_Kodak_UnknownSensor: LibRaw_KodakSensors = 0;
pub const LibRaw_KodakSensors_LIBRAW_Kodak_M1: LibRaw_KodakSensors = 1;
pub const LibRaw_KodakSensors_LIBRAW_Kodak_M15: LibRaw_KodakSensors = 2;
pub const LibRaw_KodakSensors_LIBRAW_Kodak_M16: LibRaw_KodakSensors = 3;
pub const LibRaw_KodakSensors_LIBRAW_Kodak_M17: LibRaw_KodakSensors = 4;
pub const LibRaw_KodakSensors_LIBRAW_Kodak_M2: LibRaw_KodakSensors = 5;
pub const LibRaw_KodakSensors_LIBRAW_Kodak_M23: LibRaw_KodakSensors = 6;
pub const LibRaw_KodakSensors_LIBRAW_Kodak_M24: LibRaw_KodakSensors = 7;
pub const LibRaw_KodakSensors_LIBRAW_Kodak_M3: LibRaw_KodakSensors = 8;
pub const LibRaw_KodakSensors_LIBRAW_Kodak_M5: LibRaw_KodakSensors = 9;
pub const LibRaw_KodakSensors_LIBRAW_Kodak_M6: LibRaw_KodakSensors = 10;
pub const LibRaw_KodakSensors_LIBRAW_Kodak_C14: LibRaw_KodakSensors = 11;
pub const LibRaw_KodakSensors_LIBRAW_Kodak_X14: LibRaw_KodakSensors = 12;
pub const LibRaw_KodakSensors_LIBRAW_Kodak_M11: LibRaw_KodakSensors = 13;
pub type LibRaw_KodakSensors = ::std::os::raw::c_uint;
pub const LibRaw_HasselbladFormatCodes_LIBRAW_HF_Unknown: LibRaw_HasselbladFormatCodes = 0;
pub const LibRaw_HasselbladFormatCodes_LIBRAW_HF_3FR: LibRaw_HasselbladFormatCodes = 1;
pub const LibRaw_HasselbladFormatCodes_LIBRAW_HF_FFF: LibRaw_HasselbladFormatCodes = 2;
pub const LibRaw_HasselbladFormatCodes_LIBRAW_HF_Imacon: LibRaw_HasselbladFormatCodes = 3;
pub const LibRaw_HasselbladFormatCodes_LIBRAW_HF_HasselbladDNG: LibRaw_HasselbladFormatCodes = 4;
pub const LibRaw_HasselbladFormatCodes_LIBRAW_HF_AdobeDNG: LibRaw_HasselbladFormatCodes = 5;
pub const LibRaw_HasselbladFormatCodes_LIBRAW_HF_AdobeDNG_fromPhocusDNG:
    LibRaw_HasselbladFormatCodes = 6;
pub type LibRaw_HasselbladFormatCodes = ::std::os::raw::c_uint;
pub const LibRaw_rawspecial_t_LIBRAW_RAWSPECIAL_SONYARW2_NONE: LibRaw_rawspecial_t = 0;
pub const LibRaw_rawspecial_t_LIBRAW_RAWSPECIAL_SONYARW2_BASEONLY: LibRaw_rawspecial_t = 1;
pub const LibRaw_rawspecial_t_LIBRAW_RAWSPECIAL_SONYARW2_DELTAONLY: LibRaw_rawspecial_t = 2;
pub const LibRaw_rawspecial_t_LIBRAW_RAWSPECIAL_SONYARW2_DELTAZEROBASE: LibRaw_rawspecial_t = 4;
pub const LibRaw_rawspecial_t_LIBRAW_RAWSPECIAL_SONYARW2_DELTATOVALUE: LibRaw_rawspecial_t = 8;
pub const LibRaw_rawspecial_t_LIBRAW_RAWSPECIAL_SONYARW2_ALLFLAGS: LibRaw_rawspecial_t = 15;
pub const LibRaw_rawspecial_t_LIBRAW_RAWSPECIAL_NODP2Q_INTERPOLATERG: LibRaw_rawspecial_t = 16;
pub const LibRaw_rawspecial_t_LIBRAW_RAWSPECIAL_NODP2Q_INTERPOLATEAF: LibRaw_rawspecial_t = 32;
pub const LibRaw_rawspecial_t_LIBRAW_RAWSPECIAL_SRAW_NO_RGB: LibRaw_rawspecial_t = 64;
pub const LibRaw_rawspecial_t_LIBRAW_RAWSPECIAL_SRAW_NO_INTERPOLATE: LibRaw_rawspecial_t = 128;
pub type LibRaw_rawspecial_t = ::std::os::raw::c_uint;
pub const LibRaw_rawspeed_bits_t_LIBRAW_RAWSPEEDV1_USE: LibRaw_rawspeed_bits_t = 1;
pub const LibRaw_rawspeed_bits_t_LIBRAW_RAWSPEEDV1_FAILONUNKNOWN: LibRaw_rawspeed_bits_t = 2;
pub const LibRaw_rawspeed_bits_t_LIBRAW_RAWSPEEDV1_IGNOREERRORS: LibRaw_rawspeed_bits_t = 4;
pub const LibRaw_rawspeed_bits_t_LIBRAW_RAWSPEEDV3_USE: LibRaw_rawspeed_bits_t = 256;
pub const LibRaw_rawspeed_bits_t_LIBRAW_RAWSPEEDV3_FAILONUNKNOWN: LibRaw_rawspeed_bits_t = 512;
pub const LibRaw_rawspeed_bits_t_LIBRAW_RAWSPEEDV3_IGNOREERRORS: LibRaw_rawspeed_bits_t = 1024;
pub type LibRaw_rawspeed_bits_t = ::std::os::raw::c_uint;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_PENTAX_PS_ALLFRAMES:
    LibRaw_processing_options = 1;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_CONVERTFLOAT_TO_INT:
    LibRaw_processing_options = 2;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_ARQ_SKIP_CHANNEL_SWAP:
    LibRaw_processing_options = 4;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_NO_ROTATE_FOR_KODAK_THUMBNAILS:
    LibRaw_processing_options = 8;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_USE_PPM16_THUMBS: LibRaw_processing_options =
    32;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_DONT_CHECK_DNG_ILLUMINANT:
    LibRaw_processing_options = 64;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_DNGSDK_ZEROCOPY: LibRaw_processing_options =
    128;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_ZEROFILTERS_FOR_MONOCHROMETIFFS:
    LibRaw_processing_options = 256;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_DNG_ADD_ENHANCED: LibRaw_processing_options =
    512;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_DNG_ADD_PREVIEWS: LibRaw_processing_options =
    1024;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_DNG_PREFER_LARGEST_IMAGE:
    LibRaw_processing_options = 2048;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_DNG_STAGE2: LibRaw_processing_options = 4096;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_DNG_STAGE3: LibRaw_processing_options = 8192;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_DNG_ALLOWSIZECHANGE:
    LibRaw_processing_options = 16384;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_DNG_DISABLEWBADJUST:
    LibRaw_processing_options = 32768;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_PROVIDE_NONSTANDARD_WB:
    LibRaw_processing_options = 65536;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_CAMERAWB_FALLBACK_TO_DAYLIGHT:
    LibRaw_processing_options = 131072;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_CHECK_THUMBNAILS_KNOWN_VENDORS:
    LibRaw_processing_options = 262144;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_CHECK_THUMBNAILS_ALL_VENDORS:
    LibRaw_processing_options = 524288;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_DNG_STAGE2_IFPRESENT:
    LibRaw_processing_options = 1048576;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_DNG_STAGE3_IFPRESENT:
    LibRaw_processing_options = 2097152;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_DNG_ADD_MASKS: LibRaw_processing_options =
    4194304;
pub type LibRaw_processing_options = ::std::os::raw::c_uint;
pub const LibRaw_decoder_flags_LIBRAW_DECODER_HASCURVE: LibRaw_decoder_flags = 16;
pub const LibRaw_decoder_flags_LIBRAW_DECODER_SONYARW2: LibRaw_decoder_flags = 32;
pub const LibRaw_decoder_flags_LIBRAW_DECODER_TRYRAWSPEED: LibRaw_decoder_flags = 64;
pub const LibRaw_decoder_flags_LIBRAW_DECODER_OWNALLOC: LibRaw_decoder_flags = 128;
pub const LibRaw_decoder_flags_LIBRAW_DECODER_FIXEDMAXC: LibRaw_decoder_flags = 256;
pub const LibRaw_decoder_flags_LIBRAW_DECODER_ADOBECOPYPIXEL: LibRaw_decoder_flags = 512;
pub const LibRaw_decoder_flags_LIBRAW_DECODER_LEGACY_WITH_MARGINS: LibRaw_decoder_flags = 1024;
pub const LibRaw_decoder_flags_LIBRAW_DECODER_3CHANNEL: LibRaw_decoder_flags = 2048;
pub const LibRaw_decoder_flags_LIBRAW_DECODER_SINAR4SHOT: LibRaw_decoder_flags = 2048;
pub const LibRaw_decoder_flags_LIBRAW_DECODER_FLATDATA: LibRaw_decoder_flags = 4096;
pub const LibRaw_decoder_flags_LIBRAW_DECODER_FLAT_BG2_SWAPPED: LibRaw_decoder_flags = 8192;
pub const LibRaw_decoder_flags_LIBRAW_DECODER_UNSUPPORTED_FORMAT: LibRaw_decoder_flags = 16384;
pub const LibRaw_decoder_flags_LIBRAW_DECODER_NOTSET: LibRaw_decoder_flags = 32768;
pub const LibRaw_decoder_flags_LIBRAW_DECODER_TRYRAWSPEED3: LibRaw_decoder_flags = 65536;
pub type LibRaw_decoder_flags = ::std::os::raw::c_uint;
pub const LibRaw_constructor_flags_LIBRAW_OPTIONS_NONE: LibRaw_constructor_flags = 0;
pub const LibRaw_constructor_flags_LIBRAW_OPTIONS_NO_DATAERR_CALLBACK: LibRaw_constructor_flags = 2;
pub const LibRaw_constructor_flags_LIBRAW_OPIONS_NO_DATAERR_CALLBACK: LibRaw_constructor_flags = 2;
pub type LibRaw_constructor_flags = ::std::os::raw::c_uint;
pub const LibRaw_warnings_LIBRAW_WARN_NONE: LibRaw_warnings = 0;
pub const LibRaw_warnings_LIBRAW_WARN_BAD_CAMERA_WB: LibRaw_warnings = 4;
pub const LibRaw_warnings_LIBRAW_WARN_NO_METADATA: LibRaw_warnings = 8;
pub const LibRaw_warnings_LIBRAW_WARN_NO_JPEGLIB: LibRaw_warnings = 16;
pub const LibRaw_warnings_LIBRAW_WARN_NO_EMBEDDED_PROFILE: LibRaw_warnings = 32;
pub const LibRaw_warnings_LIBRAW_WARN_NO_INPUT_PROFILE: LibRaw_warnings = 64;
pub const LibRaw_warnings_LIBRAW_WARN_BAD_OUTPUT_PROFILE: LibRaw_warnings = 128;
pub const LibRaw_warnings_LIBRAW_WARN_NO_BADPIXELMAP: LibRaw_warnings = 256;
pub const LibRaw_warnings_LIBRAW_WARN_BAD_DARKFRAME_FILE: LibRaw_warnings = 512;
pub const LibRaw_warnings_LIBRAW_WARN_BAD_DARKFRAME_DIM: LibRaw_warnings = 1024;
pub const LibRaw_warnings_LIBRAW_WARN_RAWSPEED_PROBLEM: LibRaw_warnings = 4096;
pub const LibRaw_warnings_LIBRAW_WARN_RAWSPEED_UNSUPPORTED: LibRaw_warnings = 8192;
pub const LibRaw_warnings_LIBRAW_WARN_RAWSPEED_PROCESSED: LibRaw_warnings = 16384;
pub const LibRaw_warnings_LIBRAW_WARN_FALLBACK_TO_AHD: LibRaw_warnings = 32768;
pub const LibRaw_warnings_LIBRAW_WARN_PARSEFUJI_PROCESSED: LibRaw_warnings = 65536;
pub const LibRaw_warnings_LIBRAW_WARN_DNGSDK_PROCESSED: LibRaw_warnings = 131072;
pub const LibRaw_warnings_LIBRAW_WARN_DNG_IMAGES_REORDERED: LibRaw_warnings = 262144;
pub const LibRaw_warnings_LIBRAW_WARN_DNG_STAGE2_APPLIED: LibRaw_warnings = 524288;
pub const LibRaw_warnings_LIBRAW_WARN_DNG_STAGE3_APPLIED: LibRaw_warnings = 1048576;
pub const LibRaw_warnings_LIBRAW_WARN_RAWSPEED3_PROBLEM: LibRaw_warnings = 2097152;
pub const LibRaw_warnings_LIBRAW_WARN_RAWSPEED3_UNSUPPORTED: LibRaw_warnings = 4194304;
pub const LibRaw_warnings_LIBRAW_WARN_RAWSPEED3_PROCESSED: LibRaw_warnings = 8388608;
pub const LibRaw_warnings_LIBRAW_WARN_RAWSPEED3_NOTLISTED: LibRaw_warnings = 16777216;
pub type LibRaw_warnings = ::std::os::raw::c_uint;
pub const LibRaw_exceptions_LIBRAW_EXCEPTION_NONE: LibRaw_exceptions = 0;
pub const LibRaw_exceptions_LIBRAW_EXCEPTION_ALLOC: LibRaw_exceptions = 1;
pub const LibRaw_exceptions_LIBRAW_EXCEPTION_DECODE_RAW: LibRaw_exceptions = 2;
pub const LibRaw_exceptions_LIBRAW_EXCEPTION_DECODE_JPEG: LibRaw_exceptions = 3;
pub const LibRaw_exceptions_LIBRAW_EXCEPTION_IO_EOF: LibRaw_exceptions = 4;
pub const LibRaw_exceptions_LIBRAW_EXCEPTION_IO_CORRUPT: LibRaw_exceptions = 5;
pub const LibRaw_exceptions_LIBRAW_EXCEPTION_CANCELLED_BY_CALLBACK: LibRaw_exceptions = 6;
pub const LibRaw_exceptions_LIBRAW_EXCEPTION_BAD_CROP: LibRaw_exceptions = 7;
pub const LibRaw_exceptions_LIBRAW_EXCEPTION_IO_BADFILE: LibRaw_exceptions = 8;
pub const LibRaw_exceptions_LIBRAW_EXCEPTION_DECODE_JPEG2000: LibRaw_exceptions = 9;
pub const LibRaw_exceptions_LIBRAW_EXCEPTION_TOOBIG: LibRaw_exceptions = 10;
pub const LibRaw_exceptions_LIBRAW_EXCEPTION_MEMPOOL: LibRaw_exceptions = 11;
pub const LibRaw_exceptions_LIBRAW_EXCEPTION_UNSUPPORTED_FORMAT: LibRaw_exceptions = 12;
pub type LibRaw_exceptions = ::std::os::raw::c_uint;
pub const LibRaw_progress_LIBRAW_PROGRESS_START: LibRaw_progress = 0;
pub const LibRaw_progress_LIBRAW_PROGRESS_OPEN: LibRaw_progress = 1;
pub const LibRaw_progress_LIBRAW_PROGRESS_IDENTIFY: LibRaw_progress = 2;
pub const LibRaw_progress_LIBRAW_PROGRESS_SIZE_ADJUST: LibRaw_progress = 4;
pub const LibRaw_progress_LIBRAW_PROGRESS_LOAD_RAW: LibRaw_progress = 8;
pub const LibRaw_progress_LIBRAW_PROGRESS_RAW2_IMAGE: LibRaw_progress = 16;
pub const LibRaw_progress_LIBRAW_PROGRESS_REMOVE_ZEROES: LibRaw_progress = 32;
pub const LibRaw_progress_LIBRAW_PROGRESS_BAD_PIXELS: LibRaw_progress = 64;
pub const LibRaw_progress_LIBRAW_PROGRESS_DARK_FRAME: LibRaw_progress = 128;
pub const LibRaw_progress_LIBRAW_PROGRESS_FOVEON_INTERPOLATE: LibRaw_progress = 256;
pub const LibRaw_progress_LIBRAW_PROGRESS_SCALE_COLORS: LibRaw_progress = 512;
pub const LibRaw_progress_LIBRAW_PROGRESS_PRE_INTERPOLATE: LibRaw_progress = 1024;
pub const LibRaw_progress_LIBRAW_PROGRESS_INTERPOLATE: LibRaw_progress = 2048;
pub const LibRaw_progress_LIBRAW_PROGRESS_MIX_GREEN: LibRaw_progress = 4096;
pub const LibRaw_progress_LIBRAW_PROGRESS_MEDIAN_FILTER: LibRaw_progress = 8192;
pub const LibRaw_progress_LIBRAW_PROGRESS_HIGHLIGHTS: LibRaw_progress = 16384;
pub const LibRaw_progress_LIBRAW_PROGRESS_FUJI_ROTATE: LibRaw_progress = 32768;
pub const LibRaw_progress_LIBRAW_PROGRESS_FLIP: LibRaw_progress = 65536;
pub const LibRaw_progress_LIBRAW_PROGRESS_APPLY_PROFILE: LibRaw_progress = 131072;
pub const LibRaw_progress_LIBRAW_PROGRESS_CONVERT_RGB: LibRaw_progress = 262144;
pub const LibRaw_progress_LIBRAW_PROGRESS_STRETCH: LibRaw_progress = 524288;
pub const LibRaw_progress_LIBRAW_PROGRESS_STAGE20: LibRaw_progress = 1048576;
pub const LibRaw_progress_LIBRAW_PROGRESS_STAGE21: LibRaw_progress = 2097152;
pub const LibRaw_progress_LIBRAW_PROGRESS_STAGE22: LibRaw_progress = 4194304;
pub const LibRaw_progress_LIBRAW_PROGRESS_STAGE23: LibRaw_progress = 8388608;
pub const LibRaw_progress_LIBRAW_PROGRESS_STAGE24: LibRaw_progress = 16777216;
pub const LibRaw_progress_LIBRAW_PROGRESS_STAGE25: LibRaw_progress = 33554432;
pub const LibRaw_progress_LIBRAW_PROGRESS_STAGE26: LibRaw_progress = 67108864;
pub const LibRaw_progress_LIBRAW_PROGRESS_STAGE27: LibRaw_progress = 134217728;
pub const LibRaw_progress_LIBRAW_PROGRESS_THUMB_LOAD: LibRaw_progress = 268435456;
pub const LibRaw_progress_LIBRAW_PROGRESS_TRESERVED1: LibRaw_progress = 536870912;
pub const LibRaw_progress_LIBRAW_PROGRESS_TRESERVED2: LibRaw_progress = 1073741824;
pub type LibRaw_progress = ::std::os::raw::c_uint;
pub const LibRaw_errors_LIBRAW_SUCCESS: LibRaw_errors = 0;
pub const LibRaw_errors_LIBRAW_UNSPECIFIED_ERROR: LibRaw_errors = -1;
pub const LibRaw_errors_LIBRAW_FILE_UNSUPPORTED: LibRaw_errors = -2;
pub const LibRaw_errors_LIBRAW_REQUEST_FOR_NONEXISTENT_IMAGE: LibRaw_errors = -3;
pub const LibRaw_errors_LIBRAW_OUT_OF_ORDER_CALL: LibRaw_errors = -4;
pub const LibRaw_errors_LIBRAW_NO_THUMBNAIL: LibRaw_errors = -5;
pub const LibRaw_errors_LIBRAW_UNSUPPORTED_THUMBNAIL: LibRaw_errors = -6;
pub const LibRaw_errors_LIBRAW_INPUT_CLOSED: LibRaw_errors = -7;
pub const LibRaw_errors_LIBRAW_NOT_IMPLEMENTED: LibRaw_errors = -8;
pub const LibRaw_errors_LIBRAW_UNSUFFICIENT_MEMORY: LibRaw_errors = -100007;
pub const LibRaw_errors_LIBRAW_DATA_ERROR: LibRaw_errors = -100008;
pub const LibRaw_errors_LIBRAW_IO_ERROR: LibRaw_errors = -100009;
pub const LibRaw_errors_LIBRAW_CANCELLED_BY_CALLBACK: LibRaw_errors = -100010;
pub const LibRaw_errors_LIBRAW_BAD_CROP: LibRaw_errors = -100011;
pub const LibRaw_errors_LIBRAW_TOO_BIG: LibRaw_errors = -100012;
pub const LibRaw_errors_LIBRAW_MEMPOOL_OVERFLOW: LibRaw_errors = -100013;
pub type LibRaw_errors = ::std::os::raw::c_int;
pub const LibRaw_thumbnail_formats_LIBRAW_THUMBNAIL_UNKNOWN: LibRaw_thumbnail_formats = 0;
pub const LibRaw_thumbnail_formats_LIBRAW_THUMBNAIL_JPEG: LibRaw_thumbnail_formats = 1;
pub const LibRaw_thumbnail_formats_LIBRAW_THUMBNAIL_BITMAP: LibRaw_thumbnail_formats = 2;
pub const LibRaw_thumbnail_formats_LIBRAW_THUMBNAIL_BITMAP16: LibRaw_thumbnail_formats = 3;
pub const LibRaw_thumbnail_formats_LIBRAW_THUMBNAIL_LAYER: LibRaw_thumbnail_formats = 4;
pub const LibRaw_thumbnail_formats_LIBRAW_THUMBNAIL_ROLLEI: LibRaw_thumbnail_formats = 5;
pub const LibRaw_thumbnail_formats_LIBRAW_THUMBNAIL_H265: LibRaw_thumbnail_formats = 6;
pub type LibRaw_thumbnail_formats = ::std::os::raw::c_uint;
pub const LibRaw_image_formats_LIBRAW_IMAGE_JPEG: LibRaw_image_formats = 1;
pub const LibRaw_image_formats_LIBRAW_IMAGE_BITMAP: LibRaw_image_formats = 2;
pub type LibRaw_image_formats = ::std::os::raw::c_uint;
pub type INT64 = ::std::os::raw::c_longlong;
pub type uchar = ::std::os::raw::c_uchar;
pub type ushort = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_decoder_info_t {
    pub decoder_name: *const ::std::os::raw::c_char,
    pub decoder_flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_libraw_decoder_info_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_decoder_info_t>(),
        16usize,
        concat!("Size of: ", stringify!(libraw_decoder_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_decoder_info_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_decoder_info_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_decoder_info_t>())).decoder_name as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_decoder_info_t),
            "::",
            stringify!(decoder_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_decoder_info_t>())).decoder_flags as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_decoder_info_t),
            "::",
            stringify!(decoder_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_internal_output_params_t {
    pub mix_green: ::std::os::raw::c_uint,
    pub raw_color: ::std::os::raw::c_uint,
    pub zero_is_bad: ::std::os::raw::c_uint,
    pub shrink: ushort,
    pub fuji_width: ushort,
}
#[test]
fn bindgen_test_layout_libraw_internal_output_params_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_internal_output_params_t>(),
        16usize,
        concat!("Size of: ", stringify!(libraw_internal_output_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_internal_output_params_t>(),
        4usize,
        concat!("Alignment of ", stringify!(libraw_internal_output_params_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_internal_output_params_t>())).mix_green as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_internal_output_params_t),
            "::",
            stringify!(mix_green)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_internal_output_params_t>())).raw_color as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_internal_output_params_t),
            "::",
            stringify!(raw_color)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_internal_output_params_t>())).zero_is_bad as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_internal_output_params_t),
            "::",
            stringify!(zero_is_bad)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_internal_output_params_t>())).shrink as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_internal_output_params_t),
            "::",
            stringify!(shrink)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_internal_output_params_t>())).fuji_width as *const _
                as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_internal_output_params_t),
            "::",
            stringify!(fuji_width)
        )
    );
}
pub type exif_parser_callback = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        tag: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
        ord: ::std::os::raw::c_uint,
        ifp: *mut ::std::os::raw::c_void,
        base: INT64,
    ),
>;
pub type data_callback = ::std::option::Option<
    unsafe extern "C" fn(
        data: *mut ::std::os::raw::c_void,
        file: *const ::std::os::raw::c_char,
        offset: ::std::os::raw::c_int,
    ),
>;
pub type progress_callback = ::std::option::Option<
    unsafe extern "C" fn(
        data: *mut ::std::os::raw::c_void,
        stage: LibRaw_progress,
        iteration: ::std::os::raw::c_int,
        expected: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type pre_identify_callback = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
pub type post_identify_callback =
    ::std::option::Option<unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void)>;
pub type process_step_callback =
    ::std::option::Option<unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_callbacks_t {
    pub data_cb: data_callback,
    pub datacb_data: *mut ::std::os::raw::c_void,
    pub progress_cb: progress_callback,
    pub progresscb_data: *mut ::std::os::raw::c_void,
    pub exif_cb: exif_parser_callback,
    pub exifparser_data: *mut ::std::os::raw::c_void,
    pub pre_identify_cb: pre_identify_callback,
    pub post_identify_cb: post_identify_callback,
    pub pre_subtractblack_cb: process_step_callback,
    pub pre_scalecolors_cb: process_step_callback,
    pub pre_preinterpolate_cb: process_step_callback,
    pub pre_interpolate_cb: process_step_callback,
    pub interpolate_bayer_cb: process_step_callback,
    pub interpolate_xtrans_cb: process_step_callback,
    pub post_interpolate_cb: process_step_callback,
    pub pre_converttorgb_cb: process_step_callback,
    pub post_converttorgb_cb: process_step_callback,
}
#[test]
fn bindgen_test_layout_libraw_callbacks_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_callbacks_t>(),
        136usize,
        concat!("Size of: ", stringify!(libraw_callbacks_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_callbacks_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_callbacks_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_callbacks_t>())).data_cb as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_callbacks_t),
            "::",
            stringify!(data_cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_callbacks_t>())).datacb_data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_callbacks_t),
            "::",
            stringify!(datacb_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_callbacks_t>())).progress_cb as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_callbacks_t),
            "::",
            stringify!(progress_cb)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_callbacks_t>())).progresscb_data as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_callbacks_t),
            "::",
            stringify!(progresscb_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_callbacks_t>())).exif_cb as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_callbacks_t),
            "::",
            stringify!(exif_cb)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_callbacks_t>())).exifparser_data as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_callbacks_t),
            "::",
            stringify!(exifparser_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_callbacks_t>())).pre_identify_cb as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_callbacks_t),
            "::",
            stringify!(pre_identify_cb)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_callbacks_t>())).post_identify_cb as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_callbacks_t),
            "::",
            stringify!(post_identify_cb)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_callbacks_t>())).pre_subtractblack_cb as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_callbacks_t),
            "::",
            stringify!(pre_subtractblack_cb)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_callbacks_t>())).pre_scalecolors_cb as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_callbacks_t),
            "::",
            stringify!(pre_scalecolors_cb)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_callbacks_t>())).pre_preinterpolate_cb as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_callbacks_t),
            "::",
            stringify!(pre_preinterpolate_cb)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_callbacks_t>())).pre_interpolate_cb as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_callbacks_t),
            "::",
            stringify!(pre_interpolate_cb)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_callbacks_t>())).interpolate_bayer_cb as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_callbacks_t),
            "::",
            stringify!(interpolate_bayer_cb)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_callbacks_t>())).interpolate_xtrans_cb as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_callbacks_t),
            "::",
            stringify!(interpolate_xtrans_cb)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_callbacks_t>())).post_interpolate_cb as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_callbacks_t),
            "::",
            stringify!(post_interpolate_cb)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_callbacks_t>())).pre_converttorgb_cb as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_callbacks_t),
            "::",
            stringify!(pre_converttorgb_cb)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_callbacks_t>())).post_converttorgb_cb as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_callbacks_t),
            "::",
            stringify!(post_converttorgb_cb)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_processed_image_t {
    pub type_: LibRaw_image_formats,
    pub height: ushort,
    pub width: ushort,
    pub colors: ushort,
    pub bits: ushort,
    pub data_size: ::std::os::raw::c_uint,
    pub data: [::std::os::raw::c_uchar; 1usize],
}
#[test]
fn bindgen_test_layout_libraw_processed_image_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_processed_image_t>(),
        20usize,
        concat!("Size of: ", stringify!(libraw_processed_image_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_processed_image_t>(),
        4usize,
        concat!("Alignment of ", stringify!(libraw_processed_image_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_processed_image_t>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_processed_image_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_processed_image_t>())).height as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_processed_image_t),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_processed_image_t>())).width as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_processed_image_t),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_processed_image_t>())).colors as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_processed_image_t),
            "::",
            stringify!(colors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_processed_image_t>())).bits as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_processed_image_t),
            "::",
            stringify!(bits)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_processed_image_t>())).data_size as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_processed_image_t),
            "::",
            stringify!(data_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_processed_image_t>())).data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_processed_image_t),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_iparams_t {
    pub guard: [::std::os::raw::c_char; 4usize],
    pub make: [::std::os::raw::c_char; 64usize],
    pub model: [::std::os::raw::c_char; 64usize],
    pub software: [::std::os::raw::c_char; 64usize],
    pub normalized_make: [::std::os::raw::c_char; 64usize],
    pub normalized_model: [::std::os::raw::c_char; 64usize],
    pub maker_index: ::std::os::raw::c_uint,
    pub raw_count: ::std::os::raw::c_uint,
    pub dng_version: ::std::os::raw::c_uint,
    pub is_foveon: ::std::os::raw::c_uint,
    pub colors: ::std::os::raw::c_int,
    pub filters: ::std::os::raw::c_uint,
    pub xtrans: [[::std::os::raw::c_char; 6usize]; 6usize],
    pub xtrans_abs: [[::std::os::raw::c_char; 6usize]; 6usize],
    pub cdesc: [::std::os::raw::c_char; 5usize],
    pub xmplen: ::std::os::raw::c_uint,
    pub xmpdata: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_libraw_iparams_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_iparams_t>(),
        440usize,
        concat!("Size of: ", stringify!(libraw_iparams_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_iparams_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_iparams_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_iparams_t>())).guard as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_iparams_t),
            "::",
            stringify!(guard)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_iparams_t>())).make as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_iparams_t),
            "::",
            stringify!(make)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_iparams_t>())).model as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_iparams_t),
            "::",
            stringify!(model)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_iparams_t>())).software as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_iparams_t),
            "::",
            stringify!(software)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_iparams_t>())).normalized_make as *const _ as usize
        },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_iparams_t),
            "::",
            stringify!(normalized_make)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_iparams_t>())).normalized_model as *const _ as usize
        },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_iparams_t),
            "::",
            stringify!(normalized_model)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_iparams_t>())).maker_index as *const _ as usize },
        324usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_iparams_t),
            "::",
            stringify!(maker_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_iparams_t>())).raw_count as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_iparams_t),
            "::",
            stringify!(raw_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_iparams_t>())).dng_version as *const _ as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_iparams_t),
            "::",
            stringify!(dng_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_iparams_t>())).is_foveon as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_iparams_t),
            "::",
            stringify!(is_foveon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_iparams_t>())).colors as *const _ as usize },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_iparams_t),
            "::",
            stringify!(colors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_iparams_t>())).filters as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_iparams_t),
            "::",
            stringify!(filters)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_iparams_t>())).xtrans as *const _ as usize },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_iparams_t),
            "::",
            stringify!(xtrans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_iparams_t>())).xtrans_abs as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_iparams_t),
            "::",
            stringify!(xtrans_abs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_iparams_t>())).cdesc as *const _ as usize },
        420usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_iparams_t),
            "::",
            stringify!(cdesc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_iparams_t>())).xmplen as *const _ as usize },
        428usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_iparams_t),
            "::",
            stringify!(xmplen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_iparams_t>())).xmpdata as *const _ as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_iparams_t),
            "::",
            stringify!(xmpdata)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_raw_inset_crop_t {
    pub cleft: ushort,
    pub ctop: ushort,
    pub cwidth: ushort,
    pub cheight: ushort,
}
#[test]
fn bindgen_test_layout_libraw_raw_inset_crop_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_raw_inset_crop_t>(),
        8usize,
        concat!("Size of: ", stringify!(libraw_raw_inset_crop_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_raw_inset_crop_t>(),
        2usize,
        concat!("Alignment of ", stringify!(libraw_raw_inset_crop_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_raw_inset_crop_t>())).cleft as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_raw_inset_crop_t),
            "::",
            stringify!(cleft)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_raw_inset_crop_t>())).ctop as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_raw_inset_crop_t),
            "::",
            stringify!(ctop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_raw_inset_crop_t>())).cwidth as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_raw_inset_crop_t),
            "::",
            stringify!(cwidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_raw_inset_crop_t>())).cheight as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_raw_inset_crop_t),
            "::",
            stringify!(cheight)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_image_sizes_t {
    pub raw_height: ushort,
    pub raw_width: ushort,
    pub height: ushort,
    pub width: ushort,
    pub top_margin: ushort,
    pub left_margin: ushort,
    pub iheight: ushort,
    pub iwidth: ushort,
    pub raw_pitch: ::std::os::raw::c_uint,
    pub pixel_aspect: f64,
    pub flip: ::std::os::raw::c_int,
    pub mask: [[::std::os::raw::c_int; 4usize]; 8usize],
    pub raw_aspect: ushort,
    pub raw_inset_crops: [libraw_raw_inset_crop_t; 2usize],
}
#[test]
fn bindgen_test_layout_libraw_image_sizes_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_image_sizes_t>(),
        184usize,
        concat!("Size of: ", stringify!(libraw_image_sizes_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_image_sizes_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_image_sizes_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_image_sizes_t>())).raw_height as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_image_sizes_t),
            "::",
            stringify!(raw_height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_image_sizes_t>())).raw_width as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_image_sizes_t),
            "::",
            stringify!(raw_width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_image_sizes_t>())).height as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_image_sizes_t),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_image_sizes_t>())).width as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_image_sizes_t),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_image_sizes_t>())).top_margin as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_image_sizes_t),
            "::",
            stringify!(top_margin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_image_sizes_t>())).left_margin as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_image_sizes_t),
            "::",
            stringify!(left_margin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_image_sizes_t>())).iheight as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_image_sizes_t),
            "::",
            stringify!(iheight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_image_sizes_t>())).iwidth as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_image_sizes_t),
            "::",
            stringify!(iwidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_image_sizes_t>())).raw_pitch as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_image_sizes_t),
            "::",
            stringify!(raw_pitch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_image_sizes_t>())).pixel_aspect as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_image_sizes_t),
            "::",
            stringify!(pixel_aspect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_image_sizes_t>())).flip as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_image_sizes_t),
            "::",
            stringify!(flip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_image_sizes_t>())).mask as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_image_sizes_t),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_image_sizes_t>())).raw_aspect as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_image_sizes_t),
            "::",
            stringify!(raw_aspect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_image_sizes_t>())).raw_inset_crops as *const _ as usize
        },
        166usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_image_sizes_t),
            "::",
            stringify!(raw_inset_crops)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_area_t {
    pub t: ::std::os::raw::c_short,
    pub l: ::std::os::raw::c_short,
    pub b: ::std::os::raw::c_short,
    pub r: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_libraw_area_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_area_t>(),
        8usize,
        concat!("Size of: ", stringify!(libraw_area_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_area_t>(),
        2usize,
        concat!("Alignment of ", stringify!(libraw_area_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_area_t>())).t as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_area_t),
            "::",
            stringify!(t)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_area_t>())).l as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_area_t),
            "::",
            stringify!(l)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_area_t>())).b as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_area_t),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_area_t>())).r as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_area_t),
            "::",
            stringify!(r)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ph1_t {
    pub format: ::std::os::raw::c_int,
    pub key_off: ::std::os::raw::c_int,
    pub tag_21a: ::std::os::raw::c_int,
    pub t_black: ::std::os::raw::c_int,
    pub split_col: ::std::os::raw::c_int,
    pub black_col: ::std::os::raw::c_int,
    pub split_row: ::std::os::raw::c_int,
    pub black_row: ::std::os::raw::c_int,
    pub tag_210: f32,
}
#[test]
fn bindgen_test_layout_ph1_t() {
    assert_eq!(
        ::std::mem::size_of::<ph1_t>(),
        36usize,
        concat!("Size of: ", stringify!(ph1_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ph1_t>(),
        4usize,
        concat!("Alignment of ", stringify!(ph1_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ph1_t>())).format as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ph1_t),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ph1_t>())).key_off as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ph1_t),
            "::",
            stringify!(key_off)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ph1_t>())).tag_21a as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ph1_t),
            "::",
            stringify!(tag_21a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ph1_t>())).t_black as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ph1_t),
            "::",
            stringify!(t_black)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ph1_t>())).split_col as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ph1_t),
            "::",
            stringify!(split_col)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ph1_t>())).black_col as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ph1_t),
            "::",
            stringify!(black_col)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ph1_t>())).split_row as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ph1_t),
            "::",
            stringify!(split_row)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ph1_t>())).black_row as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ph1_t),
            "::",
            stringify!(black_row)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ph1_t>())).tag_210 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ph1_t),
            "::",
            stringify!(tag_210)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_dng_color_t {
    pub parsedfields: ::std::os::raw::c_uint,
    pub illuminant: ushort,
    pub calibration: [[f32; 4usize]; 4usize],
    pub colormatrix: [[f32; 3usize]; 4usize],
    pub forwardmatrix: [[f32; 4usize]; 3usize],
}
#[test]
fn bindgen_test_layout_libraw_dng_color_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_dng_color_t>(),
        168usize,
        concat!("Size of: ", stringify!(libraw_dng_color_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_dng_color_t>(),
        4usize,
        concat!("Alignment of ", stringify!(libraw_dng_color_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_dng_color_t>())).parsedfields as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_color_t),
            "::",
            stringify!(parsedfields)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_dng_color_t>())).illuminant as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_color_t),
            "::",
            stringify!(illuminant)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_dng_color_t>())).calibration as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_color_t),
            "::",
            stringify!(calibration)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_dng_color_t>())).colormatrix as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_color_t),
            "::",
            stringify!(colormatrix)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_dng_color_t>())).forwardmatrix as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_color_t),
            "::",
            stringify!(forwardmatrix)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_dng_levels_t {
    pub parsedfields: ::std::os::raw::c_uint,
    pub dng_cblack: [::std::os::raw::c_uint; 4104usize],
    pub dng_black: ::std::os::raw::c_uint,
    pub dng_fcblack: [f32; 4104usize],
    pub dng_fblack: f32,
    pub dng_whitelevel: [::std::os::raw::c_uint; 4usize],
    pub default_crop: [ushort; 4usize],
    pub user_crop: [f32; 4usize],
    pub preview_colorspace: ::std::os::raw::c_uint,
    pub analogbalance: [f32; 4usize],
    pub asshotneutral: [f32; 4usize],
    pub baseline_exposure: f32,
    pub LinearResponseLimit: f32,
}
#[test]
fn bindgen_test_layout_libraw_dng_levels_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_dng_levels_t>(),
        32928usize,
        concat!("Size of: ", stringify!(libraw_dng_levels_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_dng_levels_t>(),
        4usize,
        concat!("Alignment of ", stringify!(libraw_dng_levels_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_dng_levels_t>())).parsedfields as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_levels_t),
            "::",
            stringify!(parsedfields)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_dng_levels_t>())).dng_cblack as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_levels_t),
            "::",
            stringify!(dng_cblack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_dng_levels_t>())).dng_black as *const _ as usize },
        16420usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_levels_t),
            "::",
            stringify!(dng_black)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_dng_levels_t>())).dng_fcblack as *const _ as usize },
        16424usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_levels_t),
            "::",
            stringify!(dng_fcblack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_dng_levels_t>())).dng_fblack as *const _ as usize },
        32840usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_levels_t),
            "::",
            stringify!(dng_fblack)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_dng_levels_t>())).dng_whitelevel as *const _ as usize
        },
        32844usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_levels_t),
            "::",
            stringify!(dng_whitelevel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_dng_levels_t>())).default_crop as *const _ as usize
        },
        32860usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_levels_t),
            "::",
            stringify!(default_crop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_dng_levels_t>())).user_crop as *const _ as usize },
        32868usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_levels_t),
            "::",
            stringify!(user_crop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_dng_levels_t>())).preview_colorspace as *const _ as usize
        },
        32884usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_levels_t),
            "::",
            stringify!(preview_colorspace)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_dng_levels_t>())).analogbalance as *const _ as usize
        },
        32888usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_levels_t),
            "::",
            stringify!(analogbalance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_dng_levels_t>())).asshotneutral as *const _ as usize
        },
        32904usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_levels_t),
            "::",
            stringify!(asshotneutral)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_dng_levels_t>())).baseline_exposure as *const _ as usize
        },
        32920usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_levels_t),
            "::",
            stringify!(baseline_exposure)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_dng_levels_t>())).LinearResponseLimit as *const _ as usize
        },
        32924usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dng_levels_t),
            "::",
            stringify!(LinearResponseLimit)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_P1_color_t {
    pub romm_cam: [f32; 9usize],
}
#[test]
fn bindgen_test_layout_libraw_P1_color_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_P1_color_t>(),
        36usize,
        concat!("Size of: ", stringify!(libraw_P1_color_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_P1_color_t>(),
        4usize,
        concat!("Alignment of ", stringify!(libraw_P1_color_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_P1_color_t>())).romm_cam as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_P1_color_t),
            "::",
            stringify!(romm_cam)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_canon_makernotes_t {
    pub ColorDataVer: ::std::os::raw::c_int,
    pub ColorDataSubVer: ::std::os::raw::c_int,
    pub SpecularWhiteLevel: ::std::os::raw::c_int,
    pub NormalWhiteLevel: ::std::os::raw::c_int,
    pub ChannelBlackLevel: [::std::os::raw::c_int; 4usize],
    pub AverageBlackLevel: ::std::os::raw::c_int,
    pub multishot: [::std::os::raw::c_uint; 4usize],
    pub MeteringMode: ::std::os::raw::c_short,
    pub SpotMeteringMode: ::std::os::raw::c_short,
    pub FlashMeteringMode: uchar,
    pub FlashExposureLock: ::std::os::raw::c_short,
    pub ExposureMode: ::std::os::raw::c_short,
    pub AESetting: ::std::os::raw::c_short,
    pub ImageStabilization: ::std::os::raw::c_short,
    pub FlashMode: ::std::os::raw::c_short,
    pub FlashActivity: ::std::os::raw::c_short,
    pub FlashBits: ::std::os::raw::c_short,
    pub ManualFlashOutput: ::std::os::raw::c_short,
    pub FlashOutput: ::std::os::raw::c_short,
    pub FlashGuideNumber: ::std::os::raw::c_short,
    pub ContinuousDrive: ::std::os::raw::c_short,
    pub SensorWidth: ::std::os::raw::c_short,
    pub SensorHeight: ::std::os::raw::c_short,
    pub AFMicroAdjMode: ::std::os::raw::c_int,
    pub AFMicroAdjValue: f32,
    pub MakernotesFlip: ::std::os::raw::c_short,
    pub RecordMode: ::std::os::raw::c_short,
    pub SRAWQuality: ::std::os::raw::c_short,
    pub wbi: ::std::os::raw::c_uint,
    pub RF_lensID: ::std::os::raw::c_short,
    pub AutoLightingOptimizer: ::std::os::raw::c_int,
    pub HighlightTonePriority: ::std::os::raw::c_int,
    pub DefaultCropAbsolute: libraw_area_t,
    pub RecommendedImageArea: libraw_area_t,
    pub LeftOpticalBlack: libraw_area_t,
    pub UpperOpticalBlack: libraw_area_t,
    pub ActiveArea: libraw_area_t,
    pub ISOgain: [::std::os::raw::c_short; 2usize],
}
#[test]
fn bindgen_test_layout_libraw_canon_makernotes_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_canon_makernotes_t>(),
        160usize,
        concat!("Size of: ", stringify!(libraw_canon_makernotes_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_canon_makernotes_t>(),
        4usize,
        concat!("Alignment of ", stringify!(libraw_canon_makernotes_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).ColorDataVer as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(ColorDataVer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).ColorDataSubVer as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(ColorDataSubVer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).SpecularWhiteLevel as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(SpecularWhiteLevel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).NormalWhiteLevel as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(NormalWhiteLevel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).ChannelBlackLevel as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(ChannelBlackLevel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).AverageBlackLevel as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(AverageBlackLevel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).multishot as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(multishot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).MeteringMode as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(MeteringMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).SpotMeteringMode as *const _
                as usize
        },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(SpotMeteringMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).FlashMeteringMode as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(FlashMeteringMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).FlashExposureLock as *const _
                as usize
        },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(FlashExposureLock)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).ExposureMode as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(ExposureMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).AESetting as *const _ as usize
        },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(AESetting)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).ImageStabilization as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(ImageStabilization)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).FlashMode as *const _ as usize
        },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(FlashMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).FlashActivity as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(FlashActivity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).FlashBits as *const _ as usize
        },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(FlashBits)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).ManualFlashOutput as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(ManualFlashOutput)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).FlashOutput as *const _ as usize
        },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(FlashOutput)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).FlashGuideNumber as *const _
                as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(FlashGuideNumber)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).ContinuousDrive as *const _
                as usize
        },
        78usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(ContinuousDrive)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).SensorWidth as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(SensorWidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).SensorHeight as *const _ as usize
        },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(SensorHeight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).AFMicroAdjMode as *const _
                as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(AFMicroAdjMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).AFMicroAdjValue as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(AFMicroAdjValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).MakernotesFlip as *const _
                as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(MakernotesFlip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).RecordMode as *const _ as usize
        },
        94usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(RecordMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).SRAWQuality as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(SRAWQuality)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).wbi as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(wbi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).RF_lensID as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(RF_lensID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).AutoLightingOptimizer as *const _
                as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(AutoLightingOptimizer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).HighlightTonePriority as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(HighlightTonePriority)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).DefaultCropAbsolute as *const _
                as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(DefaultCropAbsolute)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).RecommendedImageArea as *const _
                as usize
        },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(RecommendedImageArea)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).LeftOpticalBlack as *const _
                as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(LeftOpticalBlack)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).UpperOpticalBlack as *const _
                as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(UpperOpticalBlack)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).ActiveArea as *const _ as usize
        },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(ActiveArea)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_canon_makernotes_t>())).ISOgain as *const _ as usize
        },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_canon_makernotes_t),
            "::",
            stringify!(ISOgain)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_hasselblad_makernotes_t {
    pub BaseISO: ::std::os::raw::c_int,
    pub Gain: f64,
    pub Sensor: [::std::os::raw::c_char; 8usize],
    pub SensorUnit: [::std::os::raw::c_char; 64usize],
    pub HostBody: [::std::os::raw::c_char; 64usize],
    pub SensorCode: ::std::os::raw::c_int,
    pub SensorSubCode: ::std::os::raw::c_int,
    pub CoatingCode: ::std::os::raw::c_int,
    pub uncropped: ::std::os::raw::c_int,
    pub CaptureSequenceInitiator: [::std::os::raw::c_char; 32usize],
    pub SensorUnitConnector: [::std::os::raw::c_char; 64usize],
    pub format: ::std::os::raw::c_int,
    pub nIFD_CM: [::std::os::raw::c_int; 2usize],
    pub RecommendedCrop: [::std::os::raw::c_int; 2usize],
    pub mnColorMatrix: [[f64; 3usize]; 4usize],
}
#[test]
fn bindgen_test_layout_libraw_hasselblad_makernotes_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_hasselblad_makernotes_t>(),
        384usize,
        concat!("Size of: ", stringify!(libraw_hasselblad_makernotes_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_hasselblad_makernotes_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_hasselblad_makernotes_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_hasselblad_makernotes_t>())).BaseISO as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_hasselblad_makernotes_t),
            "::",
            stringify!(BaseISO)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_hasselblad_makernotes_t>())).Gain as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_hasselblad_makernotes_t),
            "::",
            stringify!(Gain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_hasselblad_makernotes_t>())).Sensor as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_hasselblad_makernotes_t),
            "::",
            stringify!(Sensor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_hasselblad_makernotes_t>())).SensorUnit as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_hasselblad_makernotes_t),
            "::",
            stringify!(SensorUnit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_hasselblad_makernotes_t>())).HostBody as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_hasselblad_makernotes_t),
            "::",
            stringify!(HostBody)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_hasselblad_makernotes_t>())).SensorCode as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_hasselblad_makernotes_t),
            "::",
            stringify!(SensorCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_hasselblad_makernotes_t>())).SensorSubCode as *const _
                as usize
        },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_hasselblad_makernotes_t),
            "::",
            stringify!(SensorSubCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_hasselblad_makernotes_t>())).CoatingCode as *const _
                as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_hasselblad_makernotes_t),
            "::",
            stringify!(CoatingCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_hasselblad_makernotes_t>())).uncropped as *const _
                as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_hasselblad_makernotes_t),
            "::",
            stringify!(uncropped)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_hasselblad_makernotes_t>())).CaptureSequenceInitiator
                as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_hasselblad_makernotes_t),
            "::",
            stringify!(CaptureSequenceInitiator)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_hasselblad_makernotes_t>())).SensorUnitConnector
                as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_hasselblad_makernotes_t),
            "::",
            stringify!(SensorUnitConnector)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_hasselblad_makernotes_t>())).format as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_hasselblad_makernotes_t),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_hasselblad_makernotes_t>())).nIFD_CM as *const _ as usize
        },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_hasselblad_makernotes_t),
            "::",
            stringify!(nIFD_CM)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_hasselblad_makernotes_t>())).RecommendedCrop as *const _
                as usize
        },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_hasselblad_makernotes_t),
            "::",
            stringify!(RecommendedCrop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_hasselblad_makernotes_t>())).mnColorMatrix as *const _
                as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_hasselblad_makernotes_t),
            "::",
            stringify!(mnColorMatrix)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_fuji_info_t {
    pub ExpoMidPointShift: f32,
    pub DynamicRange: ushort,
    pub FilmMode: ushort,
    pub DynamicRangeSetting: ushort,
    pub DevelopmentDynamicRange: ushort,
    pub AutoDynamicRange: ushort,
    pub DRangePriority: ushort,
    pub DRangePriorityAuto: ushort,
    pub DRangePriorityFixed: ushort,
    pub BrightnessCompensation: f32,
    pub FocusMode: ushort,
    pub AFMode: ushort,
    pub FocusPixel: [ushort; 2usize],
    pub PrioritySettings: ushort,
    pub FocusSettings: ::std::os::raw::c_uint,
    pub AF_C_Settings: ::std::os::raw::c_uint,
    pub FocusWarning: ushort,
    pub ImageStabilization: [ushort; 3usize],
    pub FlashMode: ushort,
    pub WB_Preset: ushort,
    pub ShutterType: ushort,
    pub ExrMode: ushort,
    pub Macro: ushort,
    pub Rating: ::std::os::raw::c_uint,
    pub CropMode: ushort,
    pub SerialSignature: [::std::os::raw::c_char; 13usize],
    pub SensorID: [::std::os::raw::c_char; 5usize],
    pub RAFVersion: [::std::os::raw::c_char; 5usize],
    pub RAFDataGeneration: ::std::os::raw::c_int,
    pub RAFDataVersion: ushort,
    pub isTSNERDTS: ::std::os::raw::c_int,
    pub DriveMode: ::std::os::raw::c_short,
    pub BlackLevel: [ushort; 9usize],
    pub RAFData_ImageSizeTable: [::std::os::raw::c_uint; 32usize],
    pub AutoBracketing: ::std::os::raw::c_int,
    pub SequenceNumber: ::std::os::raw::c_int,
    pub SeriesLength: ::std::os::raw::c_int,
    pub PixelShiftOffset: [f32; 2usize],
    pub ImageCount: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_libraw_fuji_info_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_fuji_info_t>(),
        280usize,
        concat!("Size of: ", stringify!(libraw_fuji_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_fuji_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(libraw_fuji_info_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_fuji_info_t>())).ExpoMidPointShift as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(ExpoMidPointShift)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_fuji_info_t>())).DynamicRange as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(DynamicRange)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_fuji_info_t>())).FilmMode as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(FilmMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_fuji_info_t>())).DynamicRangeSetting as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(DynamicRangeSetting)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_fuji_info_t>())).DevelopmentDynamicRange as *const _
                as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(DevelopmentDynamicRange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_fuji_info_t>())).AutoDynamicRange as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(AutoDynamicRange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_fuji_info_t>())).DRangePriority as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(DRangePriority)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_fuji_info_t>())).DRangePriorityAuto as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(DRangePriorityAuto)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_fuji_info_t>())).DRangePriorityFixed as *const _ as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(DRangePriorityFixed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_fuji_info_t>())).BrightnessCompensation as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(BrightnessCompensation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_fuji_info_t>())).FocusMode as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(FocusMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_fuji_info_t>())).AFMode as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(AFMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_fuji_info_t>())).FocusPixel as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(FocusPixel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_fuji_info_t>())).PrioritySettings as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(PrioritySettings)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_fuji_info_t>())).FocusSettings as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(FocusSettings)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_fuji_info_t>())).AF_C_Settings as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(AF_C_Settings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_fuji_info_t>())).FocusWarning as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(FocusWarning)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_fuji_info_t>())).ImageStabilization as *const _ as usize
        },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(ImageStabilization)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_fuji_info_t>())).FlashMode as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(FlashMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_fuji_info_t>())).WB_Preset as *const _ as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(WB_Preset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_fuji_info_t>())).ShutterType as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(ShutterType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_fuji_info_t>())).ExrMode as *const _ as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(ExrMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_fuji_info_t>())).Macro as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(Macro)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_fuji_info_t>())).Rating as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(Rating)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_fuji_info_t>())).CropMode as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(CropMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_fuji_info_t>())).SerialSignature as *const _ as usize
        },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(SerialSignature)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_fuji_info_t>())).SensorID as *const _ as usize },
        83usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(SensorID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_fuji_info_t>())).RAFVersion as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(RAFVersion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_fuji_info_t>())).RAFDataGeneration as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(RAFDataGeneration)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_fuji_info_t>())).RAFDataVersion as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(RAFDataVersion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_fuji_info_t>())).isTSNERDTS as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(isTSNERDTS)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_fuji_info_t>())).DriveMode as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(DriveMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_fuji_info_t>())).BlackLevel as *const _ as usize },
        110usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(BlackLevel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_fuji_info_t>())).RAFData_ImageSizeTable as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(RAFData_ImageSizeTable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_fuji_info_t>())).AutoBracketing as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(AutoBracketing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_fuji_info_t>())).SequenceNumber as *const _ as usize
        },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(SequenceNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_fuji_info_t>())).SeriesLength as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(SeriesLength)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_fuji_info_t>())).PixelShiftOffset as *const _ as usize
        },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(PixelShiftOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_fuji_info_t>())).ImageCount as *const _ as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_fuji_info_t),
            "::",
            stringify!(ImageCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_sensor_highspeed_crop_t {
    pub cleft: ushort,
    pub ctop: ushort,
    pub cwidth: ushort,
    pub cheight: ushort,
}
#[test]
fn bindgen_test_layout_libraw_sensor_highspeed_crop_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_sensor_highspeed_crop_t>(),
        8usize,
        concat!("Size of: ", stringify!(libraw_sensor_highspeed_crop_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_sensor_highspeed_crop_t>(),
        2usize,
        concat!("Alignment of ", stringify!(libraw_sensor_highspeed_crop_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sensor_highspeed_crop_t>())).cleft as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sensor_highspeed_crop_t),
            "::",
            stringify!(cleft)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sensor_highspeed_crop_t>())).ctop as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sensor_highspeed_crop_t),
            "::",
            stringify!(ctop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sensor_highspeed_crop_t>())).cwidth as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sensor_highspeed_crop_t),
            "::",
            stringify!(cwidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sensor_highspeed_crop_t>())).cheight as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sensor_highspeed_crop_t),
            "::",
            stringify!(cheight)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_nikon_makernotes_t {
    pub ExposureBracketValue: f64,
    pub ActiveDLighting: ushort,
    pub ShootingMode: ushort,
    pub ImageStabilization: [uchar; 7usize],
    pub VibrationReduction: uchar,
    pub VRMode: uchar,
    pub FlashSetting: [::std::os::raw::c_char; 13usize],
    pub FlashType: [::std::os::raw::c_char; 20usize],
    pub FlashExposureCompensation: [uchar; 4usize],
    pub ExternalFlashExposureComp: [uchar; 4usize],
    pub FlashExposureBracketValue: [uchar; 4usize],
    pub FlashMode: uchar,
    pub FlashExposureCompensation2: ::std::os::raw::c_schar,
    pub FlashExposureCompensation3: ::std::os::raw::c_schar,
    pub FlashExposureCompensation4: ::std::os::raw::c_schar,
    pub FlashSource: uchar,
    pub FlashFirmware: [uchar; 2usize],
    pub ExternalFlashFlags: uchar,
    pub FlashControlCommanderMode: uchar,
    pub FlashOutputAndCompensation: uchar,
    pub FlashFocalLength: uchar,
    pub FlashGNDistance: uchar,
    pub FlashGroupControlMode: [uchar; 4usize],
    pub FlashGroupOutputAndCompensation: [uchar; 4usize],
    pub FlashColorFilter: uchar,
    pub NEFCompression: ushort,
    pub ExposureMode: ::std::os::raw::c_int,
    pub ExposureProgram: ::std::os::raw::c_int,
    pub nMEshots: ::std::os::raw::c_int,
    pub MEgainOn: ::std::os::raw::c_int,
    pub ME_WB: [f64; 4usize],
    pub AFFineTune: uchar,
    pub AFFineTuneIndex: uchar,
    pub AFFineTuneAdj: i8,
    pub LensDataVersion: ::std::os::raw::c_uint,
    pub FlashInfoVersion: ::std::os::raw::c_uint,
    pub ColorBalanceVersion: ::std::os::raw::c_uint,
    pub key: uchar,
    pub NEFBitDepth: [ushort; 4usize],
    pub HighSpeedCropFormat: ushort,
    pub SensorHighSpeedCrop: libraw_sensor_highspeed_crop_t,
    pub SensorWidth: ushort,
    pub SensorHeight: ushort,
    pub Active_D_Lighting: ushort,
    pub ShotInfoVersion: ::std::os::raw::c_uint,
    pub MakernotesFlip: ::std::os::raw::c_short,
    pub RollAngle: f64,
    pub PitchAngle: f64,
    pub YawAngle: f64,
}
#[test]
fn bindgen_test_layout_libraw_nikon_makernotes_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_nikon_makernotes_t>(),
        224usize,
        concat!("Size of: ", stringify!(libraw_nikon_makernotes_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_nikon_makernotes_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_nikon_makernotes_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).ExposureBracketValue as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(ExposureBracketValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).ActiveDLighting as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(ActiveDLighting)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).ShootingMode as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(ShootingMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).ImageStabilization as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(ImageStabilization)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).VibrationReduction as *const _
                as usize
        },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(VibrationReduction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).VRMode as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(VRMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).FlashSetting as *const _ as usize
        },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashSetting)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).FlashType as *const _ as usize
        },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).FlashExposureCompensation
                as *const _ as usize
        },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashExposureCompensation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).ExternalFlashExposureComp
                as *const _ as usize
        },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(ExternalFlashExposureComp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).FlashExposureBracketValue
                as *const _ as usize
        },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashExposureBracketValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).FlashMode as *const _ as usize
        },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).FlashExposureCompensation2
                as *const _ as usize
        },
        67usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashExposureCompensation2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).FlashExposureCompensation3
                as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashExposureCompensation3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).FlashExposureCompensation4
                as *const _ as usize
        },
        69usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashExposureCompensation4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).FlashSource as *const _ as usize
        },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashSource)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).FlashFirmware as *const _ as usize
        },
        71usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashFirmware)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).ExternalFlashFlags as *const _
                as usize
        },
        73usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(ExternalFlashFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).FlashControlCommanderMode
                as *const _ as usize
        },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashControlCommanderMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).FlashOutputAndCompensation
                as *const _ as usize
        },
        75usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashOutputAndCompensation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).FlashFocalLength as *const _
                as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashFocalLength)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).FlashGNDistance as *const _
                as usize
        },
        77usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashGNDistance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).FlashGroupControlMode as *const _
                as usize
        },
        78usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashGroupControlMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).FlashGroupOutputAndCompensation
                as *const _ as usize
        },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashGroupOutputAndCompensation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).FlashColorFilter as *const _
                as usize
        },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashColorFilter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).NEFCompression as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(NEFCompression)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).ExposureMode as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(ExposureMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).ExposureProgram as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(ExposureProgram)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).nMEshots as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(nMEshots)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).MEgainOn as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(MEgainOn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).ME_WB as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(ME_WB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).AFFineTune as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(AFFineTune)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).AFFineTuneIndex as *const _
                as usize
        },
        145usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(AFFineTuneIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).AFFineTuneAdj as *const _ as usize
        },
        146usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(AFFineTuneAdj)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).LensDataVersion as *const _
                as usize
        },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(LensDataVersion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).FlashInfoVersion as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(FlashInfoVersion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).ColorBalanceVersion as *const _
                as usize
        },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(ColorBalanceVersion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).key as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).NEFBitDepth as *const _ as usize
        },
        162usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(NEFBitDepth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).HighSpeedCropFormat as *const _
                as usize
        },
        170usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(HighSpeedCropFormat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).SensorHighSpeedCrop as *const _
                as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(SensorHighSpeedCrop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).SensorWidth as *const _ as usize
        },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(SensorWidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).SensorHeight as *const _ as usize
        },
        182usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(SensorHeight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).Active_D_Lighting as *const _
                as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(Active_D_Lighting)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).ShotInfoVersion as *const _
                as usize
        },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(ShotInfoVersion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).MakernotesFlip as *const _
                as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(MakernotesFlip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).RollAngle as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(RollAngle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).PitchAngle as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(PitchAngle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikon_makernotes_t>())).YawAngle as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikon_makernotes_t),
            "::",
            stringify!(YawAngle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_olympus_makernotes_t {
    pub CameraType2: [::std::os::raw::c_char; 6usize],
    pub ValidBits: ushort,
    pub SensorCalibration: [::std::os::raw::c_int; 2usize],
    pub DriveMode: [ushort; 5usize],
    pub ColorSpace: ushort,
    pub FocusMode: [ushort; 2usize],
    pub AutoFocus: ushort,
    pub AFPoint: ushort,
    pub AFAreas: [::std::os::raw::c_uint; 64usize],
    pub AFPointSelected: [f64; 5usize],
    pub AFResult: ushort,
    pub AFFineTune: uchar,
    pub AFFineTuneAdj: [::std::os::raw::c_short; 3usize],
    pub SpecialMode: [::std::os::raw::c_uint; 3usize],
    pub ZoomStepCount: ushort,
    pub FocusStepCount: ushort,
    pub FocusStepInfinity: ushort,
    pub FocusStepNear: ushort,
    pub FocusDistance: f64,
    pub AspectFrame: [ushort; 4usize],
    pub StackedImage: [::std::os::raw::c_uint; 2usize],
    pub isLiveND: uchar,
    pub LiveNDfactor: ::std::os::raw::c_uint,
    pub Panorama_mode: ushort,
    pub Panorama_frameNum: ushort,
}
#[test]
fn bindgen_test_layout_libraw_olympus_makernotes_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_olympus_makernotes_t>(),
        408usize,
        concat!("Size of: ", stringify!(libraw_olympus_makernotes_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_olympus_makernotes_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_olympus_makernotes_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_olympus_makernotes_t>())).CameraType2 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(CameraType2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_olympus_makernotes_t>())).ValidBits as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(ValidBits)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_olympus_makernotes_t>())).SensorCalibration as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(SensorCalibration)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_olympus_makernotes_t>())).DriveMode as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(DriveMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_olympus_makernotes_t>())).ColorSpace as *const _ as usize
        },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(ColorSpace)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_olympus_makernotes_t>())).FocusMode as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(FocusMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_olympus_makernotes_t>())).AutoFocus as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(AutoFocus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_olympus_makernotes_t>())).AFPoint as *const _ as usize
        },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(AFPoint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_olympus_makernotes_t>())).AFAreas as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(AFAreas)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_olympus_makernotes_t>())).AFPointSelected as *const _
                as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(AFPointSelected)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_olympus_makernotes_t>())).AFResult as *const _ as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(AFResult)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_olympus_makernotes_t>())).AFFineTune as *const _ as usize
        },
        338usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(AFFineTune)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_olympus_makernotes_t>())).AFFineTuneAdj as *const _
                as usize
        },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(AFFineTuneAdj)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_olympus_makernotes_t>())).SpecialMode as *const _ as usize
        },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(SpecialMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_olympus_makernotes_t>())).ZoomStepCount as *const _
                as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(ZoomStepCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_olympus_makernotes_t>())).FocusStepCount as *const _
                as usize
        },
        362usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(FocusStepCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_olympus_makernotes_t>())).FocusStepInfinity as *const _
                as usize
        },
        364usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(FocusStepInfinity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_olympus_makernotes_t>())).FocusStepNear as *const _
                as usize
        },
        366usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(FocusStepNear)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_olympus_makernotes_t>())).FocusDistance as *const _
                as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(FocusDistance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_olympus_makernotes_t>())).AspectFrame as *const _ as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(AspectFrame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_olympus_makernotes_t>())).StackedImage as *const _
                as usize
        },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(StackedImage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_olympus_makernotes_t>())).isLiveND as *const _ as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(isLiveND)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_olympus_makernotes_t>())).LiveNDfactor as *const _
                as usize
        },
        396usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(LiveNDfactor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_olympus_makernotes_t>())).Panorama_mode as *const _
                as usize
        },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(Panorama_mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_olympus_makernotes_t>())).Panorama_frameNum as *const _
                as usize
        },
        402usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_olympus_makernotes_t),
            "::",
            stringify!(Panorama_frameNum)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_panasonic_makernotes_t {
    pub Compression: ushort,
    pub BlackLevelDim: ushort,
    pub BlackLevel: [f32; 8usize],
    pub Multishot: ::std::os::raw::c_uint,
    pub gamma: f32,
    pub HighISOMultiplier: [::std::os::raw::c_int; 3usize],
    pub FocusStepNear: ::std::os::raw::c_short,
    pub FocusStepCount: ::std::os::raw::c_short,
    pub ZoomPosition: ::std::os::raw::c_uint,
    pub LensManufacturer: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_libraw_panasonic_makernotes_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_panasonic_makernotes_t>(),
        68usize,
        concat!("Size of: ", stringify!(libraw_panasonic_makernotes_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_panasonic_makernotes_t>(),
        4usize,
        concat!("Alignment of ", stringify!(libraw_panasonic_makernotes_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_panasonic_makernotes_t>())).Compression as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_panasonic_makernotes_t),
            "::",
            stringify!(Compression)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_panasonic_makernotes_t>())).BlackLevelDim as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_panasonic_makernotes_t),
            "::",
            stringify!(BlackLevelDim)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_panasonic_makernotes_t>())).BlackLevel as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_panasonic_makernotes_t),
            "::",
            stringify!(BlackLevel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_panasonic_makernotes_t>())).Multishot as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_panasonic_makernotes_t),
            "::",
            stringify!(Multishot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_panasonic_makernotes_t>())).gamma as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_panasonic_makernotes_t),
            "::",
            stringify!(gamma)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_panasonic_makernotes_t>())).HighISOMultiplier as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_panasonic_makernotes_t),
            "::",
            stringify!(HighISOMultiplier)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_panasonic_makernotes_t>())).FocusStepNear as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_panasonic_makernotes_t),
            "::",
            stringify!(FocusStepNear)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_panasonic_makernotes_t>())).FocusStepCount as *const _
                as usize
        },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_panasonic_makernotes_t),
            "::",
            stringify!(FocusStepCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_panasonic_makernotes_t>())).ZoomPosition as *const _
                as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_panasonic_makernotes_t),
            "::",
            stringify!(ZoomPosition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_panasonic_makernotes_t>())).LensManufacturer as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_panasonic_makernotes_t),
            "::",
            stringify!(LensManufacturer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_pentax_makernotes_t {
    pub DriveMode: [uchar; 4usize],
    pub FocusMode: [ushort; 2usize],
    pub AFPointSelected: [ushort; 2usize],
    pub AFPointSelected_Area: ushort,
    pub AFPointsInFocus_version: ::std::os::raw::c_int,
    pub AFPointsInFocus: ::std::os::raw::c_uint,
    pub FocusPosition: ushort,
    pub AFAdjustment: ::std::os::raw::c_short,
    pub AFPointMode: uchar,
    pub MultiExposure: uchar,
    pub Quality: ushort,
}
#[test]
fn bindgen_test_layout_libraw_pentax_makernotes_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_pentax_makernotes_t>(),
        32usize,
        concat!("Size of: ", stringify!(libraw_pentax_makernotes_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_pentax_makernotes_t>(),
        4usize,
        concat!("Alignment of ", stringify!(libraw_pentax_makernotes_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_pentax_makernotes_t>())).DriveMode as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_pentax_makernotes_t),
            "::",
            stringify!(DriveMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_pentax_makernotes_t>())).FocusMode as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_pentax_makernotes_t),
            "::",
            stringify!(FocusMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_pentax_makernotes_t>())).AFPointSelected as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_pentax_makernotes_t),
            "::",
            stringify!(AFPointSelected)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_pentax_makernotes_t>())).AFPointSelected_Area as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_pentax_makernotes_t),
            "::",
            stringify!(AFPointSelected_Area)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_pentax_makernotes_t>())).AFPointsInFocus_version
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_pentax_makernotes_t),
            "::",
            stringify!(AFPointsInFocus_version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_pentax_makernotes_t>())).AFPointsInFocus as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_pentax_makernotes_t),
            "::",
            stringify!(AFPointsInFocus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_pentax_makernotes_t>())).FocusPosition as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_pentax_makernotes_t),
            "::",
            stringify!(FocusPosition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_pentax_makernotes_t>())).AFAdjustment as *const _ as usize
        },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_pentax_makernotes_t),
            "::",
            stringify!(AFAdjustment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_pentax_makernotes_t>())).AFPointMode as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_pentax_makernotes_t),
            "::",
            stringify!(AFPointMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_pentax_makernotes_t>())).MultiExposure as *const _
                as usize
        },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_pentax_makernotes_t),
            "::",
            stringify!(MultiExposure)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_pentax_makernotes_t>())).Quality as *const _ as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_pentax_makernotes_t),
            "::",
            stringify!(Quality)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_ricoh_makernotes_t {
    pub AFStatus: ushort,
    pub AFAreaXPosition: [::std::os::raw::c_uint; 2usize],
    pub AFAreaYPosition: [::std::os::raw::c_uint; 2usize],
    pub AFAreaMode: ushort,
    pub SensorWidth: ::std::os::raw::c_uint,
    pub SensorHeight: ::std::os::raw::c_uint,
    pub CroppedImageWidth: ::std::os::raw::c_uint,
    pub CroppedImageHeight: ::std::os::raw::c_uint,
    pub WideAdapter: ushort,
    pub CropMode: ushort,
    pub NDFilter: ushort,
    pub AutoBracketing: ushort,
    pub MacroMode: ushort,
    pub FlashMode: ushort,
    pub FlashExposureComp: f64,
    pub ManualFlashOutput: f64,
}
#[test]
fn bindgen_test_layout_libraw_ricoh_makernotes_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_ricoh_makernotes_t>(),
        72usize,
        concat!("Size of: ", stringify!(libraw_ricoh_makernotes_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_ricoh_makernotes_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_ricoh_makernotes_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_ricoh_makernotes_t>())).AFStatus as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_ricoh_makernotes_t),
            "::",
            stringify!(AFStatus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_ricoh_makernotes_t>())).AFAreaXPosition as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_ricoh_makernotes_t),
            "::",
            stringify!(AFAreaXPosition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_ricoh_makernotes_t>())).AFAreaYPosition as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_ricoh_makernotes_t),
            "::",
            stringify!(AFAreaYPosition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_ricoh_makernotes_t>())).AFAreaMode as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_ricoh_makernotes_t),
            "::",
            stringify!(AFAreaMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_ricoh_makernotes_t>())).SensorWidth as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_ricoh_makernotes_t),
            "::",
            stringify!(SensorWidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_ricoh_makernotes_t>())).SensorHeight as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_ricoh_makernotes_t),
            "::",
            stringify!(SensorHeight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_ricoh_makernotes_t>())).CroppedImageWidth as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_ricoh_makernotes_t),
            "::",
            stringify!(CroppedImageWidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_ricoh_makernotes_t>())).CroppedImageHeight as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_ricoh_makernotes_t),
            "::",
            stringify!(CroppedImageHeight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_ricoh_makernotes_t>())).WideAdapter as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_ricoh_makernotes_t),
            "::",
            stringify!(WideAdapter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_ricoh_makernotes_t>())).CropMode as *const _ as usize
        },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_ricoh_makernotes_t),
            "::",
            stringify!(CropMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_ricoh_makernotes_t>())).NDFilter as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_ricoh_makernotes_t),
            "::",
            stringify!(NDFilter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_ricoh_makernotes_t>())).AutoBracketing as *const _
                as usize
        },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_ricoh_makernotes_t),
            "::",
            stringify!(AutoBracketing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_ricoh_makernotes_t>())).MacroMode as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_ricoh_makernotes_t),
            "::",
            stringify!(MacroMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_ricoh_makernotes_t>())).FlashMode as *const _ as usize
        },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_ricoh_makernotes_t),
            "::",
            stringify!(FlashMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_ricoh_makernotes_t>())).FlashExposureComp as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_ricoh_makernotes_t),
            "::",
            stringify!(FlashExposureComp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_ricoh_makernotes_t>())).ManualFlashOutput as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_ricoh_makernotes_t),
            "::",
            stringify!(ManualFlashOutput)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_samsung_makernotes_t {
    pub ImageSizeFull: [::std::os::raw::c_uint; 4usize],
    pub ImageSizeCrop: [::std::os::raw::c_uint; 4usize],
    pub ColorSpace: [::std::os::raw::c_int; 2usize],
    pub key: [::std::os::raw::c_uint; 11usize],
    pub DigitalGain: f64,
    pub DeviceType: ::std::os::raw::c_int,
    pub LensFirmware: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout_libraw_samsung_makernotes_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_samsung_makernotes_t>(),
        136usize,
        concat!("Size of: ", stringify!(libraw_samsung_makernotes_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_samsung_makernotes_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_samsung_makernotes_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_samsung_makernotes_t>())).ImageSizeFull as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_samsung_makernotes_t),
            "::",
            stringify!(ImageSizeFull)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_samsung_makernotes_t>())).ImageSizeCrop as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_samsung_makernotes_t),
            "::",
            stringify!(ImageSizeCrop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_samsung_makernotes_t>())).ColorSpace as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_samsung_makernotes_t),
            "::",
            stringify!(ColorSpace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_samsung_makernotes_t>())).key as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_samsung_makernotes_t),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_samsung_makernotes_t>())).DigitalGain as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_samsung_makernotes_t),
            "::",
            stringify!(DigitalGain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_samsung_makernotes_t>())).DeviceType as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_samsung_makernotes_t),
            "::",
            stringify!(DeviceType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_samsung_makernotes_t>())).LensFirmware as *const _
                as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_samsung_makernotes_t),
            "::",
            stringify!(LensFirmware)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_kodak_makernotes_t {
    pub BlackLevelTop: ushort,
    pub BlackLevelBottom: ushort,
    pub offset_left: ::std::os::raw::c_short,
    pub offset_top: ::std::os::raw::c_short,
    pub clipBlack: ushort,
    pub clipWhite: ushort,
    pub romm_camDaylight: [[f32; 3usize]; 3usize],
    pub romm_camTungsten: [[f32; 3usize]; 3usize],
    pub romm_camFluorescent: [[f32; 3usize]; 3usize],
    pub romm_camFlash: [[f32; 3usize]; 3usize],
    pub romm_camCustom: [[f32; 3usize]; 3usize],
    pub romm_camAuto: [[f32; 3usize]; 3usize],
    pub val018percent: ushort,
    pub val100percent: ushort,
    pub val170percent: ushort,
    pub MakerNoteKodak8a: ::std::os::raw::c_short,
    pub ISOCalibrationGain: f32,
    pub AnalogISO: f32,
}
#[test]
fn bindgen_test_layout_libraw_kodak_makernotes_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_kodak_makernotes_t>(),
        244usize,
        concat!("Size of: ", stringify!(libraw_kodak_makernotes_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_kodak_makernotes_t>(),
        4usize,
        concat!("Alignment of ", stringify!(libraw_kodak_makernotes_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_kodak_makernotes_t>())).BlackLevelTop as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(BlackLevelTop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_kodak_makernotes_t>())).BlackLevelBottom as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(BlackLevelBottom)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_kodak_makernotes_t>())).offset_left as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(offset_left)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_kodak_makernotes_t>())).offset_top as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(offset_top)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_kodak_makernotes_t>())).clipBlack as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(clipBlack)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_kodak_makernotes_t>())).clipWhite as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(clipWhite)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_kodak_makernotes_t>())).romm_camDaylight as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(romm_camDaylight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_kodak_makernotes_t>())).romm_camTungsten as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(romm_camTungsten)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_kodak_makernotes_t>())).romm_camFluorescent as *const _
                as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(romm_camFluorescent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_kodak_makernotes_t>())).romm_camFlash as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(romm_camFlash)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_kodak_makernotes_t>())).romm_camCustom as *const _
                as usize
        },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(romm_camCustom)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_kodak_makernotes_t>())).romm_camAuto as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(romm_camAuto)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_kodak_makernotes_t>())).val018percent as *const _ as usize
        },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(val018percent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_kodak_makernotes_t>())).val100percent as *const _ as usize
        },
        230usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(val100percent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_kodak_makernotes_t>())).val170percent as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(val170percent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_kodak_makernotes_t>())).MakerNoteKodak8a as *const _
                as usize
        },
        234usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(MakerNoteKodak8a)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_kodak_makernotes_t>())).ISOCalibrationGain as *const _
                as usize
        },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(ISOCalibrationGain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_kodak_makernotes_t>())).AnalogISO as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_kodak_makernotes_t),
            "::",
            stringify!(AnalogISO)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_p1_makernotes_t {
    pub Software: [::std::os::raw::c_char; 64usize],
    pub SystemType: [::std::os::raw::c_char; 64usize],
    pub FirmwareString: [::std::os::raw::c_char; 256usize],
    pub SystemModel: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout_libraw_p1_makernotes_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_p1_makernotes_t>(),
        448usize,
        concat!("Size of: ", stringify!(libraw_p1_makernotes_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_p1_makernotes_t>(),
        1usize,
        concat!("Alignment of ", stringify!(libraw_p1_makernotes_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_p1_makernotes_t>())).Software as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_p1_makernotes_t),
            "::",
            stringify!(Software)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_p1_makernotes_t>())).SystemType as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_p1_makernotes_t),
            "::",
            stringify!(SystemType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_p1_makernotes_t>())).FirmwareString as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_p1_makernotes_t),
            "::",
            stringify!(FirmwareString)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_p1_makernotes_t>())).SystemModel as *const _ as usize
        },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_p1_makernotes_t),
            "::",
            stringify!(SystemModel)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_sony_info_t {
    pub CameraType: ushort,
    pub Sony0x9400_version: uchar,
    pub Sony0x9400_ReleaseMode2: uchar,
    pub Sony0x9400_SequenceImageNumber: ::std::os::raw::c_uint,
    pub Sony0x9400_SequenceLength1: uchar,
    pub Sony0x9400_SequenceFileNumber: ::std::os::raw::c_uint,
    pub Sony0x9400_SequenceLength2: uchar,
    pub AFAreaModeSetting: u8,
    pub AFAreaMode: u16,
    pub FlexibleSpotPosition: [ushort; 2usize],
    pub AFPointSelected: u8,
    pub AFPointSelected_0x201e: u8,
    pub nAFPointsUsed: ::std::os::raw::c_short,
    pub AFPointsUsed: [u8; 10usize],
    pub AFTracking: u8,
    pub AFType: u8,
    pub FocusLocation: [ushort; 4usize],
    pub FocusPosition: ushort,
    pub AFMicroAdjValue: i8,
    pub AFMicroAdjOn: i8,
    pub AFMicroAdjRegisteredLenses: uchar,
    pub VariableLowPassFilter: ushort,
    pub LongExposureNoiseReduction: ::std::os::raw::c_uint,
    pub HighISONoiseReduction: ushort,
    pub HDR: [ushort; 2usize],
    pub group2010: ushort,
    pub group9050: ushort,
    pub real_iso_offset: ushort,
    pub MeteringMode_offset: ushort,
    pub ExposureProgram_offset: ushort,
    pub ReleaseMode2_offset: ushort,
    pub MinoltaCamID: ::std::os::raw::c_uint,
    pub firmware: f32,
    pub ImageCount3_offset: ushort,
    pub ImageCount3: ::std::os::raw::c_uint,
    pub ElectronicFrontCurtainShutter: ::std::os::raw::c_uint,
    pub MeteringMode2: ushort,
    pub SonyDateTime: [::std::os::raw::c_char; 20usize],
    pub ShotNumberSincePowerUp: ::std::os::raw::c_uint,
    pub PixelShiftGroupPrefix: ushort,
    pub PixelShiftGroupID: ::std::os::raw::c_uint,
    pub nShotsInPixelShiftGroup: ::std::os::raw::c_char,
    pub numInPixelShiftGroup: ::std::os::raw::c_char,
    pub prd_ImageHeight: ushort,
    pub prd_ImageWidth: ushort,
    pub prd_Total_bps: ushort,
    pub prd_Active_bps: ushort,
    pub prd_StorageMethod: ushort,
    pub prd_BayerPattern: ushort,
    pub SonyRawFileType: ushort,
    pub RAWFileType: ushort,
    pub Quality: ::std::os::raw::c_uint,
    pub FileFormat: ushort,
    pub MetaVersion: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout_libraw_sony_info_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_sony_info_t>(),
        180usize,
        concat!("Size of: ", stringify!(libraw_sony_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_sony_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(libraw_sony_info_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_sony_info_t>())).CameraType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(CameraType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).Sony0x9400_version as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(Sony0x9400_version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).Sony0x9400_ReleaseMode2 as *const _
                as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(Sony0x9400_ReleaseMode2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).Sony0x9400_SequenceImageNumber
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(Sony0x9400_SequenceImageNumber)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).Sony0x9400_SequenceLength1 as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(Sony0x9400_SequenceLength1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).Sony0x9400_SequenceFileNumber as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(Sony0x9400_SequenceFileNumber)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).Sony0x9400_SequenceLength2 as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(Sony0x9400_SequenceLength2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).AFAreaModeSetting as *const _ as usize
        },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(AFAreaModeSetting)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_sony_info_t>())).AFAreaMode as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(AFAreaMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).FlexibleSpotPosition as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(FlexibleSpotPosition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).AFPointSelected as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(AFPointSelected)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).AFPointSelected_0x201e as *const _
                as usize
        },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(AFPointSelected_0x201e)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).nAFPointsUsed as *const _ as usize
        },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(nAFPointsUsed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_sony_info_t>())).AFPointsUsed as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(AFPointsUsed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_sony_info_t>())).AFTracking as *const _ as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(AFTracking)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_sony_info_t>())).AFType as *const _ as usize },
        39usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(AFType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).FocusLocation as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(FocusLocation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).FocusPosition as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(FocusPosition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).AFMicroAdjValue as *const _ as usize
        },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(AFMicroAdjValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_sony_info_t>())).AFMicroAdjOn as *const _ as usize },
        51usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(AFMicroAdjOn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).AFMicroAdjRegisteredLenses as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(AFMicroAdjRegisteredLenses)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).VariableLowPassFilter as *const _
                as usize
        },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(VariableLowPassFilter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).LongExposureNoiseReduction as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(LongExposureNoiseReduction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).HighISONoiseReduction as *const _
                as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(HighISONoiseReduction)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_sony_info_t>())).HDR as *const _ as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(HDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_sony_info_t>())).group2010 as *const _ as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(group2010)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_sony_info_t>())).group9050 as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(group9050)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).real_iso_offset as *const _ as usize
        },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(real_iso_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).MeteringMode_offset as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(MeteringMode_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).ExposureProgram_offset as *const _
                as usize
        },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(ExposureProgram_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).ReleaseMode2_offset as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(ReleaseMode2_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_sony_info_t>())).MinoltaCamID as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(MinoltaCamID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_sony_info_t>())).firmware as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(firmware)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).ImageCount3_offset as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(ImageCount3_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_sony_info_t>())).ImageCount3 as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(ImageCount3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).ElectronicFrontCurtainShutter as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(ElectronicFrontCurtainShutter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).MeteringMode2 as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(MeteringMode2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_sony_info_t>())).SonyDateTime as *const _ as usize },
        102usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(SonyDateTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).ShotNumberSincePowerUp as *const _
                as usize
        },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(ShotNumberSincePowerUp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).PixelShiftGroupPrefix as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(PixelShiftGroupPrefix)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).PixelShiftGroupID as *const _ as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(PixelShiftGroupID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).nShotsInPixelShiftGroup as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(nShotsInPixelShiftGroup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).numInPixelShiftGroup as *const _ as usize
        },
        137usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(numInPixelShiftGroup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).prd_ImageHeight as *const _ as usize
        },
        138usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(prd_ImageHeight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).prd_ImageWidth as *const _ as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(prd_ImageWidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).prd_Total_bps as *const _ as usize
        },
        142usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(prd_Total_bps)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).prd_Active_bps as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(prd_Active_bps)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).prd_StorageMethod as *const _ as usize
        },
        146usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(prd_StorageMethod)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).prd_BayerPattern as *const _ as usize
        },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(prd_BayerPattern)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_sony_info_t>())).SonyRawFileType as *const _ as usize
        },
        150usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(SonyRawFileType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_sony_info_t>())).RAWFileType as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(RAWFileType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_sony_info_t>())).Quality as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(Quality)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_sony_info_t>())).FileFormat as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(FileFormat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_sony_info_t>())).MetaVersion as *const _ as usize },
        162usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_sony_info_t),
            "::",
            stringify!(MetaVersion)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_colordata_t {
    pub curve: [ushort; 65536usize],
    pub cblack: [::std::os::raw::c_uint; 4104usize],
    pub black: ::std::os::raw::c_uint,
    pub data_maximum: ::std::os::raw::c_uint,
    pub maximum: ::std::os::raw::c_uint,
    pub linear_max: [::std::os::raw::c_long; 4usize],
    pub fmaximum: f32,
    pub fnorm: f32,
    pub white: [[ushort; 8usize]; 8usize],
    pub cam_mul: [f32; 4usize],
    pub pre_mul: [f32; 4usize],
    pub cmatrix: [[f32; 4usize]; 3usize],
    pub ccm: [[f32; 4usize]; 3usize],
    pub rgb_cam: [[f32; 4usize]; 3usize],
    pub cam_xyz: [[f32; 3usize]; 4usize],
    pub phase_one_data: ph1_t,
    pub flash_used: f32,
    pub canon_ev: f32,
    pub model2: [::std::os::raw::c_char; 64usize],
    pub UniqueCameraModel: [::std::os::raw::c_char; 64usize],
    pub LocalizedCameraModel: [::std::os::raw::c_char; 64usize],
    pub ImageUniqueID: [::std::os::raw::c_char; 64usize],
    pub RawDataUniqueID: [::std::os::raw::c_char; 17usize],
    pub OriginalRawFileName: [::std::os::raw::c_char; 64usize],
    pub profile: *mut ::std::os::raw::c_void,
    pub profile_length: ::std::os::raw::c_uint,
    pub black_stat: [::std::os::raw::c_uint; 8usize],
    pub dng_color: [libraw_dng_color_t; 2usize],
    pub dng_levels: libraw_dng_levels_t,
    pub WB_Coeffs: [[::std::os::raw::c_int; 4usize]; 256usize],
    pub WBCT_Coeffs: [[f32; 5usize]; 64usize],
    pub as_shot_wb_applied: ::std::os::raw::c_int,
    pub P1_color: [libraw_P1_color_t; 2usize],
    pub raw_bps: ::std::os::raw::c_uint,
    pub ExifColorSpace: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_libraw_colordata_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_colordata_t>(),
        187032usize,
        concat!("Size of: ", stringify!(libraw_colordata_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_colordata_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_colordata_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_colordata_t>())).curve as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(curve)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_colordata_t>())).cblack as *const _ as usize },
        131072usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(cblack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_colordata_t>())).black as *const _ as usize },
        147488usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(black)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_colordata_t>())).data_maximum as *const _ as usize },
        147492usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(data_maximum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_colordata_t>())).maximum as *const _ as usize },
        147496usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(maximum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_colordata_t>())).linear_max as *const _ as usize },
        147500usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(linear_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_colordata_t>())).fmaximum as *const _ as usize },
        147516usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(fmaximum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_colordata_t>())).fnorm as *const _ as usize },
        147520usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(fnorm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_colordata_t>())).white as *const _ as usize },
        147524usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(white)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_colordata_t>())).cam_mul as *const _ as usize },
        147652usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(cam_mul)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_colordata_t>())).pre_mul as *const _ as usize },
        147668usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(pre_mul)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_colordata_t>())).cmatrix as *const _ as usize },
        147684usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(cmatrix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_colordata_t>())).ccm as *const _ as usize },
        147732usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(ccm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_colordata_t>())).rgb_cam as *const _ as usize },
        147780usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(rgb_cam)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_colordata_t>())).cam_xyz as *const _ as usize },
        147828usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(cam_xyz)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_colordata_t>())).phase_one_data as *const _ as usize
        },
        147876usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(phase_one_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_colordata_t>())).flash_used as *const _ as usize },
        147912usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(flash_used)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_colordata_t>())).canon_ev as *const _ as usize },
        147916usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(canon_ev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_colordata_t>())).model2 as *const _ as usize },
        147920usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(model2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_colordata_t>())).UniqueCameraModel as *const _ as usize
        },
        147984usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(UniqueCameraModel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_colordata_t>())).LocalizedCameraModel as *const _ as usize
        },
        148048usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(LocalizedCameraModel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_colordata_t>())).ImageUniqueID as *const _ as usize
        },
        148112usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(ImageUniqueID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_colordata_t>())).RawDataUniqueID as *const _ as usize
        },
        148176usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(RawDataUniqueID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_colordata_t>())).OriginalRawFileName as *const _ as usize
        },
        148193usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(OriginalRawFileName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_colordata_t>())).profile as *const _ as usize },
        148264usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(profile)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_colordata_t>())).profile_length as *const _ as usize
        },
        148272usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(profile_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_colordata_t>())).black_stat as *const _ as usize },
        148276usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(black_stat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_colordata_t>())).dng_color as *const _ as usize },
        148308usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(dng_color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_colordata_t>())).dng_levels as *const _ as usize },
        148644usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(dng_levels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_colordata_t>())).WB_Coeffs as *const _ as usize },
        181572usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(WB_Coeffs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_colordata_t>())).WBCT_Coeffs as *const _ as usize },
        185668usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(WBCT_Coeffs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_colordata_t>())).as_shot_wb_applied as *const _ as usize
        },
        186948usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(as_shot_wb_applied)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_colordata_t>())).P1_color as *const _ as usize },
        186952usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(P1_color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_colordata_t>())).raw_bps as *const _ as usize },
        187024usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(raw_bps)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_colordata_t>())).ExifColorSpace as *const _ as usize
        },
        187028usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_colordata_t),
            "::",
            stringify!(ExifColorSpace)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_thumbnail_t {
    pub tformat: LibRaw_thumbnail_formats,
    pub twidth: ushort,
    pub theight: ushort,
    pub tlength: ::std::os::raw::c_uint,
    pub tcolors: ::std::os::raw::c_int,
    pub thumb: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_libraw_thumbnail_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_thumbnail_t>(),
        24usize,
        concat!("Size of: ", stringify!(libraw_thumbnail_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_thumbnail_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_thumbnail_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_thumbnail_t>())).tformat as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_thumbnail_t),
            "::",
            stringify!(tformat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_thumbnail_t>())).twidth as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_thumbnail_t),
            "::",
            stringify!(twidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_thumbnail_t>())).theight as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_thumbnail_t),
            "::",
            stringify!(theight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_thumbnail_t>())).tlength as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_thumbnail_t),
            "::",
            stringify!(tlength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_thumbnail_t>())).tcolors as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_thumbnail_t),
            "::",
            stringify!(tcolors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_thumbnail_t>())).thumb as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_thumbnail_t),
            "::",
            stringify!(thumb)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_gps_info_t {
    pub latitude: [f32; 3usize],
    pub longitude: [f32; 3usize],
    pub gpstimestamp: [f32; 3usize],
    pub altitude: f32,
    pub altref: ::std::os::raw::c_char,
    pub latref: ::std::os::raw::c_char,
    pub longref: ::std::os::raw::c_char,
    pub gpsstatus: ::std::os::raw::c_char,
    pub gpsparsed: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_libraw_gps_info_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_gps_info_t>(),
        48usize,
        concat!("Size of: ", stringify!(libraw_gps_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_gps_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(libraw_gps_info_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_gps_info_t>())).latitude as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_gps_info_t),
            "::",
            stringify!(latitude)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_gps_info_t>())).longitude as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_gps_info_t),
            "::",
            stringify!(longitude)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_gps_info_t>())).gpstimestamp as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_gps_info_t),
            "::",
            stringify!(gpstimestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_gps_info_t>())).altitude as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_gps_info_t),
            "::",
            stringify!(altitude)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_gps_info_t>())).altref as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_gps_info_t),
            "::",
            stringify!(altref)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_gps_info_t>())).latref as *const _ as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_gps_info_t),
            "::",
            stringify!(latref)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_gps_info_t>())).longref as *const _ as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_gps_info_t),
            "::",
            stringify!(longref)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_gps_info_t>())).gpsstatus as *const _ as usize },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_gps_info_t),
            "::",
            stringify!(gpsstatus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_gps_info_t>())).gpsparsed as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_gps_info_t),
            "::",
            stringify!(gpsparsed)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_imgother_t {
    pub iso_speed: f32,
    pub shutter: f32,
    pub aperture: f32,
    pub focal_len: f32,
    pub timestamp: time_t,
    pub shot_order: ::std::os::raw::c_uint,
    pub gpsdata: [::std::os::raw::c_uint; 32usize],
    pub parsed_gps: libraw_gps_info_t,
    pub desc: [::std::os::raw::c_char; 512usize],
    pub artist: [::std::os::raw::c_char; 64usize],
    pub analogbalance: [f32; 4usize],
}
#[test]
fn bindgen_test_layout_libraw_imgother_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_imgother_t>(),
        800usize,
        concat!("Size of: ", stringify!(libraw_imgother_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_imgother_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_imgother_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_imgother_t>())).iso_speed as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_imgother_t),
            "::",
            stringify!(iso_speed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_imgother_t>())).shutter as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_imgother_t),
            "::",
            stringify!(shutter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_imgother_t>())).aperture as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_imgother_t),
            "::",
            stringify!(aperture)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_imgother_t>())).focal_len as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_imgother_t),
            "::",
            stringify!(focal_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_imgother_t>())).timestamp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_imgother_t),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_imgother_t>())).shot_order as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_imgother_t),
            "::",
            stringify!(shot_order)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_imgother_t>())).gpsdata as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_imgother_t),
            "::",
            stringify!(gpsdata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_imgother_t>())).parsed_gps as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_imgother_t),
            "::",
            stringify!(parsed_gps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_imgother_t>())).desc as *const _ as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_imgother_t),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_imgother_t>())).artist as *const _ as usize },
        716usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_imgother_t),
            "::",
            stringify!(artist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_imgother_t>())).analogbalance as *const _ as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_imgother_t),
            "::",
            stringify!(analogbalance)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_afinfo_item_t {
    pub AFInfoData_tag: ::std::os::raw::c_uint,
    pub AFInfoData_order: ::std::os::raw::c_short,
    pub AFInfoData_version: ::std::os::raw::c_uint,
    pub AFInfoData_length: ::std::os::raw::c_uint,
    pub AFInfoData: *mut uchar,
}
#[test]
fn bindgen_test_layout_libraw_afinfo_item_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_afinfo_item_t>(),
        24usize,
        concat!("Size of: ", stringify!(libraw_afinfo_item_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_afinfo_item_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_afinfo_item_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_afinfo_item_t>())).AFInfoData_tag as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_afinfo_item_t),
            "::",
            stringify!(AFInfoData_tag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_afinfo_item_t>())).AFInfoData_order as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_afinfo_item_t),
            "::",
            stringify!(AFInfoData_order)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_afinfo_item_t>())).AFInfoData_version as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_afinfo_item_t),
            "::",
            stringify!(AFInfoData_version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_afinfo_item_t>())).AFInfoData_length as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_afinfo_item_t),
            "::",
            stringify!(AFInfoData_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_afinfo_item_t>())).AFInfoData as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_afinfo_item_t),
            "::",
            stringify!(AFInfoData)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_metadata_common_t {
    pub FlashEC: f32,
    pub FlashGN: f32,
    pub CameraTemperature: f32,
    pub SensorTemperature: f32,
    pub SensorTemperature2: f32,
    pub LensTemperature: f32,
    pub AmbientTemperature: f32,
    pub BatteryTemperature: f32,
    pub exifAmbientTemperature: f32,
    pub exifHumidity: f32,
    pub exifPressure: f32,
    pub exifWaterDepth: f32,
    pub exifAcceleration: f32,
    pub exifCameraElevationAngle: f32,
    pub real_ISO: f32,
    pub exifExposureIndex: f32,
    pub ColorSpace: ushort,
    pub firmware: [::std::os::raw::c_char; 128usize],
    pub ExposureCalibrationShift: f32,
    pub afdata: [libraw_afinfo_item_t; 4usize],
    pub afcount: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_libraw_metadata_common_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_metadata_common_t>(),
        304usize,
        concat!("Size of: ", stringify!(libraw_metadata_common_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_metadata_common_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_metadata_common_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_metadata_common_t>())).FlashEC as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(FlashEC)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_metadata_common_t>())).FlashGN as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(FlashGN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_metadata_common_t>())).CameraTemperature as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(CameraTemperature)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_metadata_common_t>())).SensorTemperature as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(SensorTemperature)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_metadata_common_t>())).SensorTemperature2 as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(SensorTemperature2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_metadata_common_t>())).LensTemperature as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(LensTemperature)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_metadata_common_t>())).AmbientTemperature as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(AmbientTemperature)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_metadata_common_t>())).BatteryTemperature as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(BatteryTemperature)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_metadata_common_t>())).exifAmbientTemperature as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(exifAmbientTemperature)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_metadata_common_t>())).exifHumidity as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(exifHumidity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_metadata_common_t>())).exifPressure as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(exifPressure)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_metadata_common_t>())).exifWaterDepth as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(exifWaterDepth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_metadata_common_t>())).exifAcceleration as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(exifAcceleration)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_metadata_common_t>())).exifCameraElevationAngle
                as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(exifCameraElevationAngle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_metadata_common_t>())).real_ISO as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(real_ISO)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_metadata_common_t>())).exifExposureIndex as *const _
                as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(exifExposureIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_metadata_common_t>())).ColorSpace as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(ColorSpace)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_metadata_common_t>())).firmware as *const _ as usize
        },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(firmware)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_metadata_common_t>())).ExposureCalibrationShift
                as *const _ as usize
        },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(ExposureCalibrationShift)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_metadata_common_t>())).afdata as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(afdata)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_metadata_common_t>())).afcount as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_metadata_common_t),
            "::",
            stringify!(afcount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_output_params_t {
    pub greybox: [::std::os::raw::c_uint; 4usize],
    pub cropbox: [::std::os::raw::c_uint; 4usize],
    pub aber: [f64; 4usize],
    pub gamm: [f64; 6usize],
    pub user_mul: [f32; 4usize],
    pub bright: f32,
    pub threshold: f32,
    pub half_size: ::std::os::raw::c_int,
    pub four_color_rgb: ::std::os::raw::c_int,
    pub highlight: ::std::os::raw::c_int,
    pub use_auto_wb: ::std::os::raw::c_int,
    pub use_camera_wb: ::std::os::raw::c_int,
    pub use_camera_matrix: ::std::os::raw::c_int,
    pub output_color: ::std::os::raw::c_int,
    pub output_profile: *mut ::std::os::raw::c_char,
    pub camera_profile: *mut ::std::os::raw::c_char,
    pub bad_pixels: *mut ::std::os::raw::c_char,
    pub dark_frame: *mut ::std::os::raw::c_char,
    pub output_bps: ::std::os::raw::c_int,
    pub output_tiff: ::std::os::raw::c_int,
    pub output_flags: ::std::os::raw::c_int,
    pub user_flip: ::std::os::raw::c_int,
    pub user_qual: ::std::os::raw::c_int,
    pub user_black: ::std::os::raw::c_int,
    pub user_cblack: [::std::os::raw::c_int; 4usize],
    pub user_sat: ::std::os::raw::c_int,
    pub med_passes: ::std::os::raw::c_int,
    pub auto_bright_thr: f32,
    pub adjust_maximum_thr: f32,
    pub no_auto_bright: ::std::os::raw::c_int,
    pub use_fuji_rotate: ::std::os::raw::c_int,
    pub green_matching: ::std::os::raw::c_int,
    pub dcb_iterations: ::std::os::raw::c_int,
    pub dcb_enhance_fl: ::std::os::raw::c_int,
    pub fbdd_noiserd: ::std::os::raw::c_int,
    pub exp_correc: ::std::os::raw::c_int,
    pub exp_shift: f32,
    pub exp_preser: f32,
    pub no_auto_scale: ::std::os::raw::c_int,
    pub no_interpolation: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_libraw_output_params_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_output_params_t>(),
        304usize,
        concat!("Size of: ", stringify!(libraw_output_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_output_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_output_params_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_output_params_t>())).greybox as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(greybox)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_output_params_t>())).cropbox as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(cropbox)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_output_params_t>())).aber as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(aber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_output_params_t>())).gamm as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(gamm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_output_params_t>())).user_mul as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(user_mul)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_output_params_t>())).bright as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(bright)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).threshold as *const _ as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(threshold)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).half_size as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(half_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).four_color_rgb as *const _ as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(four_color_rgb)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).highlight as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(highlight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).use_auto_wb as *const _ as usize
        },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(use_auto_wb)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).use_camera_wb as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(use_camera_wb)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).use_camera_matrix as *const _
                as usize
        },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(use_camera_matrix)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).output_color as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(output_color)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).output_profile as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(output_profile)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).camera_profile as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(camera_profile)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).bad_pixels as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(bad_pixels)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).dark_frame as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(dark_frame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).output_bps as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(output_bps)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).output_tiff as *const _ as usize
        },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(output_tiff)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).output_flags as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(output_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).user_flip as *const _ as usize
        },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(user_flip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).user_qual as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(user_qual)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).user_black as *const _ as usize
        },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(user_black)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).user_cblack as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(user_cblack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_output_params_t>())).user_sat as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(user_sat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).med_passes as *const _ as usize
        },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(med_passes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).auto_bright_thr as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(auto_bright_thr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).adjust_maximum_thr as *const _
                as usize
        },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(adjust_maximum_thr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).no_auto_bright as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(no_auto_bright)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).use_fuji_rotate as *const _ as usize
        },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(use_fuji_rotate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).green_matching as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(green_matching)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).dcb_iterations as *const _ as usize
        },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(dcb_iterations)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).dcb_enhance_fl as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(dcb_enhance_fl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).fbdd_noiserd as *const _ as usize
        },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(fbdd_noiserd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).exp_correc as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(exp_correc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).exp_shift as *const _ as usize
        },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(exp_shift)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).exp_preser as *const _ as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(exp_preser)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).no_auto_scale as *const _ as usize
        },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(no_auto_scale)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_output_params_t>())).no_interpolation as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_output_params_t),
            "::",
            stringify!(no_interpolation)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_raw_unpack_params_t {
    pub use_rawspeed: ::std::os::raw::c_int,
    pub use_dngsdk: ::std::os::raw::c_int,
    pub options: ::std::os::raw::c_uint,
    pub shot_select: ::std::os::raw::c_uint,
    pub specials: ::std::os::raw::c_uint,
    pub max_raw_memory_mb: ::std::os::raw::c_uint,
    pub sony_arw2_posterization_thr: ::std::os::raw::c_int,
    pub coolscan_nef_gamma: f32,
    pub p4shot_order: [::std::os::raw::c_char; 5usize],
    pub custom_camera_strings: *mut *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_libraw_raw_unpack_params_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_raw_unpack_params_t>(),
        48usize,
        concat!("Size of: ", stringify!(libraw_raw_unpack_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_raw_unpack_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_raw_unpack_params_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_raw_unpack_params_t>())).use_rawspeed as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_raw_unpack_params_t),
            "::",
            stringify!(use_rawspeed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_raw_unpack_params_t>())).use_dngsdk as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_raw_unpack_params_t),
            "::",
            stringify!(use_dngsdk)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_raw_unpack_params_t>())).options as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_raw_unpack_params_t),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_raw_unpack_params_t>())).shot_select as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_raw_unpack_params_t),
            "::",
            stringify!(shot_select)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_raw_unpack_params_t>())).specials as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_raw_unpack_params_t),
            "::",
            stringify!(specials)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_raw_unpack_params_t>())).max_raw_memory_mb as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_raw_unpack_params_t),
            "::",
            stringify!(max_raw_memory_mb)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_raw_unpack_params_t>())).sony_arw2_posterization_thr
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_raw_unpack_params_t),
            "::",
            stringify!(sony_arw2_posterization_thr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_raw_unpack_params_t>())).coolscan_nef_gamma as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_raw_unpack_params_t),
            "::",
            stringify!(coolscan_nef_gamma)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_raw_unpack_params_t>())).p4shot_order as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_raw_unpack_params_t),
            "::",
            stringify!(p4shot_order)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_raw_unpack_params_t>())).custom_camera_strings as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_raw_unpack_params_t),
            "::",
            stringify!(custom_camera_strings)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_rawdata_t {
    pub raw_alloc: *mut ::std::os::raw::c_void,
    pub raw_image: *mut ushort,
    pub color4_image: *mut [ushort; 4usize],
    pub color3_image: *mut [ushort; 3usize],
    pub float_image: *mut f32,
    pub float3_image: *mut [f32; 3usize],
    pub float4_image: *mut [f32; 4usize],
    pub ph1_cblack: *mut [::std::os::raw::c_short; 2usize],
    pub ph1_rblack: *mut [::std::os::raw::c_short; 2usize],
    pub iparams: libraw_iparams_t,
    pub sizes: libraw_image_sizes_t,
    pub ioparams: libraw_internal_output_params_t,
    pub color: libraw_colordata_t,
}
#[test]
fn bindgen_test_layout_libraw_rawdata_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_rawdata_t>(),
        187744usize,
        concat!("Size of: ", stringify!(libraw_rawdata_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_rawdata_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_rawdata_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_rawdata_t>())).raw_alloc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_rawdata_t),
            "::",
            stringify!(raw_alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_rawdata_t>())).raw_image as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_rawdata_t),
            "::",
            stringify!(raw_image)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_rawdata_t>())).color4_image as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_rawdata_t),
            "::",
            stringify!(color4_image)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_rawdata_t>())).color3_image as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_rawdata_t),
            "::",
            stringify!(color3_image)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_rawdata_t>())).float_image as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_rawdata_t),
            "::",
            stringify!(float_image)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_rawdata_t>())).float3_image as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_rawdata_t),
            "::",
            stringify!(float3_image)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_rawdata_t>())).float4_image as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_rawdata_t),
            "::",
            stringify!(float4_image)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_rawdata_t>())).ph1_cblack as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_rawdata_t),
            "::",
            stringify!(ph1_cblack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_rawdata_t>())).ph1_rblack as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_rawdata_t),
            "::",
            stringify!(ph1_rblack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_rawdata_t>())).iparams as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_rawdata_t),
            "::",
            stringify!(iparams)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_rawdata_t>())).sizes as *const _ as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_rawdata_t),
            "::",
            stringify!(sizes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_rawdata_t>())).ioparams as *const _ as usize },
        696usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_rawdata_t),
            "::",
            stringify!(ioparams)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_rawdata_t>())).color as *const _ as usize },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_rawdata_t),
            "::",
            stringify!(color)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_makernotes_lens_t {
    pub LensID: ::std::os::raw::c_ulonglong,
    pub Lens: [::std::os::raw::c_char; 128usize],
    pub LensFormat: ushort,
    pub LensMount: ushort,
    pub CamID: ::std::os::raw::c_ulonglong,
    pub CameraFormat: ushort,
    pub CameraMount: ushort,
    pub body: [::std::os::raw::c_char; 64usize],
    pub FocalType: ::std::os::raw::c_short,
    pub LensFeatures_pre: [::std::os::raw::c_char; 16usize],
    pub LensFeatures_suf: [::std::os::raw::c_char; 16usize],
    pub MinFocal: f32,
    pub MaxFocal: f32,
    pub MaxAp4MinFocal: f32,
    pub MaxAp4MaxFocal: f32,
    pub MinAp4MinFocal: f32,
    pub MinAp4MaxFocal: f32,
    pub MaxAp: f32,
    pub MinAp: f32,
    pub CurFocal: f32,
    pub CurAp: f32,
    pub MaxAp4CurFocal: f32,
    pub MinAp4CurFocal: f32,
    pub MinFocusDistance: f32,
    pub FocusRangeIndex: f32,
    pub LensFStops: f32,
    pub TeleconverterID: ::std::os::raw::c_ulonglong,
    pub Teleconverter: [::std::os::raw::c_char; 128usize],
    pub AdapterID: ::std::os::raw::c_ulonglong,
    pub Adapter: [::std::os::raw::c_char; 128usize],
    pub AttachmentID: ::std::os::raw::c_ulonglong,
    pub Attachment: [::std::os::raw::c_char; 128usize],
    pub FocalUnits: ushort,
    pub FocalLengthIn35mmFormat: f32,
}
#[test]
fn bindgen_test_layout_libraw_makernotes_lens_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_makernotes_lens_t>(),
        736usize,
        concat!("Size of: ", stringify!(libraw_makernotes_lens_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_makernotes_lens_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_makernotes_lens_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).LensID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(LensID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).Lens as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(Lens)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).LensFormat as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(LensFormat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).LensMount as *const _ as usize
        },
        138usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(LensMount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).CamID as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(CamID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).CameraFormat as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(CameraFormat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).CameraMount as *const _ as usize
        },
        154usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(CameraMount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).body as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).FocalType as *const _ as usize
        },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(FocalType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).LensFeatures_pre as *const _
                as usize
        },
        222usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(LensFeatures_pre)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).LensFeatures_suf as *const _
                as usize
        },
        238usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(LensFeatures_suf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).MinFocal as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(MinFocal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).MaxFocal as *const _ as usize
        },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(MaxFocal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).MaxAp4MinFocal as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(MaxAp4MinFocal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).MaxAp4MaxFocal as *const _ as usize
        },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(MaxAp4MaxFocal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).MinAp4MinFocal as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(MinAp4MinFocal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).MinAp4MaxFocal as *const _ as usize
        },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(MinAp4MaxFocal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).MaxAp as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(MaxAp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).MinAp as *const _ as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(MinAp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).CurFocal as *const _ as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(CurFocal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).CurAp as *const _ as usize },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(CurAp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).MaxAp4CurFocal as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(MaxAp4CurFocal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).MinAp4CurFocal as *const _ as usize
        },
        300usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(MinAp4CurFocal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).MinFocusDistance as *const _
                as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(MinFocusDistance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).FocusRangeIndex as *const _
                as usize
        },
        308usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(FocusRangeIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).LensFStops as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(LensFStops)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).TeleconverterID as *const _
                as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(TeleconverterID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).Teleconverter as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(Teleconverter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).AdapterID as *const _ as usize
        },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(AdapterID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).Adapter as *const _ as usize
        },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(Adapter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).AttachmentID as *const _ as usize
        },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(AttachmentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).Attachment as *const _ as usize
        },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(Attachment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).FocalUnits as *const _ as usize
        },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(FocalUnits)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_makernotes_lens_t>())).FocalLengthIn35mmFormat as *const _
                as usize
        },
        732usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_lens_t),
            "::",
            stringify!(FocalLengthIn35mmFormat)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_nikonlens_t {
    pub EffectiveMaxAp: f32,
    pub LensIDNumber: uchar,
    pub LensFStops: uchar,
    pub MCUVersion: uchar,
    pub LensType: uchar,
}
#[test]
fn bindgen_test_layout_libraw_nikonlens_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_nikonlens_t>(),
        8usize,
        concat!("Size of: ", stringify!(libraw_nikonlens_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_nikonlens_t>(),
        4usize,
        concat!("Alignment of ", stringify!(libraw_nikonlens_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_nikonlens_t>())).EffectiveMaxAp as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikonlens_t),
            "::",
            stringify!(EffectiveMaxAp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_nikonlens_t>())).LensIDNumber as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikonlens_t),
            "::",
            stringify!(LensIDNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_nikonlens_t>())).LensFStops as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikonlens_t),
            "::",
            stringify!(LensFStops)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_nikonlens_t>())).MCUVersion as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikonlens_t),
            "::",
            stringify!(MCUVersion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_nikonlens_t>())).LensType as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_nikonlens_t),
            "::",
            stringify!(LensType)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_dnglens_t {
    pub MinFocal: f32,
    pub MaxFocal: f32,
    pub MaxAp4MinFocal: f32,
    pub MaxAp4MaxFocal: f32,
}
#[test]
fn bindgen_test_layout_libraw_dnglens_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_dnglens_t>(),
        16usize,
        concat!("Size of: ", stringify!(libraw_dnglens_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_dnglens_t>(),
        4usize,
        concat!("Alignment of ", stringify!(libraw_dnglens_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_dnglens_t>())).MinFocal as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dnglens_t),
            "::",
            stringify!(MinFocal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_dnglens_t>())).MaxFocal as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dnglens_t),
            "::",
            stringify!(MaxFocal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_dnglens_t>())).MaxAp4MinFocal as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dnglens_t),
            "::",
            stringify!(MaxAp4MinFocal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_dnglens_t>())).MaxAp4MaxFocal as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_dnglens_t),
            "::",
            stringify!(MaxAp4MaxFocal)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_lensinfo_t {
    pub MinFocal: f32,
    pub MaxFocal: f32,
    pub MaxAp4MinFocal: f32,
    pub MaxAp4MaxFocal: f32,
    pub EXIF_MaxAp: f32,
    pub LensMake: [::std::os::raw::c_char; 128usize],
    pub Lens: [::std::os::raw::c_char; 128usize],
    pub LensSerial: [::std::os::raw::c_char; 128usize],
    pub InternalLensSerial: [::std::os::raw::c_char; 128usize],
    pub FocalLengthIn35mmFormat: ushort,
    pub nikon: libraw_nikonlens_t,
    pub dng: libraw_dnglens_t,
    pub makernotes: libraw_makernotes_lens_t,
}
#[test]
fn bindgen_test_layout_libraw_lensinfo_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_lensinfo_t>(),
        1296usize,
        concat!("Size of: ", stringify!(libraw_lensinfo_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_lensinfo_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_lensinfo_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_lensinfo_t>())).MinFocal as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_lensinfo_t),
            "::",
            stringify!(MinFocal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_lensinfo_t>())).MaxFocal as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_lensinfo_t),
            "::",
            stringify!(MaxFocal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_lensinfo_t>())).MaxAp4MinFocal as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_lensinfo_t),
            "::",
            stringify!(MaxAp4MinFocal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_lensinfo_t>())).MaxAp4MaxFocal as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_lensinfo_t),
            "::",
            stringify!(MaxAp4MaxFocal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_lensinfo_t>())).EXIF_MaxAp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_lensinfo_t),
            "::",
            stringify!(EXIF_MaxAp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_lensinfo_t>())).LensMake as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_lensinfo_t),
            "::",
            stringify!(LensMake)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_lensinfo_t>())).Lens as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_lensinfo_t),
            "::",
            stringify!(Lens)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_lensinfo_t>())).LensSerial as *const _ as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_lensinfo_t),
            "::",
            stringify!(LensSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_lensinfo_t>())).InternalLensSerial as *const _ as usize
        },
        404usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_lensinfo_t),
            "::",
            stringify!(InternalLensSerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_lensinfo_t>())).FocalLengthIn35mmFormat as *const _
                as usize
        },
        532usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_lensinfo_t),
            "::",
            stringify!(FocalLengthIn35mmFormat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_lensinfo_t>())).nikon as *const _ as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_lensinfo_t),
            "::",
            stringify!(nikon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_lensinfo_t>())).dng as *const _ as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_lensinfo_t),
            "::",
            stringify!(dng)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_lensinfo_t>())).makernotes as *const _ as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_lensinfo_t),
            "::",
            stringify!(makernotes)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_makernotes_t {
    pub canon: libraw_canon_makernotes_t,
    pub nikon: libraw_nikon_makernotes_t,
    pub hasselblad: libraw_hasselblad_makernotes_t,
    pub fuji: libraw_fuji_info_t,
    pub olympus: libraw_olympus_makernotes_t,
    pub sony: libraw_sony_info_t,
    pub kodak: libraw_kodak_makernotes_t,
    pub panasonic: libraw_panasonic_makernotes_t,
    pub pentax: libraw_pentax_makernotes_t,
    pub phaseone: libraw_p1_makernotes_t,
    pub ricoh: libraw_ricoh_makernotes_t,
    pub samsung: libraw_samsung_makernotes_t,
    pub common: libraw_metadata_common_t,
}
#[test]
fn bindgen_test_layout_libraw_makernotes_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_makernotes_t>(),
        2944usize,
        concat!("Size of: ", stringify!(libraw_makernotes_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_makernotes_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_makernotes_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_makernotes_t>())).canon as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_t),
            "::",
            stringify!(canon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_makernotes_t>())).nikon as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_t),
            "::",
            stringify!(nikon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_makernotes_t>())).hasselblad as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_t),
            "::",
            stringify!(hasselblad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_makernotes_t>())).fuji as *const _ as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_t),
            "::",
            stringify!(fuji)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_makernotes_t>())).olympus as *const _ as usize },
        1048usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_t),
            "::",
            stringify!(olympus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_makernotes_t>())).sony as *const _ as usize },
        1456usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_t),
            "::",
            stringify!(sony)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_makernotes_t>())).kodak as *const _ as usize },
        1636usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_t),
            "::",
            stringify!(kodak)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_makernotes_t>())).panasonic as *const _ as usize },
        1880usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_t),
            "::",
            stringify!(panasonic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_makernotes_t>())).pentax as *const _ as usize },
        1948usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_t),
            "::",
            stringify!(pentax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_makernotes_t>())).phaseone as *const _ as usize },
        1980usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_t),
            "::",
            stringify!(phaseone)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_makernotes_t>())).ricoh as *const _ as usize },
        2432usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_t),
            "::",
            stringify!(ricoh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_makernotes_t>())).samsung as *const _ as usize },
        2504usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_t),
            "::",
            stringify!(samsung)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_makernotes_t>())).common as *const _ as usize },
        2640usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_makernotes_t),
            "::",
            stringify!(common)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_shootinginfo_t {
    pub DriveMode: ::std::os::raw::c_short,
    pub FocusMode: ::std::os::raw::c_short,
    pub MeteringMode: ::std::os::raw::c_short,
    pub AFPoint: ::std::os::raw::c_short,
    pub ExposureMode: ::std::os::raw::c_short,
    pub ExposureProgram: ::std::os::raw::c_short,
    pub ImageStabilization: ::std::os::raw::c_short,
    pub BodySerial: [::std::os::raw::c_char; 64usize],
    pub InternalBodySerial: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout_libraw_shootinginfo_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_shootinginfo_t>(),
        142usize,
        concat!("Size of: ", stringify!(libraw_shootinginfo_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_shootinginfo_t>(),
        2usize,
        concat!("Alignment of ", stringify!(libraw_shootinginfo_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_shootinginfo_t>())).DriveMode as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_shootinginfo_t),
            "::",
            stringify!(DriveMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_shootinginfo_t>())).FocusMode as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_shootinginfo_t),
            "::",
            stringify!(FocusMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_shootinginfo_t>())).MeteringMode as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_shootinginfo_t),
            "::",
            stringify!(MeteringMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_shootinginfo_t>())).AFPoint as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_shootinginfo_t),
            "::",
            stringify!(AFPoint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_shootinginfo_t>())).ExposureMode as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_shootinginfo_t),
            "::",
            stringify!(ExposureMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_shootinginfo_t>())).ExposureProgram as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_shootinginfo_t),
            "::",
            stringify!(ExposureProgram)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_shootinginfo_t>())).ImageStabilization as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_shootinginfo_t),
            "::",
            stringify!(ImageStabilization)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_shootinginfo_t>())).BodySerial as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_shootinginfo_t),
            "::",
            stringify!(BodySerial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_shootinginfo_t>())).InternalBodySerial as *const _
                as usize
        },
        78usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_shootinginfo_t),
            "::",
            stringify!(InternalBodySerial)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_custom_camera_t {
    pub fsize: ::std::os::raw::c_uint,
    pub rw: ushort,
    pub rh: ushort,
    pub lm: uchar,
    pub tm: uchar,
    pub rm: uchar,
    pub bm: uchar,
    pub lf: ushort,
    pub cf: uchar,
    pub max: uchar,
    pub flags: uchar,
    pub t_make: [::std::os::raw::c_char; 10usize],
    pub t_model: [::std::os::raw::c_char; 20usize],
    pub offset: ushort,
}
#[test]
fn bindgen_test_layout_libraw_custom_camera_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_custom_camera_t>(),
        52usize,
        concat!("Size of: ", stringify!(libraw_custom_camera_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_custom_camera_t>(),
        4usize,
        concat!("Alignment of ", stringify!(libraw_custom_camera_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_custom_camera_t>())).fsize as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_custom_camera_t),
            "::",
            stringify!(fsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_custom_camera_t>())).rw as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_custom_camera_t),
            "::",
            stringify!(rw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_custom_camera_t>())).rh as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_custom_camera_t),
            "::",
            stringify!(rh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_custom_camera_t>())).lm as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_custom_camera_t),
            "::",
            stringify!(lm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_custom_camera_t>())).tm as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_custom_camera_t),
            "::",
            stringify!(tm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_custom_camera_t>())).rm as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_custom_camera_t),
            "::",
            stringify!(rm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_custom_camera_t>())).bm as *const _ as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_custom_camera_t),
            "::",
            stringify!(bm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_custom_camera_t>())).lf as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_custom_camera_t),
            "::",
            stringify!(lf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_custom_camera_t>())).cf as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_custom_camera_t),
            "::",
            stringify!(cf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_custom_camera_t>())).max as *const _ as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_custom_camera_t),
            "::",
            stringify!(max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_custom_camera_t>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_custom_camera_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_custom_camera_t>())).t_make as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_custom_camera_t),
            "::",
            stringify!(t_make)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_custom_camera_t>())).t_model as *const _ as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_custom_camera_t),
            "::",
            stringify!(t_model)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_custom_camera_t>())).offset as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_custom_camera_t),
            "::",
            stringify!(offset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_data_t {
    pub image: *mut [ushort; 4usize],
    pub sizes: libraw_image_sizes_t,
    pub idata: libraw_iparams_t,
    pub lens: libraw_lensinfo_t,
    pub makernotes: libraw_makernotes_t,
    pub shootinginfo: libraw_shootinginfo_t,
    pub params: libraw_output_params_t,
    pub rawparams: libraw_raw_unpack_params_t,
    pub progress_flags: ::std::os::raw::c_uint,
    pub process_warnings: ::std::os::raw::c_uint,
    pub color: libraw_colordata_t,
    pub other: libraw_imgother_t,
    pub thumbnail: libraw_thumbnail_t,
    pub rawdata: libraw_rawdata_t,
    pub parent_class: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_libraw_data_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_data_t>(),
        380984usize,
        concat!("Size of: ", stringify!(libraw_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_data_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_data_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_data_t>())).image as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_data_t),
            "::",
            stringify!(image)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_data_t>())).sizes as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_data_t),
            "::",
            stringify!(sizes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_data_t>())).idata as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_data_t),
            "::",
            stringify!(idata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_data_t>())).lens as *const _ as usize },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_data_t),
            "::",
            stringify!(lens)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_data_t>())).makernotes as *const _ as usize },
        1928usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_data_t),
            "::",
            stringify!(makernotes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_data_t>())).shootinginfo as *const _ as usize },
        4872usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_data_t),
            "::",
            stringify!(shootinginfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_data_t>())).params as *const _ as usize },
        5016usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_data_t),
            "::",
            stringify!(params)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_data_t>())).rawparams as *const _ as usize },
        5320usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_data_t),
            "::",
            stringify!(rawparams)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_data_t>())).progress_flags as *const _ as usize },
        5368usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_data_t),
            "::",
            stringify!(progress_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_data_t>())).process_warnings as *const _ as usize },
        5372usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_data_t),
            "::",
            stringify!(process_warnings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_data_t>())).color as *const _ as usize },
        5376usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_data_t),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_data_t>())).other as *const _ as usize },
        192408usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_data_t),
            "::",
            stringify!(other)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_data_t>())).thumbnail as *const _ as usize },
        193208usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_data_t),
            "::",
            stringify!(thumbnail)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_data_t>())).rawdata as *const _ as usize },
        193232usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_data_t),
            "::",
            stringify!(rawdata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_data_t>())).parent_class as *const _ as usize },
        380976usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_data_t),
            "::",
            stringify!(parent_class)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct internal_data_t {
    pub input: *mut LibRaw_abstract_datastream,
    pub output: *mut FILE,
    pub input_internal: ::std::os::raw::c_int,
    pub meta_data: *mut ::std::os::raw::c_char,
    pub profile_offset: INT64,
    pub toffset: INT64,
    pub pana_black: [::std::os::raw::c_uint; 4usize],
}
#[test]
fn bindgen_test_layout_internal_data_t() {
    assert_eq!(
        ::std::mem::size_of::<internal_data_t>(),
        64usize,
        concat!("Size of: ", stringify!(internal_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<internal_data_t>(),
        8usize,
        concat!("Alignment of ", stringify!(internal_data_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<internal_data_t>())).input as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(internal_data_t),
            "::",
            stringify!(input)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<internal_data_t>())).output as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(internal_data_t),
            "::",
            stringify!(output)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<internal_data_t>())).input_internal as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(internal_data_t),
            "::",
            stringify!(input_internal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<internal_data_t>())).meta_data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(internal_data_t),
            "::",
            stringify!(meta_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<internal_data_t>())).profile_offset as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(internal_data_t),
            "::",
            stringify!(profile_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<internal_data_t>())).toffset as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(internal_data_t),
            "::",
            stringify!(toffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<internal_data_t>())).pana_black as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(internal_data_t),
            "::",
            stringify!(pana_black)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct output_data_t {
    pub histogram: *mut [::std::os::raw::c_int; 8192usize],
    pub oprof: *mut ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_output_data_t() {
    assert_eq!(
        ::std::mem::size_of::<output_data_t>(),
        16usize,
        concat!("Size of: ", stringify!(output_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<output_data_t>(),
        8usize,
        concat!("Alignment of ", stringify!(output_data_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<output_data_t>())).histogram as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(output_data_t),
            "::",
            stringify!(histogram)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<output_data_t>())).oprof as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(output_data_t),
            "::",
            stringify!(oprof)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct identify_data_t {
    pub olympus_exif_cfa: ::std::os::raw::c_uint,
    pub unique_id: ::std::os::raw::c_ulonglong,
    pub OlyID: ::std::os::raw::c_ulonglong,
    pub tiff_nifds: ::std::os::raw::c_uint,
    pub tiff_flip: ::std::os::raw::c_int,
    pub metadata_blocks: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_identify_data_t() {
    assert_eq!(
        ::std::mem::size_of::<identify_data_t>(),
        40usize,
        concat!("Size of: ", stringify!(identify_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<identify_data_t>(),
        8usize,
        concat!("Alignment of ", stringify!(identify_data_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<identify_data_t>())).olympus_exif_cfa as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(identify_data_t),
            "::",
            stringify!(olympus_exif_cfa)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<identify_data_t>())).unique_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(identify_data_t),
            "::",
            stringify!(unique_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<identify_data_t>())).OlyID as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(identify_data_t),
            "::",
            stringify!(OlyID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<identify_data_t>())).tiff_nifds as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(identify_data_t),
            "::",
            stringify!(tiff_nifds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<identify_data_t>())).tiff_flip as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(identify_data_t),
            "::",
            stringify!(tiff_flip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<identify_data_t>())).metadata_blocks as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(identify_data_t),
            "::",
            stringify!(metadata_blocks)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct crx_data_header_t {
    pub version: i32,
    pub f_width: i32,
    pub f_height: i32,
    pub tileWidth: i32,
    pub tileHeight: i32,
    pub nBits: i32,
    pub nPlanes: i32,
    pub cfaLayout: i32,
    pub encType: i32,
    pub imageLevels: i32,
    pub hasTileCols: i32,
    pub hasTileRows: i32,
    pub mdatHdrSize: i32,
    pub MediaSize: u32,
    pub MediaOffset: INT64,
    pub MediaType: u32,
}
#[test]
fn bindgen_test_layout_crx_data_header_t() {
    assert_eq!(
        ::std::mem::size_of::<crx_data_header_t>(),
        72usize,
        concat!("Size of: ", stringify!(crx_data_header_t))
    );
    assert_eq!(
        ::std::mem::align_of::<crx_data_header_t>(),
        8usize,
        concat!("Alignment of ", stringify!(crx_data_header_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crx_data_header_t>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(crx_data_header_t),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crx_data_header_t>())).f_width as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(crx_data_header_t),
            "::",
            stringify!(f_width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crx_data_header_t>())).f_height as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(crx_data_header_t),
            "::",
            stringify!(f_height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crx_data_header_t>())).tileWidth as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(crx_data_header_t),
            "::",
            stringify!(tileWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crx_data_header_t>())).tileHeight as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(crx_data_header_t),
            "::",
            stringify!(tileHeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crx_data_header_t>())).nBits as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(crx_data_header_t),
            "::",
            stringify!(nBits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crx_data_header_t>())).nPlanes as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(crx_data_header_t),
            "::",
            stringify!(nPlanes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crx_data_header_t>())).cfaLayout as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(crx_data_header_t),
            "::",
            stringify!(cfaLayout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crx_data_header_t>())).encType as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(crx_data_header_t),
            "::",
            stringify!(encType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crx_data_header_t>())).imageLevels as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(crx_data_header_t),
            "::",
            stringify!(imageLevels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crx_data_header_t>())).hasTileCols as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(crx_data_header_t),
            "::",
            stringify!(hasTileCols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crx_data_header_t>())).hasTileRows as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(crx_data_header_t),
            "::",
            stringify!(hasTileRows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crx_data_header_t>())).mdatHdrSize as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(crx_data_header_t),
            "::",
            stringify!(mdatHdrSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crx_data_header_t>())).MediaSize as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(crx_data_header_t),
            "::",
            stringify!(MediaSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crx_data_header_t>())).MediaOffset as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(crx_data_header_t),
            "::",
            stringify!(MediaOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crx_data_header_t>())).MediaType as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(crx_data_header_t),
            "::",
            stringify!(MediaType)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct unpacker_data_t {
    pub order: ::std::os::raw::c_short,
    pub sraw_mul: [ushort; 4usize],
    pub cr2_slice: [ushort; 3usize],
    pub kodak_cbpp: ::std::os::raw::c_uint,
    pub strip_offset: INT64,
    pub data_offset: INT64,
    pub meta_offset: INT64,
    pub exif_offset: INT64,
    pub exif_subdir_offset: INT64,
    pub ifd0_offset: INT64,
    pub data_size: ::std::os::raw::c_uint,
    pub meta_length: ::std::os::raw::c_uint,
    pub cr3_exif_length: ::std::os::raw::c_uint,
    pub cr3_ifd0_length: ::std::os::raw::c_uint,
    pub thumb_misc: ::std::os::raw::c_uint,
    pub fuji_layout: ::std::os::raw::c_uint,
    pub tiff_samples: ::std::os::raw::c_uint,
    pub tiff_bps: ::std::os::raw::c_uint,
    pub tiff_compress: ::std::os::raw::c_uint,
    pub tiff_sampleformat: ::std::os::raw::c_uint,
    pub zero_after_ff: ::std::os::raw::c_uint,
    pub tile_width: ::std::os::raw::c_uint,
    pub tile_length: ::std::os::raw::c_uint,
    pub load_flags: ::std::os::raw::c_uint,
    pub data_error: ::std::os::raw::c_uint,
    pub hasselblad_parser_flag: ::std::os::raw::c_int,
    pub posRAFData: ::std::os::raw::c_longlong,
    pub lenRAFData: ::std::os::raw::c_uint,
    pub fuji_total_lines: ::std::os::raw::c_int,
    pub fuji_total_blocks: ::std::os::raw::c_int,
    pub fuji_block_width: ::std::os::raw::c_int,
    pub fuji_bits: ::std::os::raw::c_int,
    pub fuji_raw_type: ::std::os::raw::c_int,
    pub fuji_lossless: ::std::os::raw::c_int,
    pub pana_encoding: ::std::os::raw::c_int,
    pub pana_bpp: ::std::os::raw::c_int,
    pub crx_header: [crx_data_header_t; 16usize],
    pub crx_track_selected: ::std::os::raw::c_int,
    pub CR3_CTMDtag: ::std::os::raw::c_short,
    pub CR3_Version: ::std::os::raw::c_short,
    pub CM_found: ::std::os::raw::c_int,
    pub is_NikonTransfer: ::std::os::raw::c_uint,
    pub is_Olympus: ::std::os::raw::c_uint,
    pub OlympusDNG_SubDirOffsetValid: ::std::os::raw::c_int,
    pub is_Sony: ::std::os::raw::c_uint,
    pub is_pana_raw: ::std::os::raw::c_uint,
    pub is_PentaxRicohMakernotes: ::std::os::raw::c_uint,
    pub dng_frames: [::std::os::raw::c_uint; 20usize],
    pub raw_stride: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_unpacker_data_t() {
    assert_eq!(
        ::std::mem::size_of::<unpacker_data_t>(),
        1456usize,
        concat!("Size of: ", stringify!(unpacker_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<unpacker_data_t>(),
        8usize,
        concat!("Alignment of ", stringify!(unpacker_data_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<unpacker_data_t>())).order as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(order)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<unpacker_data_t>())).sraw_mul as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(sraw_mul)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<unpacker_data_t>())).cr2_slice as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(cr2_slice)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<unpacker_data_t>())).kodak_cbpp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(kodak_cbpp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<unpacker_data_t>())).strip_offset as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(strip_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<unpacker_data_t>())).data_offset as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(data_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<unpacker_data_t>())).meta_offset as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(meta_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<unpacker_data_t>())).exif_offset as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(exif_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<unpacker_data_t>())).exif_subdir_offset as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(exif_subdir_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<unpacker_data_t>())).ifd0_offset as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(ifd0_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<unpacker_data_t>())).data_size as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(data_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<unpacker_data_t>())).meta_length as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(meta_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<unpacker_data_t>())).cr3_exif_length as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(cr3_exif_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<unpacker_data_t>())).cr3_ifd0_length as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(cr3_ifd0_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<unpacker_data_t>())).thumb_misc as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(thumb_misc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<unpacker_data_t>())).fuji_layout as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(fuji_layout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<unpacker_data_t>())).tiff_samples as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(tiff_samples)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<unpacker_data_t>())).tiff_bps as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(tiff_bps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<unpacker_data_t>())).tiff_compress as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(tiff_compress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<unpacker_data_t>())).tiff_sampleformat as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(tiff_sampleformat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<unpacker_data_t>())).zero_after_ff as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(zero_after_ff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<unpacker_data_t>())).tile_width as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(tile_width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<unpacker_data_t>())).tile_length as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(tile_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<unpacker_data_t>())).load_flags as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(load_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<unpacker_data_t>())).data_error as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(data_error)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<unpacker_data_t>())).hasselblad_parser_flag as *const _ as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(hasselblad_parser_flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<unpacker_data_t>())).posRAFData as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(posRAFData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<unpacker_data_t>())).lenRAFData as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(lenRAFData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<unpacker_data_t>())).fuji_total_lines as *const _ as usize
        },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(fuji_total_lines)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<unpacker_data_t>())).fuji_total_blocks as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(fuji_total_blocks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<unpacker_data_t>())).fuji_block_width as *const _ as usize
        },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(fuji_block_width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<unpacker_data_t>())).fuji_bits as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(fuji_bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<unpacker_data_t>())).fuji_raw_type as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(fuji_raw_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<unpacker_data_t>())).fuji_lossless as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(fuji_lossless)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<unpacker_data_t>())).pana_encoding as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(pana_encoding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<unpacker_data_t>())).pana_bpp as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(pana_bpp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<unpacker_data_t>())).crx_header as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(crx_header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<unpacker_data_t>())).crx_track_selected as *const _ as usize
        },
        1336usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(crx_track_selected)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<unpacker_data_t>())).CR3_CTMDtag as *const _ as usize },
        1340usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(CR3_CTMDtag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<unpacker_data_t>())).CR3_Version as *const _ as usize },
        1342usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(CR3_Version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<unpacker_data_t>())).CM_found as *const _ as usize },
        1344usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(CM_found)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<unpacker_data_t>())).is_NikonTransfer as *const _ as usize
        },
        1348usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(is_NikonTransfer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<unpacker_data_t>())).is_Olympus as *const _ as usize },
        1352usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(is_Olympus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<unpacker_data_t>())).OlympusDNG_SubDirOffsetValid as *const _
                as usize
        },
        1356usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(OlympusDNG_SubDirOffsetValid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<unpacker_data_t>())).is_Sony as *const _ as usize },
        1360usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(is_Sony)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<unpacker_data_t>())).is_pana_raw as *const _ as usize },
        1364usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(is_pana_raw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<unpacker_data_t>())).is_PentaxRicohMakernotes as *const _
                as usize
        },
        1368usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(is_PentaxRicohMakernotes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<unpacker_data_t>())).dng_frames as *const _ as usize },
        1372usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(dng_frames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<unpacker_data_t>())).raw_stride as *const _ as usize },
        1452usize,
        concat!(
            "Offset of field: ",
            stringify!(unpacker_data_t),
            "::",
            stringify!(raw_stride)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_internal_data_t {
    pub internal_data: internal_data_t,
    pub internal_output_params: libraw_internal_output_params_t,
    pub output_data: output_data_t,
    pub identify_data: identify_data_t,
    pub unpacker_data: unpacker_data_t,
}
#[test]
fn bindgen_test_layout_libraw_internal_data_t() {
    assert_eq!(
        ::std::mem::size_of::<libraw_internal_data_t>(),
        1592usize,
        concat!("Size of: ", stringify!(libraw_internal_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_internal_data_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libraw_internal_data_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_internal_data_t>())).internal_data as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_internal_data_t),
            "::",
            stringify!(internal_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_internal_data_t>())).internal_output_params as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_internal_data_t),
            "::",
            stringify!(internal_output_params)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_internal_data_t>())).output_data as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_internal_data_t),
            "::",
            stringify!(output_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_internal_data_t>())).identify_data as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_internal_data_t),
            "::",
            stringify!(identify_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<libraw_internal_data_t>())).unpacker_data as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_internal_data_t),
            "::",
            stringify!(unpacker_data)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct libraw_tiff_tag {
    pub tag: ushort,
    pub type_: ushort,
    pub count: ::std::os::raw::c_int,
    pub val: libraw_tiff_tag__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union libraw_tiff_tag__bindgen_ty_1 {
    pub c: [::std::os::raw::c_char; 4usize],
    pub s: [::std::os::raw::c_short; 2usize],
    pub i: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_libraw_tiff_tag__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<libraw_tiff_tag__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(libraw_tiff_tag__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_tiff_tag__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(libraw_tiff_tag__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_tiff_tag__bindgen_ty_1>())).c as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_tiff_tag__bindgen_ty_1),
            "::",
            stringify!(c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_tiff_tag__bindgen_ty_1>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_tiff_tag__bindgen_ty_1),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_tiff_tag__bindgen_ty_1>())).i as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_tiff_tag__bindgen_ty_1),
            "::",
            stringify!(i)
        )
    );
}
#[test]
fn bindgen_test_layout_libraw_tiff_tag() {
    assert_eq!(
        ::std::mem::size_of::<libraw_tiff_tag>(),
        12usize,
        concat!("Size of: ", stringify!(libraw_tiff_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<libraw_tiff_tag>(),
        4usize,
        concat!("Alignment of ", stringify!(libraw_tiff_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_tiff_tag>())).tag as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_tiff_tag),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_tiff_tag>())).type_ as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_tiff_tag),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_tiff_tag>())).count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_tiff_tag),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<libraw_tiff_tag>())).val as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libraw_tiff_tag),
            "::",
            stringify!(val)
        )
    );
}
extern "C" {
    pub fn libraw_strerror(errorcode: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn libraw_strprogress(arg1: LibRaw_progress) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn libraw_init(flags: ::std::os::raw::c_uint) -> *mut libraw_data_t;
}
extern "C" {
    pub fn libraw_open_file(
        arg1: *mut libraw_data_t,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libraw_open_wfile(
        arg1: *mut libraw_data_t,
        arg2: *const wchar_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libraw_open_buffer(
        arg1: *mut libraw_data_t,
        buffer: *const ::std::os::raw::c_void,
        size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libraw_open_bayer(
        lr: *mut libraw_data_t,
        data: *mut ::std::os::raw::c_uchar,
        datalen: ::std::os::raw::c_uint,
        _raw_width: ushort,
        _raw_height: ushort,
        _left_margin: ushort,
        _top_margin: ushort,
        _right_margin: ushort,
        _bottom_margin: ushort,
        procflags: ::std::os::raw::c_uchar,
        bayer_battern: ::std::os::raw::c_uchar,
        unused_bits: ::std::os::raw::c_uint,
        otherflags: ::std::os::raw::c_uint,
        black_level: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libraw_unpack(arg1: *mut libraw_data_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libraw_unpack_thumb(arg1: *mut libraw_data_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libraw_recycle_datastream(arg1: *mut libraw_data_t);
}
extern "C" {
    pub fn libraw_recycle(arg1: *mut libraw_data_t);
}
extern "C" {
    pub fn libraw_close(arg1: *mut libraw_data_t);
}
extern "C" {
    pub fn libraw_subtract_black(arg1: *mut libraw_data_t);
}
extern "C" {
    pub fn libraw_raw2image(arg1: *mut libraw_data_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libraw_free_image(arg1: *mut libraw_data_t);
}
extern "C" {
    pub fn libraw_version() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn libraw_versionNumber() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libraw_cameraList() -> *mut *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn libraw_cameraCount() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libraw_set_exifparser_handler(
        arg1: *mut libraw_data_t,
        cb: exif_parser_callback,
        datap: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn libraw_set_dataerror_handler(
        arg1: *mut libraw_data_t,
        func: data_callback,
        datap: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn libraw_set_progress_handler(
        arg1: *mut libraw_data_t,
        cb: progress_callback,
        datap: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn libraw_unpack_function_name(lr: *mut libraw_data_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn libraw_get_decoder_info(
        lr: *mut libraw_data_t,
        d: *mut libraw_decoder_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libraw_COLOR(
        arg1: *mut libraw_data_t,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libraw_capabilities() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn libraw_adjust_sizes_info_only(arg1: *mut libraw_data_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libraw_dcraw_ppm_tiff_writer(
        lr: *mut libraw_data_t,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libraw_dcraw_thumb_writer(
        lr: *mut libraw_data_t,
        fname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libraw_dcraw_process(lr: *mut libraw_data_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libraw_dcraw_make_mem_image(
        lr: *mut libraw_data_t,
        errc: *mut ::std::os::raw::c_int,
    ) -> *mut libraw_processed_image_t;
}
extern "C" {
    pub fn libraw_dcraw_make_mem_thumb(
        lr: *mut libraw_data_t,
        errc: *mut ::std::os::raw::c_int,
    ) -> *mut libraw_processed_image_t;
}
extern "C" {
    pub fn libraw_dcraw_clear_mem(arg1: *mut libraw_processed_image_t);
}
extern "C" {
    pub fn libraw_set_demosaic(lr: *mut libraw_data_t, value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn libraw_set_output_color(lr: *mut libraw_data_t, value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn libraw_set_adjust_maximum_thr(lr: *mut libraw_data_t, value: f32);
}
extern "C" {
    pub fn libraw_set_user_mul(lr: *mut libraw_data_t, index: ::std::os::raw::c_int, val: f32);
}
extern "C" {
    pub fn libraw_set_output_bps(lr: *mut libraw_data_t, value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn libraw_set_gamma(lr: *mut libraw_data_t, index: ::std::os::raw::c_int, value: f32);
}
extern "C" {
    pub fn libraw_set_no_auto_bright(lr: *mut libraw_data_t, value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn libraw_set_bright(lr: *mut libraw_data_t, value: f32);
}
extern "C" {
    pub fn libraw_set_highlight(lr: *mut libraw_data_t, value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn libraw_set_fbdd_noiserd(lr: *mut libraw_data_t, value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn libraw_get_raw_height(lr: *mut libraw_data_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libraw_get_raw_width(lr: *mut libraw_data_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libraw_get_iheight(lr: *mut libraw_data_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libraw_get_iwidth(lr: *mut libraw_data_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libraw_get_cam_mul(lr: *mut libraw_data_t, index: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn libraw_get_pre_mul(lr: *mut libraw_data_t, index: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn libraw_get_rgb_cam(
        lr: *mut libraw_data_t,
        index1: ::std::os::raw::c_int,
        index2: ::std::os::raw::c_int,
    ) -> f32;
}
extern "C" {
    pub fn libraw_get_color_maximum(lr: *mut libraw_data_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libraw_set_output_tif(lr: *mut libraw_data_t, value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn libraw_get_iparams(lr: *mut libraw_data_t) -> *mut libraw_iparams_t;
}
extern "C" {
    pub fn libraw_get_lensinfo(lr: *mut libraw_data_t) -> *mut libraw_lensinfo_t;
}
extern "C" {
    pub fn libraw_get_imgother(lr: *mut libraw_data_t) -> *mut libraw_imgother_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LibRaw_abstract_datastream {
    pub _address: u8,
}
